{"schemas":{"donor":{"updated":{"menopause_status":{"description":{"left":"Indicate the donor's menopause status at the time of primary diagnosis. (Codelist reference: NCI CDE ID: 2434914)","right":"Indicate the donor's menopause status at the time of primary diagnosis."}}},"created":{},"deleted":{}},"specimen":{"updated":{"pathological_tumour_staging_system":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{"required":{"right":true}}},"pathological_stage_group":{"meta":{"notes":{"left":"This field depends on the selected pathological staging system, and is only required if the specimen is a tumour."}},"restrictions":{}},"tumour_histological_type":{"description":{"left":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Please refer to the guidelines provided in the ICD-O-3 manual at https://apps.who.int/iris/handle/10665/42344.","right":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3)."},"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{"required":{"right":true},"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":"M-[0-9]{4}/[0-9]{2}$"}}},"central_pathology_confirmed":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{"required":{"right":true}}},"tumour_grading_system":{"description":{"left":"Specify the tumour staging system used to assess the description of a tumour based on how abnormal the tumour cells and the tumour tissue look under a microscope. Tumour grade is an indicator of how quickly a tumour is likely to grow.","right":"Specify the tumour staging system used to assess the description of a tumour based on how abnormal the tumour cells and the tumour tissue look under a microscope. Tumour grade is an indicator of how quickly a tumour is likely to  grow."},"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{"required":{"right":true}}},"tumour_grade":{"meta":{"notes":{"left":"This field depends on the selected tumour grading system, and is only required if the specimen is a tumour.","right":"This field depends on the selected tumour grading system."}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'default':\n          codeList = [\n            'gx - cannot be assessed',\n            'g1 well differentiated/low grade',\n            'g2 moderately differentiated/intermediated grade',\n            'g3 poorly differentiated/high grade',\n            'g4 undifferentiated/high grade',\n          ];\n          break;\n        case 'gleason':\n          codeList = [\n            'gleason x: gleason score cannot be determined',\n            'gleason 2–6: the tumor tissue is well differentiated',\n            'gleason 7: the tumor tissue is moderately differentiated',\n            'gleason 8–10: the tumor tissue is poorly differentiated or undifferentiated',\n          ];\n          break;\n        case 'nottingham':\n          codeList = [\n            'g1 (low grade or well differentiated)',\n            'g2 (intermediate grade or moderately differentiated)',\n            'g3 (high grade or poorly differentiated)',\n          ];\n          break;\n        case 'brain cancer':\n          codeList = ['grade i', 'grade ii', 'grade iii', 'grade iv'];\n          break;\n        case 'isup for renal cell carcinoma':\n          codeList = [\n            'grade 1: tumor cell nucleoli invisible or small and basophilic at 400 x magnification',\n            'grade 2: tumor cell nucleoli conspicuous at 400 x magnification but inconspicuous at 100 x magnification',\n            'grade 3: tumor cell nucleoli eosinophilic and clearly visible at 100 x magnification',\n            'grade 4: tumors showing extreme nuclear pleomorphism and/or containing tumor giant cells and/or the presence of any proportion of tumor showing sarcomatoid and/or rhabdoid dedifferentiation',\n          ];\n          break;\n        case 'lymphoid neoplasms':\n          codeList = ['low grade or indolent nhl', 'high grade or aggressive nhl'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        let codeList = [];\n        switch ($row.tumour_grading_system.trim().toLowerCase()) {\n            case 'default':\n                codeList = [\n                    'gx - cannot be assessed',\n                    'g1 well differentiated/low grade',\n                    'g2 moderately differentiated/intermediated grade',\n                    'g3 poorly differentiated/high grade',\n                    'g4 undifferentiated/high grade'\n                ];\n                break;\n            case 'gleason':\n                codeList = [\n                    'gleason x: gleason score cannot be determined',\n                    'gleason 2–6: the tumor tissue is well differentiated',\n                    'gleason 7: the tumor tissue is moderately differentiated',\n                    'gleason 8–10: the tumor tissue is poorly differentiated or undifferentiated'\n                ];\n                break;\n            case 'nottingham':\n                codeList = [\n                    'g1 (low grade or well differentiated)',\n                    'g2 (intermediate grade or moderately differentiated)',\n                    'g3 (high grade or poorly differentiated)'\n                ];\n                break;\n            case 'brain cancer':\n                codeList = [\n                    'grade i',\n                    'grade ii',\n                    'grade iii',\n                    'grade iv'\n                ];\n                break;\n            case 'isup for renal cell carcinoma':\n                codeList = [\n                    'grade 1: tumor cell nucleoli invisible or small and basophilic at 400 x magnification',\n                    'grade 2: tumor cell nucleoli conspicuous at 400 x magnification but inconspicuous at 100 x magnification',\n                    'grade 3: tumor cell nucleoli eosinophilic and clearly visible at 100 x magnification',\n                    'grade 4: tumors showing extreme nuclear pleomorphism and/or containing tumor giant cells and/or the presence of any proportion of tumor showing sarcomatoid and/or rhabdoid dedifferentiation'\n                ];\n                break;\n            case 'lymphoid neoplasms':\n                codeList = [\n                    'low grade or indolent nhl',\n                    'high grade or aggressive nhl'\n                ];\n                break;\n            default:\n                codelist = [];\n        }\n\n        if (!codeList.includes($field.trim().toLowerCase()) && codeList.length){\n            const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${$row.tumour_grading_system}', 'tumour_grade' must be one of the following: \\n${codeList.join(\"\\n\")}`;\n\n            result.valid = false;\n            result.message = msg;\n        }\n        return result;\n    })()"]},"required":{"right":true}}},"percent_tumour_cells":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{}},"percent_proliferating_cells":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{}},"percent_inflammatory_tissue":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{}},"percent_stromal_cells":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{}},"percent_necrosis":{"meta":{"notes":{"left":"This field is only required if the specimen is a tumour."}},"restrictions":{}}},"created":{},"deleted":{}},"primary_diagnosis":{"updated":{"cancer_type_code":{"meta":{},"restrictions":{"regex":{"left":"^C[0-9]{2}.[0-9]{0,3}[A-Z]{0,1}$","right":"[A-Z]{1}[0-9]{2}.[0-9]{0,3}[A-Z]{0,1}$"}}},"number_lymph_nodes_positive":{"description":{"left":"The number of regional lymph nodes reported as being positive for tumour metastases. (Reference: NCI CDE ID: 6113694)","right":"The number of regional lymph nodes reported as being positive for tumour metastases."}},"number_lymph_nodes_examined":{"description":{"left":"The total number of lymph nodes tested for the presence of cancer. (Reference: NCI CDE ID: 3)","right":"The total number of lymph nodes tested for the presence of cancer."}},"performance_status":{"description":{"left":"Indicate the donor's performance status grade at the time of primary diagnosis. (Reference source: ECOG performance score grades from https://ecog-acrin.org/resources/ecog-performance-status).","right":"Indicate the donor's performance status grade at the time of primary diagnosis (ECOG performance score grades: https://ecog-acrin.org/resources/ecog-performance-status)."}}},"created":{},"deleted":{}},"treatment":{"updated":{"response_to_therapy":{"description":{"left":"The donors's response to the applied treatment regimen. (Source: RECIST)","right":"The donors's response to the applied treatment regimen."}}},"created":{},"deleted":{}},"chemotherapy":{"updated":{"chemotherapy_dosage_units":{"restrictions":{"codeList":{"left":["mg/m²","IU/m²","µg/m²","g/m²","mg/kg"],"right":["mg/m²","IU/m²","µg/m²","g/m²","kg"],"data":{"added":["kg"],"deleted":["mg/kg"]}}}}},"created":{},"deleted":{}},"hormone_therapy":{"updated":{"hormone_drug_dosage_units":{"restrictions":{"codeList":{"left":["mg/m²","IU/m²","µg/m²","g/m²","mg/kg"],"right":["mg/m²","IU/m²","µg/m²","g/m²","kg "],"data":{"added":["kg "],"deleted":["mg/kg"]}}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"method_of_progression_status":{"description":{"left":"Indicate the method(s) used to confirm the donor's progression disease status. (Codelist reference: NCI CDE ID: 6161031)","right":"Indicate the method(s) used to confirm the donor's progression disease status."}},"anatomic_site_progression_or_recurrences":{"description":{"left":"Indicate the anatomic site where disease progression or recurrence occurred. (Codelist reference: NCI CDE ID: 4742851)","right":"Indicate the anatomic site where disease progression or recurrence occurred."}},"posttherapy_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate() {\n\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* This is not a required field, so first ensure that it exists */\n        if ($field){\n            /* Contingent on the naming system for tumour staging systems to remain consistent */\n            const stagingName = $name.trim().toLowerCase().split('_tumour_staging_system')[0];\n            /* Perform validation only if an AJCC value was selected */\n            if (/^(AJCC)\\b/i.test($field)){\n                const requiredFields = [\n                    `${stagingName}_m_category`,\n                    `${stagingName}_n_category`,\n                    `${stagingName}_t_category`\n                ];\n                const convertedRow = Object.fromEntries(Object.entries($row).map(([fieldName,fieldVal]) => [fieldName.toLowerCase(), fieldVal]));\n                /* Check for contigous spaces wrapped with quotes (empty strings) */\n                const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n                /* search for fields with falsy values, given the field exists */\n                const emptyFields = requiredFields.filter(field => Object.keys(convertedRow).includes(field) && (!convertedRow[field] || checkforEmpty(convertedRow[field])))\n                if (emptyFields.length){\n                    result = {valid: false, \"message\": `The following fields are required when ${$name} is set to an AJCC option: ${emptyFields}`};\n                }\n            }\n        }\n        return result;\n    })()"],"right":["(function validate() {\n\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* This is not a required field, so first ensure that it exists */\n        if ($field){\n            /* Contingent on the naming system for tumour staging systems to remain consistent */\n            const stagingName = $name.trim().toLowerCase().split('_tumour_staging_system')[0];\n            /* Perform validation only if an AJCC value was selected */\n            if (/^(AJCC)\\b/i.test($field)){\n                const requiredFields = [\n                    `${stagingName}_m_category`,\n                    `${stagingName}_n_category`,\n                    `${stagingName}_t_category`\n                ];\n                const convertedRow = Object.fromEntries(Object.entries($row).map(([fieldName,fieldVal]) => [fieldName.toLowerCase(), fieldVal]));\n                /* Check for contigous spaces wrapped with quotes (empty strings) */\n                const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n                /* search for fields with falsy values, given the field exists */\n                const emptyFields = requiredFields.filter(field => Object.keys(convertedRow).includes(field) && (!convertedRow[field] || checkforEmpty(convertedRow[field])))\n                if (emptyFields.length){\n                    result = {valid: false, \"message\": `The following fields are required when ${$name} is set to an AJCC option: ${emptyFields}`};\n                }\n            }\n        }\n        return result;\n    })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus.match(/(progression)$/);\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is of type 'progression'.` }\n        }\n\n        return result;\n    })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus === \"relapse\";\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' set to 'relapse'.` }\n        }\n\n        return result;\n    })()"]}}}},"created":{},"deleted":{}}},"counts":{"updated":22,"deleted":0,"created":0}}
