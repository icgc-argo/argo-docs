{
  "schemas": {
    "sample_registration": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "specimen_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "right": [
                "Cell line - derived from metastatic tumour",
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Tumour - unknown if derived from primary or metastatic",
                "Xenograft - derived from metastatic tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "data": {
                "added": [
                  "Cell line - derived from metastatic tumour",
                  "Tumour - unknown if derived from primary or metastatic",
                  "Xenograft - derived from metastatic tumour"
                ],
                "deleted": []
              }
            }
          }
        },
        "submitter_sample_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "donor": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "primary_site": {
          "restrictions": {
            "codeList": {
              "left": [
                "Accessory sinuses",
                "Adrenal gland",
                "Anus and anal canal",
                "Base of tongue",
                "Bladder",
                "Bones, joints and articular cartilage of limbs",
                "Bones, joints and articular cartilage of other and unspecified sites",
                "Brain",
                "Breast",
                "Bronchus and lung",
                "Cervix uteri",
                "Colon",
                "Connective, subcutaneous and other soft tissues",
                "Corpus uteri",
                "Esophagus",
                "Eye and adnexa",
                "Floor of mouth",
                "Gallbladder",
                "Gum",
                "Heart, mediastinum, and pleura",
                "Hematopoietic and reticuloendothelial systems",
                "Hypopharynx",
                "Kidney",
                "Larynx",
                "Lip",
                "Liver and intrahepatic bile ducts",
                "Lymph nodes",
                "Meninges",
                "Nasal cavity and middle ear",
                "Nasopharynx",
                "Oropharynx",
                "Other and ill-defined digestive organs",
                "Other and ill-defined sites",
                "Other and ill-defined sites in lip, oral cavity and pharynx",
                "Other and ill-defined sites within respiratory system and intrathoracic organs",
                "Other and unspecified female genital organs",
                "Other and unspecified major salivary glands",
                "Other and unspecified male genital organs",
                "Other and unspecified parts of biliary tract",
                "Other and unspecified parts of mouth",
                "Other and unspecified parts of tongue",
                "Other and unspecified urinary organs",
                "Other endocrine glands and related structures",
                "Ovary",
                "Palate",
                "Pancreas",
                "Parotid gland",
                "Penis",
                "Peripheral nerves and autonomic nervous system",
                "Placenta",
                "Prostate gland",
                "Pyriform sinus",
                "Rectosigmoid junction",
                "Rectum",
                "Renal pelvis",
                "Retroperitoneum and peritoneum",
                "Skin",
                "Small intestine",
                "Spinal cord, cranial nerves, and other parts of central nervous system",
                "Stomach",
                "Testis",
                "Thymus",
                "Thyroid gland",
                "Tonsil",
                "Trachea",
                "Ureter",
                "Uterus, NOS",
                "Vagina",
                "Vulva"
              ],
              "right": [
                "Accessory sinuses",
                "Adrenal gland",
                "Anus and anal canal",
                "Base of tongue",
                "Bladder",
                "Bones, joints and articular cartilage of limbs",
                "Bones, joints and articular cartilage of other and unspecified sites",
                "Brain",
                "Breast",
                "Bronchus and lung",
                "Cervix uteri",
                "Colon",
                "Connective, subcutaneous and other soft tissues",
                "Corpus uteri",
                "Esophagus",
                "Eye and adnexa",
                "Floor of mouth",
                "Gallbladder",
                "Gum",
                "Heart, mediastinum, and pleura",
                "Hematopoietic and reticuloendothelial systems",
                "Hypopharynx",
                "Kidney",
                "Larynx",
                "Lip",
                "Liver and intrahepatic bile ducts",
                "Lymph nodes",
                "Meninges",
                "Nasal cavity and middle ear",
                "Nasopharynx",
                "Oropharynx",
                "Other and ill-defined digestive organs",
                "Other and ill-defined sites",
                "Other and ill-defined sites in lip, oral cavity and pharynx",
                "Other and ill-defined sites within respiratory system and intrathoracic organs",
                "Other and unspecified female genital organs",
                "Other and unspecified major salivary glands",
                "Other and unspecified male genital organs",
                "Other and unspecified parts of biliary tract",
                "Other and unspecified parts of mouth",
                "Other and unspecified parts of tongue",
                "Other and unspecified urinary organs",
                "Other endocrine glands and related structures",
                "Ovary",
                "Palate",
                "Pancreas",
                "Parotid gland",
                "Penis",
                "Peripheral nerves and autonomic nervous system",
                "Placenta",
                "Prostate gland",
                "Pyriform sinus",
                "Rectosigmoid junction",
                "Rectum",
                "Renal pelvis",
                "Retroperitoneum and peritoneum",
                "Skin",
                "Small intestine",
                "Spinal cord, cranial nerves, and other parts of central nervous system",
                "Stomach",
                "Testis",
                "Thymus",
                "Thyroid gland",
                "Tonsil",
                "Trachea",
                "Unknown primary site",
                "Ureter",
                "Uterus, NOS",
                "Vagina",
                "Vulva"
              ],
              "data": { "added": ["Unknown primary site"], "deleted": [] }
            }
          }
        },
        "genetic_disorders": {
          "description": {
            "left": "Indicate presence of any hereditary genetic disorders. (Reference: Genetic disorder names were standardized using Orphanet (https://www.orpha.net/) and NCI Thesaurus)",
            "right": "Indicate presence of any hereditary genetic disorders. Genetic diseases are diseases in which inherited genes predispose to increased risk. The genetic disorders associated with cancer often result from an alteration or mutation in a single gene. The diseases range from rare dominant cancer family syndrome to familial tendencies in which low-penetrance genes may interact with other genes or environmental factors to induce cancer. (References: NCIt C3101. Genetic disorder names were standardized using Orphanet (https://www.orpha.net/) and NCI Thesaurus)"
          },
          "restrictions": {
            "codeList": {
              "left": [
                "Alpha-1-antitrypsin Deficiency",
                "Ataxia Telangiectasia Syndrome",
                "BAP1-related Tumor Predisposition Syndrome",
                "Beckwith-Wiedemann Syndrome",
                "Birt-Hogg-Dub Syndrome",
                "Bloom Syndrome",
                "Carney Complex",
                "Cowden Syndrome",
                "Familial Adenomatous Polyposis Syndrome (FAP)",
                "Familial Atypical Multiple Mole Melanoma Syndrome (FAMMM)",
                "Familial Gastrointestinal Stromal Tumor",
                "Fanconi Anemia",
                "Gardner Syndrome",
                "Glycogen Storage Disease",
                "Gorlin Syndrome",
                "Hereditary Breast and Ovarian Cancer Syndrome (HBOC)",
                "Hereditary Diffuse Gastric Cancer",
                "Hereditary Leiomyomatosis and Renal Cell Cancer (HLRCC)",
                "Hereditary Pancreatitis",
                "Hereditary Papillary Renal Cell Carcinoma",
                "Hereditary Retinoblastoma",
                "Juvenile Polyposis Syndrome",
                "Li-Fraumeni Syndrome",
                "Lynch Syndrome",
                "Serrated Polyposis Syndrome",
                "Muir-Torre Syndrome",
                "Multiple Endocrine Neoplasia Type 1 (MEN1)",
                "Multiple Endocrine Neoplasia type 2 (MEN2)",
                "MUTYH Polyposis Syndrome",
                "Neurofibromatosis Type 1",
                "Neurofibromatosis Type 2",
                "Peutz-Jeghers Syndrome",
                "PTEN hamartoma Tumor Syndrome",
                "Rubinstein-Taybi Syndrome",
                "Sjogren Syndrome",
                "Tuberous Sclerosis Complex",
                "Turcot Syndrome",
                "Tyrosinemia Type 1",
                "von Hippel-Lindau Syndrome",
                "Werner Syndrome",
                "Wiskott-Aldrich Syndrome",
                "Xeroderma Pigmentosum"
              ],
              "right": [
                "Alpha-1-antitrypsin Deficiency",
                "Ataxia Telangiectasia Syndrome",
                "BAP1-related Tumor Predisposition Syndrome",
                "Beckwith-Wiedemann Syndrome",
                "Birt-Hogg-Dub Syndrome",
                "Bloom Syndrome",
                "Carney Complex",
                "Cowden Syndrome",
                "Familial Adenomatous Polyposis Syndrome (FAP)",
                "Familial Atypical Multiple Mole Melanoma Syndrome (FAMMM)",
                "Familial Gastrointestinal Stromal Tumor",
                "Fanconi Anemia",
                "Gardner Syndrome",
                "Glycogen Storage Disease",
                "Gorlin Syndrome",
                "Hereditary Breast and Ovarian Cancer Syndrome (HBOC)",
                "Hereditary Diffuse Gastric Cancer",
                "Hereditary Leiomyomatosis and Renal Cell Cancer (HLRCC)",
                "Hereditary Pancreatitis",
                "Hereditary Papillary Renal Cell Carcinoma",
                "Hereditary Retinoblastoma",
                "Juvenile Polyposis Syndrome",
                "Li-Fraumeni Syndrome",
                "Lynch Syndrome",
                "Muir-Torre Syndrome",
                "Multiple Endocrine Neoplasia Type 1 (MEN1)",
                "Multiple Endocrine Neoplasia type 2 (MEN2)",
                "MUTYH Polyposis Syndrome",
                "Neurofibromatosis Type 1",
                "Neurofibromatosis Type 2",
                "None",
                "Not applicable",
                "Peutz-Jeghers Syndrome",
                "PTEN hamartoma Tumor Syndrome",
                "Rubinstein-Taybi Syndrome",
                "Serrated Polyposis Syndrome",
                "Sjogren Syndrome",
                "Tuberous Sclerosis Complex",
                "Turcot Syndrome",
                "Tyrosinemia Type 1",
                "Unknown",
                "von Hippel-Lindau Syndrome",
                "Werner Syndrome",
                "Wiskott-Aldrich Syndrome",
                "Xeroderma Pigmentosum"
              ],
              "data": { "added": ["None", "Not applicable", "Unknown"], "deleted": [] }
            }
          }
        },
        "hrt_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Combination HRT",
                "Estrogen-only HRT",
                "Injectable",
                "Never taken HRT",
                "Other",
                "Patch",
                "Pill",
                "Unknown"
              ],
              "right": [
                "Combination HRT",
                "Estrogen-only HRT",
                "Injectable",
                "Never taken HRT",
                "Not applicable",
                "Other",
                "Patch",
                "Pill",
                "Unknown"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "hrt_duration": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\" || $row[hormoneType].toLowerCase() === 'not applicable' || $row[hormoneType].toLowerCase() === 'unknown') {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If the '${$name}' field is submitted, then the '${hormoneType}' field cannot be '${submittedValue}'.`};\n        }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "contraception_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Combination pill",
                "Contraceptive implant",
                "Contraceptive patch",
                "Injectable",
                "Intrauterine device",
                "Never used hormonal contraception",
                "Other",
                "Progestin-only pill",
                "Unknown",
                "Vaginal ring"
              ],
              "right": [
                "Combination pill",
                "Contraceptive implant",
                "Contraceptive patch",
                "Injectable",
                "Intrauterine device",
                "Never used hormonal contraception",
                "Not applicable",
                "Oral contraceptive pill",
                "Other",
                "Progestin-only pill",
                "Unknown",
                "Vaginal ring"
              ],
              "data": { "added": ["Not applicable", "Oral contraceptive pill"], "deleted": [] }
            }
          }
        },
        "contraception_duration": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\" || $row[hormoneType].toLowerCase() === 'not applicable' || $row[hormoneType].toLowerCase() === 'unknown') {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If the '${$name}' field is submitted, then the '${hormoneType}' field cannot be '${submittedValue}'.`};\n        }\n      }\n      return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {
        "lost_to_followup_after_clinical_event_id": {
          "changeType": "created",
          "description": "If the donor became lost to follow up, indicate the identifier of the clinical event (eg. submitter_primary_diagnosis_id, submitter_treatment_id or submitter_follow_up_id) after which the donor became lost to follow up.",
          "name": "lost_to_followup_after_clinical_event_id",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      \n        /* checks for a string just consisting of whitespace */\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n        \n        if (currField != null && !(checkforEmpty(currField))) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} cannot be submitted if the donor's vital_status is deceased.`}\n           }\n        }\n        return result;\n    })"
            ]
          },
          "meta": {
            "displayName": "Lost To Follow Up After Clinical Event",
            "foreignKey": "primary_diagnosis.submitter_primary_diagnosis_id",
            "validationDependency": true
          }
        }
      },
      "deleted": {}
    },
    "specimen": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": {
              "left": null,
              "right": "primary_diagnosis.submitter_primary_diagnosis_id"
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "pathological_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (R-ISS)"],
                "deleted": ["Revised International staging system (RISS)"]
              }
            }
          }
        },
        "pathological_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "specimen_laterality": {
          "description": {
            "left": "For cancer in a paired organ, indicate the side on which the specimen was obtained. (Reference caDSR 2007875)",
            "right": "For cancer in a paired organ, indicate the side on which the specimen was obtained. (Reference caDSR CDE ID 2007875)"
          },
          "restrictions": {
            "codeList": {
              "left": ["Left", "Right", "Unknown"],
              "right": ["Left", "Not applicable", "Right", "Unknown"],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "specimen_processing": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cryopreservation in liquid nitrogen (dead tissue)",
                "Cryopreservation in dry ice (dead tissue)",
                "Cryopreservation of live cells in liquid nitrogen",
                "Cryopreservation - other",
                "Formalin fixed & paraffin embedded",
                "Formalin fixed - buffered",
                "Formalin fixed - unbuffered",
                "Fresh",
                "Other"
              ],
              "right": [
                "Cryopreservation in liquid nitrogen (dead tissue)",
                "Cryopreservation in dry ice (dead tissue)",
                "Cryopreservation of live cells in liquid nitrogen",
                "Cryopreservation - other",
                "Formalin fixed & paraffin embedded",
                "Formalin fixed - buffered",
                "Formalin fixed - unbuffered",
                "Fresh",
                "Other",
                "Unknown"
              ],
              "data": { "added": ["Unknown"], "deleted": [] }
            }
          }
        },
        "specimen_storage": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cut slide",
                "Frozen in -70 freezer",
                "Frozen in liquid nitrogen",
                "Frozen in vapour phase",
                "Not Applicable",
                "Other",
                "Paraffin block",
                "RNA later frozen"
              ],
              "right": [
                "Cut slide",
                "Frozen in -70 freezer",
                "Frozen in liquid nitrogen",
                "Frozen in vapour phase",
                "Not Applicable",
                "Other",
                "Paraffin block",
                "RNA later frozen",
                "Unknown"
              ],
              "data": { "added": ["Unknown"], "deleted": [] }
            }
          }
        },
        "reference_pathology_confirmed": {
          "description": {
            "left": "Indicate whether the pathological diagnosis was confirmed by a (central) reference pathologist.",
            "right": "Indicate whether the pathological diagnosis was confirmed by a (central) reference pathologist. (Reference caDSR CDE ID 2007007)"
          }
        },
        "tumour_grade": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        case 'unknown':\n          codeList = ['unknown'];\n          break;\n        case 'not applicable':\n          codeList = ['not applicable'];\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        },
        "percent_tumour_cells": {
          "restrictions": {
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    // When $name is percent_tumour_cells, and $field is a number between 0 and 1\n    const {$row, $name, $field} = inputs;\n\n    const result = { valid: true, message: 'Ok' };\n    const measurementMethodExceptionTypes = ['not applicable'];\n\n    // checks for a string just consisting of whitespace\n    const checkforEmpty = (entry) => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    const fieldHasValue = $field && $field != null && !(checkforEmpty($field));\n    const measurementMethod = $row?.percent_tumour_cells_measurement_method?.trim?.().toLowerCase();\n\n    if (fieldHasValue) {\n      if (measurementMethodExceptionTypes.includes(measurementMethod)) {\n        return {\n          valid: false,\n          message: `The '${$name}' field cannot be submitted when 'percent_tumour_cells_measurement_method' = 'Not applicable'`\n        };\n      }\n    }\n\n    return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {
        "percent_tumour_cells_measurement_method": {
          "changeType": "created",
          "name": "percent_tumour_cells_measurement_method",
          "description": "Indicate method used to measure percent_tumour_cells.",
          "valueType": "string",
          "meta": {
            "core": true,
            "dependsOn": "sample_registration.tumour_normal_designation",
            "notes": "This field is only required if the specimen is a tumour.",
            "displayName": "Percent Tumour Cells Measurement Method"
          },
          "restrictions": {
            "codeList": ["Genomics", "Image analysis", "Pathology estimate by percent nuclei"]
          }
        }
      },
      "deleted": {}
    },
    "primary_diagnosis": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "laterality": {
          "description": {
            "left": "For cancer in a paired organ, indicate the side of the body on which the primary tumour or cancer first developed at the time of primary diagnosis. (Reference caDSR 827)",
            "right": "For cancer in a paired organ, indicate the side of the body on which the primary tumour or cancer first developed at the time of primary diagnosis. (Reference caDSR CDE ID 827)"
          }
        },
        "clinical_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (R-ISS)"],
                "deleted": ["Revised International staging system (RISS)"]
              }
            }
          }
        },
        "clinical_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "performance_status": {
          "restrictions": {
            "codeList": {
              "left": ["Grade 0", "Grade 1", "Grade 2", "Grade 3", "Grade 4"],
              "right": ["Grade 0", "Grade 1", "Grade 2", "Grade 3", "Grade 4", "Unknown"],
              "data": { "added": ["Unknown"], "deleted": [] }
            }
          }
        }
      },
      "created": {
        "lymph_nodes_examined_method": {
          "changeType": "created",
          "name": "lymph_nodes_examined_method",
          "description": "Indicate the method used to examine lymph nodes.",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const notExamined = ['cannot be determined', 'no', 'no lymph nodes found in resected specimen', 'not applicable', 'unknown'];\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if (!$row.lymph_nodes_examined_status || $row.lymph_nodes_examined_status === null || checkforEmpty($row.lymph_nodes_examined_status)) {\n        result = {valid: false, message: `The 'lymph_nodes_examined_status' field must be submitted.`};\n      }\n      else {\n        const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n      \n        if (!$field || $field === null || checkforEmpty($field)) {\n          if (lymphNodesExaminedStatus === 'yes') {\n            result = { valid: false, message: `The '${$name}' field must be submitted if the 'lymph_nodes_examined_status' field is 'Yes'`};\n          }\n        }\n        else {\n          if (notExamined.includes(lymphNodesExaminedStatus)) {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if the 'lymph_nodes_examined_status' field is '${lymphNodesExaminedStatus}'`};\n          }\n        }\n      }\n    return result;\n})"
            ],
            "codeList": [
              "Imaging",
              "Lymph node dissection/pathological exam",
              "Physical palpation of patient"
            ]
          },
          "meta": {
            "core": true,
            "dependsOn": "primary_diagnosis.lymph_nodes_examined_status",
            "displayName": "Method Used to Examine Lymph Nodes"
          }
        }
      },
      "deleted": {}
    },
    "treatment": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": {
              "left": null,
              "right": "primary_diagnosis.submitter_primary_diagnosis_id"
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "treatment_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "right": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "End of life care",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "data": { "added": ["End of life care"], "deleted": [] }
            }
          }
        },
        "is_primary_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            },
            "codeList": {
              "left": ["Yes", "No", "Unknown"],
              "right": ["Yes", "No"],
              "data": { "added": [], "deleted": ["Unknown"] }
            }
          }
        },
        "line_of_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'unknown') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'not applicable') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'Not applicable'.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "treatment_start_interval": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "treatment_duration": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "days_per_cycle": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "number_of_cycles": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "treatment_intent": {
          "description": {
            "left": "Indicate the intended disease outcome for which the treatment is given. (Reference: NCIt C124307)",
            "right": "Indicate the purpose of the treatment, or the desired effect or outcome resulting from the treatment. (Reference: mCODE/FHIR)"
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            },
            "codeList": {
              "left": ["Curative", "Palliative", "Unknown"],
              "right": [
                "Curative",
                "Diagnostic",
                "Forensic",
                "Guidance",
                "Palliative",
                "Preventative",
                "Screening",
                "Supportive"
              ],
              "data": {
                "added": [
                  "Diagnostic",
                  "Forensic",
                  "Guidance",
                  "Preventative",
                  "Screening",
                  "Supportive"
                ],
                "deleted": ["Unknown"]
              }
            }
          }
        },
        "treatment_setting": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            },
            "codeList": {
              "left": ["Adjuvant", "Advanced/Metastatic", "Neoadjuvant", "Not applicable"],
              "right": [
                "Adjuvant",
                "Advanced/Metastatic",
                "Conditioning",
                "Induction",
                "Maintenance",
                "Mobilization",
                "Neoadjuvant",
                "Preventative",
                "Radiosensitization",
                "Salvage"
              ],
              "data": {
                "added": [
                  "Conditioning",
                  "Induction",
                  "Maintenance",
                  "Mobilization",
                  "Preventative",
                  "Radiosensitization",
                  "Salvage"
                ],
                "deleted": ["Not applicable"]
              }
            }
          }
        },
        "response_to_treatment": {
          "description": {
            "left": "The donor's response to the applied treatment regimen. (Source: RECIST)",
            "right": "The donor's response to the applied treatment regimen."
          },
          "meta": {
            "dependsOn": {
              "left": "treatment.treatment_type",
              "right": "treatment.response_to_treatment_criteria_method"
            },
            "notes": {
              "left": null,
              "right": "This field depends on the selected response_to_treatment_criteria_method. Please refer to the documentation for Response to Treatment Criteria: http://docs.icgc-argo.org/docs/submission/dictionary-overview#response-to-treatment-criteria"
            }
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })",
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n\n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n    let codeList = [];\n    \n      switch ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method.trim().toLowerCase()) {\n        case 'eln dohner aml 2017 oncology response criteria':\n          codeList = [\n            'complete remission',\n            'complete remission with incomplete hematologic recovery (cri)',\n            'complete remission without minimal residual disease (crmrd-)',\n            'hematologic relapse (after crmrd-, cr, cri)',\n            'molecular relapse (after crmrd-)',\n            'partial remission',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'iwg cheson aml 2003 oncology response criteria':\n          codeList = [\n            'cytogenetic complete remission (crc)',\n            'molecular complete remission (crm)',\n            'morphologic complete remission',\n            'morphologic complete remission with incomplete blood count recovery (cri)',\n            'morphologic leukemia-free state',\n            'partial remission'\n          ];\n          break;\n        case 'irecist':\n          codeList = [\n            'immune complete response (icr)',\n            'immune confirmed progressive disease (icpd)',\n            'immune partial response (ipr)',\n            'immune stable disease (isd)',\n            'immune unconfirmed progressive disease (iupd)'\n          ];\n          break;\n        case 'recist':\n          codeList = [\n            'complete response',\n            'no evidence of disease (ned)',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'response assessment in neuro-oncology (rano)':\n          codeList = [\n            'complete response',\n            'minor response',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'physician assessed response criteria':\n          codeList = [\n            'physician assessed complete response',\n            'physician assessed partial response',\n            'physician assessed progressive disease',\n            'physician assessed stable disease'\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n    if ($field && $field != null && !(checkforEmpty($field))) {\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'response_to_treatment_criteria_method' is set to '${\n          $row.response_to_treatment_criteria_method}', the '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    else {\n       if ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method != null && !(checkforEmpty($row.response_to_treatment_criteria_method))) {\n         result = { valid: false, message: `The '${$name}' field must be submitted when 'response_to_treatment_criteria_method' is set to '${$row.response_to_treatment_criteria_method}'. The '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`};\n       }\n    }\n    return result;\n  })"
              ]
            },
            "codeList": {
              "left": [
                "Complete response",
                "Disease progression",
                "NED",
                "Partial response",
                "Stable disease"
              ],
              "right": [
                "Complete remission",
                "Complete remission with incomplete hematologic recovery (CRi)",
                "Complete remission without minimal residual disease (CRMRD-)",
                "Complete response",
                "Cytogenetic complete remission (CRc)",
                "Hematologic relapse (after CRMRD-, CR, CRi)",
                "Immune complete response (iCR)",
                "Immune confirmed progressive disease (iCPD)",
                "Immune partial response (iPR)",
                "Immune stable disease (iSD)",
                "Immune unconfirmed progressive disease (iUPD)",
                "Minor response",
                "Molecular complete remission (CRm)",
                "Molecular relapse (after CRMRD-)",
                "Morphologic complete remission",
                "Morphologic complete remission with incomplete blood count recovery (CRi)",
                "Morphologic leukemia-free state",
                "No evidence of disease (NED)",
                "Partial remission",
                "Partial response",
                "Physician assessed complete response",
                "Physician assessed partial response",
                "Physician assessed progressive disease",
                "Physician assessed stable disease",
                "Progressive disease",
                "Stable disease"
              ],
              "data": {
                "added": [
                  "Complete remission",
                  "Complete remission with incomplete hematologic recovery (CRi)",
                  "Complete remission without minimal residual disease (CRMRD-)",
                  "Cytogenetic complete remission (CRc)",
                  "Hematologic relapse (after CRMRD-, CR, CRi)",
                  "Immune complete response (iCR)",
                  "Immune confirmed progressive disease (iCPD)",
                  "Immune partial response (iPR)",
                  "Immune stable disease (iSD)",
                  "Immune unconfirmed progressive disease (iUPD)",
                  "Minor response",
                  "Molecular complete remission (CRm)",
                  "Molecular relapse (after CRMRD-)",
                  "Morphologic complete remission",
                  "Morphologic complete remission with incomplete blood count recovery (CRi)",
                  "Morphologic leukemia-free state",
                  "No evidence of disease (NED)",
                  "Partial remission",
                  "Physician assessed complete response",
                  "Physician assessed partial response",
                  "Physician assessed progressive disease",
                  "Physician assessed stable disease",
                  "Progressive disease"
                ],
                "deleted": ["Disease progression", "NED"]
              }
            }
          }
        },
        "outcome_of_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "toxicity_type": {
          "restrictions": {
            "codeList": {
              "left": ["Hematological", "Non-hematological"],
              "right": ["Hematological", "Non-hematological", "Not applicable", "Unknown"],
              "data": { "added": ["Not applicable", "Unknown"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\n     \n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const NAapplicable = ['treatment completed as prescribed', 'treatment incomplete due to technical or organizational problem', ' treatment incomplete because patient died', 'patient choice (stopped or interrupted treatment)', 'physician decision (stopped or interrupted treatment)', 'treatment stopped due to lack of efficacy (disease progression)', 'other', 'not applicable'];\n \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         const toxicityType = $field.trim().toLowerCase();\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\n            if (outcomeOfTreatment === 'not applicable' && toxicityType != 'not applicable') {\n               result = {valid: false, message: `The '${$name}' field can only be submitted as 'Not applicable' if the 'outcome_of_treatment' field is 'Not applicable', or if treatment was terminated for any other reason other than 'Treatment stopped due to acute toxicity'. Confirm and correct the 'outcome_of_treatment' and 'toxicity_type' fields.`};\n            }\n            else if (outcomeOfTreatment === 'unknown' && toxicityType != 'unknown') {\n               result = {valid: false, message: `The '${$name}' field can only be submitted as 'Unknown' if the 'outcome_of_treatment' field is 'Unknown'. Confirm and correct the 'outcome_of_treatment' and 'toxicity_type' fields.`};\n            }\n            else if (NAapplicable.includes(outcomeOfTreatment) && toxicityType != 'not applicable') {\n               result = {valid: false, message: `The '${$name}' field must be submitted as 'Not applicable' if treatment was terminated for any other reason other than 'Treatment stopped due to acute toxicity'. Confirm and correct the 'outcome_of_treatment' and 'toxicity_type' fields.`};\n            }\n            else if (outcomeOfTreatment === 'treatment stopped due to acute toxicity' && toxicityType === 'not applicable') {\n               result = {valid: false, message: `If the 'outcome_of_treatment' field is 'Treatment stopped due to acute toxicity', then the '${$name}' field cannot be 'Not applicable'. Indicate toxicity type(s) or if toxicity_type is not known, then submit 'Unknown'. Confirm and correct the 'outcome_of_treatment' and 'toxicity_type' fields.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "hematological_toxicity": {
          "restrictions": {
            "codeList": {
              "left": [
                "Anemia - Grade 3",
                "Anemia - Grade 4",
                "Anemia - Grade 5",
                "Neutropenia - Grade 3",
                "Neutropenia - Grade 4",
                "Neutropenia - Grade 5",
                "Thrombocytopenia - Grade 3",
                "Thrombocytopenia - Grade 4",
                "Thrombocytopenia - Grade 5"
              ],
              "right": [
                "Anemia - Grade 3",
                "Anemia - Grade 4",
                "Anemia - Grade 5",
                "Neutropenia - Grade 3",
                "Neutropenia - Grade 4",
                "Neutropenia - Grade 5",
                "Thrombocytopenia - Grade 3",
                "Thrombocytopenia - Grade 4",
                "Thrombocytopenia - Grade 5",
                "Unknown"
              ],
              "data": { "added": ["Unknown"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field && $field != null && !(checkforEmpty($field))) {\n         if ($row.toxicity_type && $row.toxicity_type != null && !(checkforEmpty($row.toxicity_type))) {\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'. Confirm and correct the 'toxicity_type' field and submit appropriate toxicity type(s).`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'. Confirm and correct the 'toxicity_type' field and submit appropriate toxicity type(s).`};\n            }\n            else if ((toxicityType === 'unknown' || toxicityType === 'not applicable') && (!$field || $field != 'unknown')) {\n               result = {valid: false, message: `If the 'toxicity_type' field is submitted as '${toxicityType}', then the '${$name}' field cannot be submitted as '${$field}'. Confirm and correct the 'toxicity_type' and '${$name}' fields.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "non-hematological_toxicity": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cardiac disorders - Grade 1",
                "Cardiac disorders - Grade 2",
                "Cardiac disorders - Grade 3",
                "Cardiac disorders - Grade 4",
                "Cardiac disorders - Grade 5",
                "Dehydration - Grade 1",
                "Dehydration - Grade 2",
                "Dehydration - Grade 3",
                "Dehydration - Grade 4",
                "Dehydration - Grade 5",
                "Diarrhea - Grade 1",
                "Diarrhea - Grade 2",
                "Diarrhea - Grade 3",
                "Diarrhea - Grade 4",
                "Diarrhea - Grade 5",
                "Fatigue - Grade 1",
                "Fatigue - Grade 2",
                "Fatigue - Grade 3",
                "Nausea - Grade 1",
                "Nausea - Grade 2",
                "Nausea - Grade 3",
                "Vomiting - Grade 1",
                "Vomiting - Grade 2",
                "Vomiting - Grade 3",
                "Vomiting - Grade 4",
                "Vomiting - Grade 5",
                "Weight loss - Grade 1",
                "Weight loss - Grade 2",
                "Weight loss - Grade 3"
              ],
              "right": [
                "Cardiac disorders - Grade 1",
                "Cardiac disorders - Grade 2",
                "Cardiac disorders - Grade 3",
                "Cardiac disorders - Grade 4",
                "Cardiac disorders - Grade 5",
                "Dehydration - Grade 1",
                "Dehydration - Grade 2",
                "Dehydration - Grade 3",
                "Dehydration - Grade 4",
                "Dehydration - Grade 5",
                "Diarrhea - Grade 1",
                "Diarrhea - Grade 2",
                "Diarrhea - Grade 3",
                "Diarrhea - Grade 4",
                "Diarrhea - Grade 5",
                "Fatigue - Grade 1",
                "Fatigue - Grade 2",
                "Fatigue - Grade 3",
                "Nausea - Grade 1",
                "Nausea - Grade 2",
                "Nausea - Grade 3",
                "Unknown",
                "Vomiting - Grade 1",
                "Vomiting - Grade 2",
                "Vomiting - Grade 3",
                "Vomiting - Grade 4",
                "Vomiting - Grade 5",
                "Weight loss - Grade 1",
                "Weight loss - Grade 2",
                "Weight loss - Grade 3"
              ],
              "data": { "added": ["Unknown"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field && $field != null && !(checkforEmpty($field))) {\n         if ($row.toxicity_type && $row.toxicity_type != null && !(checkforEmpty($row.toxicity_type))) {\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'. Confirm and correct the 'toxicity_type' field and submit appropriate toxicity type(s).`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'. Confirm and correct the 'toxicity_type' field and submit appropriate toxicity type(s).`};\n            }\n            else if ((toxicityType === 'unknown' || toxicityType === 'not applicable') && (!$field || $field != 'unknown')) {\n               result = {valid: false, message: `If the 'toxicity_type' field is submitted as '${toxicityType}', then the '${$name}' field cannot be submitted as '${$field}'. Confirm and correct the 'toxicity_type' and '${$name}' fields.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "adverse_events": {
          "restrictions": {
            "codeList": {
              "left": [
                "Abdominal distension",
                "Abdominal infection",
                "Abdominal pain",
                "Abdominal soft tissue necrosis",
                "Abducens nerve disorder",
                "Accessory nerve disorder",
                "Acidosis",
                "Acoustic nerve disorder NOS",
                "Activated partial thromboplastin time prolonged",
                "Acute kidney injury",
                "Adrenal insufficiency",
                "Adult respiratory distress syndrome",
                "Agitation",
                "Akathisia",
                "Alanine aminotransferase increased",
                "Alcohol intolerance",
                "Alkaline phosphatase increased",
                "Alkalosis",
                "Allergic reaction",
                "Allergic rhinitis",
                "Alopecia",
                "Amenorrhea",
                "Amnesia",
                "Anal fissure",
                "Anal fistula",
                "Anal hemorrhage",
                "Anal mucositis",
                "Anal necrosis",
                "Anal pain",
                "Anal stenosis",
                "Anal ulcer",
                "Anaphylaxis",
                "Anemia",
                "Ankle fracture",
                "Anorectal infection",
                "Anorexia",
                "Anorgasmia",
                "Anosmia",
                "Anxiety",
                "Aortic injury",
                "Aortic valve disease",
                "Aphonia",
                "Apnea",
                "Appendicitis",
                "Appendicitis perforated",
                "Arachnoiditis",
                "Arterial injury",
                "Arterial thromboembolism",
                "Arteritis infective",
                "Arthralgia",
                "Arthritis",
                "Ascites",
                "Aspartate aminotransferase increased",
                "Aspiration",
                "Asystole",
                "Ataxia",
                "Atelectasis",
                "Atrial fibrillation",
                "Atrial flutter",
                "Atrioventricular block complete",
                "Atrioventricular block first degree",
                "Autoimmune disorder",
                "Avascular necrosis",
                "Azoospermia",
                "Back pain",
                "Bacteremia",
                "Belching",
                "Bile duct stenosis",
                "Biliary anastomotic leak",
                "Biliary fistula",
                "Biliary tract infection",
                "Bladder anastomotic leak",
                "Bladder infection",
                "Bladder perforation",
                "Bladder spasm",
                "Bloating",
                "Blood and lymphatic system disorders - Other, specify",
                "Blood antidiuretic hormone abnormal",
                "Blood bicarbonate decreased",
                "Blood bilirubin increased",
                "Blood corticotrophin decreased",
                "Blood gonadotrophin abnormal",
                "Blood lactate dehydrogenase increased",
                "Blood prolactin abnormal",
                "Blurred vision",
                "Body odor",
                "Bone infection",
                "Bone marrow hypocellular",
                "Bone pain",
                "Brachial plexopathy",
                "Breast atrophy",
                "Breast infection",
                "Breast pain",
                "Bronchial fistula",
                "Bronchial infection",
                "Bronchial obstruction",
                "Bronchial stricture",
                "Bronchopleural fistula",
                "Bronchopulmonary hemorrhage",
                "Bronchospasm",
                "Bruising",
                "Budd-Chiari syndrome",
                "Bullous dermatitis",
                "Burn",
                "Buttock pain",
                "Capillary leak syndrome",
                "Carbon monoxide diffusing capacity decreased",
                "Cardiac arrest",
                "Cardiac disorders - Other, specify",
                "Cardiac troponin I increased",
                "Cardiac troponin T increased",
                "Cataract",
                "Catheter related infection",
                "CD4 lymphocytes decreased",
                "Cecal hemorrhage",
                "Cecal infection",
                "Central nervous system necrosis",
                "Cerebrospinal fluid leakage",
                "Cervicitis infection",
                "Cheilitis",
                "Chest pain - cardiac",
                "Chest wall necrosis",
                "Chest wall pain",
                "Chills",
                "Cholecystitis",
                "Cholesterol high",
                "Chronic kidney disease",
                "Chylothorax",
                "Chylous ascites",
                "Cognitive disturbance",
                "Colitis",
                "Colonic fistula",
                "Colonic hemorrhage",
                "Colonic obstruction",
                "Colonic perforation",
                "Colonic stenosis",
                "Colonic ulcer",
                "Concentration impairment",
                "Conduction disorder",
                "Confusion",
                "Congenital, familial and genetic disorders - Other, specify",
                "Conjunctivitis",
                "Conjunctivitis infective",
                "Constipation",
                "Corneal infection",
                "Corneal ulcer",
                "Cough",
                "CPK increased",
                "Cranial nerve infection",
                "Creatinine increased",
                "Cushingoid",
                "Cyanosis",
                "Cystitis noninfective",
                "Cytokine release syndrome",
                "Cytomegalovirus infection reactivation",
                "Death neonatal",
                "Death NOS",
                "Dehydration",
                "Delayed orgasm",
                "Delayed puberty",
                "Delirium",
                "Delusions",
                "Dental caries",
                "Depressed level of consciousness",
                "Depression",
                "Dermatitis radiation",
                "Device related infection",
                "Diarrhea",
                "Disease progression",
                "Disseminated intravascular coagulation",
                "Dizziness",
                "Dry eye",
                "Dry mouth",
                "Dry skin",
                "Duodenal fistula",
                "Duodenal hemorrhage",
                "Duodenal infection",
                "Duodenal obstruction",
                "Duodenal perforation",
                "Duodenal stenosis",
                "Duodenal ulcer",
                "Dysarthria",
                "Dysesthesia",
                "Dysgeusia",
                "Dysmenorrhea",
                "Dyspareunia",
                "Dyspepsia",
                "Dysphagia",
                "Dysphasia",
                "Dyspnea",
                "Dysuria",
                "Ear and labyrinth disorders - Other, specify",
                "Ear pain",
                "Eczema",
                "Edema cerebral",
                "Edema face",
                "Edema limbs",
                "Edema trunk",
                "Ejaculation disorder",
                "Ejection fraction decreased",
                "Electrocardiogram QT corrected interval prolonged",
                "Electrocardiogram T wave abnormal",
                "Encephalitis infection",
                "Encephalomyelitis infection",
                "Encephalopathy",
                "Endocarditis infective",
                "Endocrine disorders - Other, specify",
                "Endophthalmitis",
                "Enterocolitis",
                "Enterocolitis infectious",
                "Enterovesical fistula",
                "Eosinophilia",
                "Epistaxis",
                "Epstein-Barr virus infection reactivation",
                "Erectile dysfunction",
                "Erythema multiforme",
                "Erythroderma",
                "Esophageal anastomotic leak",
                "Esophageal fistula",
                "Esophageal hemorrhage",
                "Esophageal infection",
                "Esophageal necrosis",
                "Esophageal obstruction",
                "Esophageal pain",
                "Esophageal perforation",
                "Esophageal stenosis",
                "Esophageal ulcer",
                "Esophageal varices hemorrhage",
                "Esophagitis",
                "Euphoria",
                "Exostosis",
                "External ear pain",
                "Extraocular muscle paresis",
                "Extrapyramidal disorder",
                "Eye disorders - Other, specify",
                "Eye infection",
                "Eye pain",
                "Eyelid function disorder",
                "Facial muscle weakness",
                "Facial nerve disorder",
                "Facial pain",
                "Fall",
                "Fallopian tube anastomotic leak",
                "Fallopian tube obstruction",
                "Fallopian tube perforation",
                "Fat atrophy",
                "Fatigue",
                "Febrile neutropenia",
                "Fecal incontinence",
                "Feminization acquired",
                "Fetal growth retardation",
                "Fever",
                "Fibrinogen decreased",
                "Fibrosis deep connective tissue",
                "Flank pain",
                "Flashing lights",
                "Flatulence",
                "Floaters",
                "Flu like symptoms",
                "Flushing",
                "Folliculitis",
                "Forced expiratory volume decreased",
                "Fracture",
                "Fungemia",
                "Gait disturbance",
                "Gallbladder fistula",
                "Gallbladder infection",
                "Gallbladder necrosis",
                "Gallbladder obstruction",
                "Gallbladder pain",
                "Gallbladder perforation",
                "Gastric anastomotic leak",
                "Gastric fistula",
                "Gastric hemorrhage",
                "Gastric necrosis",
                "Gastric perforation",
                "Gastric stenosis",
                "Gastric ulcer",
                "Gastritis",
                "Gastroesophageal reflux disease",
                "Gastrointestinal anastomotic leak",
                "Gastrointestinal disorders - Other, specify",
                "Gastrointestinal fistula",
                "Gastrointestinal pain",
                "Gastrointestinal stoma necrosis",
                "Gastroparesis",
                "General disorders and administration site conditions - Other, specify",
                "Generalized edema",
                "Generalized muscle weakness",
                "Genital edema",
                "GGT increased",
                "Gingival pain",
                "Glaucoma",
                "Glossopharyngeal nerve disorder",
                "Glucose intolerance",
                "Glucosuria",
                "Growth accelerated",
                "Growth hormone abnormal",
                "Growth suppression",
                "Guillain-Barre syndrome",
                "Gum infection",
                "Gynecomastia",
                "Hair color changes",
                "Hair texture abnormal",
                "Hallucinations",
                "Haptoglobin decreased",
                "Head soft tissue necrosis",
                "Headache",
                "Hearing impaired",
                "Heart failure",
                "Hematoma",
                "Hematosalpinx",
                "Hematuria",
                "Hemoglobin increased",
                "Hemoglobinuria",
                "Hemolysis",
                "Hemolytic uremic syndrome",
                "Hemorrhoidal hemorrhage",
                "Hemorrhoids",
                "Hepatic failure",
                "Hepatic hemorrhage",
                "Hepatic infection",
                "Hepatic necrosis",
                "Hepatic pain",
                "Hepatitis B reactivation",
                "Hepatitis viral",
                "Hepatobiliary disorders - Other, specify",
                "Herpes simplex reactivation",
                "Hiccups",
                "Hip fracture",
                "Hirsutism",
                "Hoarseness",
                "Hot flashes",
                "Hydrocephalus",
                "Hypercalcemia",
                "Hyperglycemia",
                "Hyperhidrosis",
                "Hyperkalemia",
                "Hyperkeratosis",
                "Hyperlipidemia",
                "Hypermagnesemia",
                "Hypernatremia",
                "Hyperparathyroidism",
                "Hyperphosphatemia",
                "Hypersomnia",
                "Hypertension",
                "Hyperthyroidism",
                "Hypertrichosis",
                "Hypertriglyceridemia",
                "Hyperuricemia",
                "Hypoalbuminemia",
                "Hypocalcemia",
                "Hypoglossal nerve disorder",
                "Hypoglycemia",
                "Hypohidrosis",
                "Hypokalemia",
                "Hypomagnesemia",
                "Hyponatremia",
                "Hypoparathyroidism",
                "Hypophosphatemia",
                "Hypophysitis",
                "Hypopituitarism",
                "Hypotension",
                "Hypothermia",
                "Hypothyroidism",
                "Hypoxia",
                "Ileal fistula",
                "Ileal hemorrhage",
                "Ileal obstruction",
                "Ileal perforation",
                "Ileal stenosis",
                "Ileal ulcer",
                "Ileus",
                "Immune system disorders - Other, specify",
                "Infections and infestations - Other, specify",
                "Infective myositis",
                "Infusion related reaction",
                "Infusion site extravasation",
                "Injection site reaction",
                "Injury to carotid artery",
                "Injury to inferior vena cava",
                "Injury to jugular vein",
                "Injury to superior vena cava",
                "Injury, poisoning and procedural complications - Other, specify",
                "INR increased",
                "Insomnia",
                "Intestinal stoma leak",
                "Intestinal stoma obstruction",
                "Intestinal stoma site bleeding",
                "Intra-abdominal hemorrhage",
                "Intracranial hemorrhage",
                "Intraoperative arterial injury",
                "Intraoperative breast injury",
                "Intraoperative cardiac injury",
                "Intraoperative ear injury",
                "Intraoperative endocrine injury",
                "Intraoperative gastrointestinal injury",
                "Intraoperative head and neck injury",
                "Intraoperative hemorrhage",
                "Intraoperative hepatobiliary injury",
                "Intraoperative musculoskeletal injury",
                "Intraoperative neurological injury",
                "Intraoperative ocular injury",
                "Intraoperative renal injury",
                "Intraoperative reproductive tract injury",
                "Intraoperative respiratory injury",
                "Intraoperative splenic injury",
                "Intraoperative urinary injury",
                "Intraoperative venous injury",
                "Investigations - Other, specify",
                "Iron overload",
                "Irregular menstruation",
                "Irritability",
                "Ischemia cerebrovascular",
                "Jejunal fistula",
                "Jejunal hemorrhage",
                "Jejunal obstruction",
                "Jejunal perforation",
                "Jejunal stenosis",
                "Jejunal ulcer",
                "Joint effusion",
                "Joint infection",
                "Joint range of motion decreased",
                "Joint range of motion decreased cervical spine",
                "Joint range of motion decreased lumbar spine",
                "Keratitis",
                "Kidney anastomotic leak",
                "Kidney infection",
                "Kyphosis",
                "Lactation disorder",
                "Large intestinal anastomotic leak",
                "Laryngeal edema",
                "Laryngeal fistula",
                "Laryngeal hemorrhage",
                "Laryngeal inflammation",
                "Laryngeal mucositis",
                "Laryngeal obstruction",
                "Laryngeal stenosis",
                "Laryngitis",
                "Laryngopharyngeal dysesthesia",
                "Laryngospasm",
                "Left ventricular systolic dysfunction",
                "Lethargy",
                "Leukemia secondary to oncology chemotherapy",
                "Leukocytosis",
                "Leukoencephalopathy",
                "Libido decreased",
                "Libido increased",
                "Lip infection",
                "Lip pain",
                "Lipase increased",
                "Lipohypertrophy",
                "Localized edema",
                "Lordosis",
                "Lower gastrointestinal hemorrhage",
                "Lung infection",
                "Lymph gland infection",
                "Lymph leakage",
                "Lymph node pain",
                "Lymphedema",
                "Lymphocele",
                "Lymphocyte count decreased",
                "Lymphocyte count increased",
                "Malabsorption",
                "Malaise",
                "Mania",
                "Mediastinal hemorrhage",
                "Mediastinal infection",
                "Memory impairment",
                "Meningismus",
                "Meningitis",
                "Menorrhagia",
                "Metabolism and nutrition disorders - Other, specify",
                "Methemoglobinemia",
                "Middle ear inflammation",
                "Mitral valve disease",
                "Mobitz (type) II atrioventricular block",
                "Mobitz type I",
                "Movements involuntary",
                "Mucosal infection",
                "Mucositis oral",
                "Multi-organ failure",
                "Muscle cramp",
                "Muscle weakness left-sided",
                "Muscle weakness lower limb",
                "Muscle weakness right-sided",
                "Muscle weakness trunk",
                "Muscle weakness upper limb",
                "Musculoskeletal and connective tissue disorder - Other, specify",
                "Musculoskeletal deformity",
                "Myalgia",
                "Myasthenia gravis",
                "Myelitis",
                "Myelodysplastic syndrome",
                "Myocardial infarction",
                "Myocarditis",
                "Myositis",
                "Nail changes",
                "Nail discoloration",
                "Nail infection",
                "Nail loss",
                "Nail ridging",
                "Nasal congestion",
                "Nausea",
                "Neck edema",
                "Neck pain",
                "Neck soft tissue necrosis",
                "Neoplasms benign, malignant and unspecified (incl cysts and polyps) - Other, specify",
                "Nephrotic syndrome",
                "Nervous system disorders - Other, specify",
                "Neuralgia",
                "Neutrophil count decreased",
                "Night blindness",
                "Nipple deformity",
                "Non-cardiac chest pain",
                "Nystagmus",
                "Obesity",
                "Obstruction gastric",
                "Oculomotor nerve disorder",
                "Olfactory nerve disorder",
                "Oligospermia",
                "Optic nerve disorder",
                "Oral cavity fistula",
                "Oral dysesthesia",
                "Oral hemorrhage",
                "Oral pain",
                "Oropharyngeal pain",
                "Osteonecrosis",
                "Osteonecrosis of jaw",
                "Osteoporosis",
                "Otitis externa",
                "Otitis media",
                "Ovarian hemorrhage",
                "Ovarian infection",
                "Ovarian rupture",
                "Ovulation pain",
                "Pain",
                "Pain in extremity",
                "Pain of skin",
                "Palmar-plantar erythrodysesthesia syndrome",
                "Palpitations",
                "Pancreas infection",
                "Pancreatic anastomotic leak",
                "Pancreatic duct stenosis",
                "Pancreatic enzymes decreased",
                "Pancreatic fistula",
                "Pancreatic hemorrhage",
                "Pancreatic necrosis",
                "Pancreatitis",
                "Papilledema",
                "Papulopustular rash",
                "Paresthesia",
                "Paronychia",
                "Paroxysmal atrial tachycardia",
                "Pelvic floor muscle weakness",
                "Pelvic infection",
                "Pelvic pain",
                "Pelvic soft tissue necrosis",
                "Penile infection",
                "Penile pain",
                "Perforation bile duct",
                "Pericardial effusion",
                "Pericardial tamponade",
                "Pericarditis",
                "Perineal pain",
                "Periodontal disease",
                "Periorbital edema",
                "Periorbital infection",
                "Peripheral ischemia",
                "Peripheral motor neuropathy",
                "Peripheral nerve infection",
                "Peripheral sensory neuropathy",
                "Peritoneal infection",
                "Peritoneal necrosis",
                "Personality change",
                "Phantom pain",
                "Pharyngeal anastomotic leak",
                "Pharyngeal fistula",
                "Pharyngeal hemorrhage",
                "Pharyngeal mucositis",
                "Pharyngeal necrosis",
                "Pharyngeal stenosis",
                "Pharyngitis",
                "Pharyngolaryngeal pain",
                "Phlebitis",
                "Phlebitis infective",
                "Photophobia",
                "Photosensitivity",
                "Platelet count decreased",
                "Pleural effusion",
                "Pleural hemorrhage",
                "Pleural infection",
                "Pleuritic pain",
                "Pneumonitis",
                "Pneumothorax",
                "Portal hypertension",
                "Portal vein thrombosis",
                "Postnasal drip",
                "Postoperative hemorrhage",
                "Postoperative thoracic procedure complication",
                "Precocious puberty",
                "Pregnancy loss",
                "Pregnancy, puerperium and perinatal conditions - Other, specify",
                "Premature delivery",
                "Premature menopause",
                "Presyncope",
                "Proctitis",
                "Productive cough",
                "Prolapse of intestinal stoma",
                "Prolapse of urostomy",
                "Prostate infection",
                "Prostatic hemorrhage",
                "Prostatic obstruction",
                "Prostatic pain",
                "Proteinuria",
                "Pruritus",
                "Psychiatric disorders - Other, specify",
                "Psychosis",
                "Pulmonary edema",
                "Pulmonary fibrosis",
                "Pulmonary fistula",
                "Pulmonary hypertension",
                "Pulmonary valve disease",
                "Purpura",
                "Pyramidal tract syndrome",
                "Radiation recall reaction (dermatologic)",
                "Radiculitis",
                "Rash acneiform",
                "Rash maculo-papular",
                "Rash pustular",
                "Rectal anastomotic leak",
                "Rectal fissure",
                "Rectal fistula",
                "Rectal hemorrhage",
                "Rectal mucositis",
                "Rectal necrosis",
                "Rectal obstruction",
                "Rectal pain",
                "Rectal perforation",
                "Rectal stenosis",
                "Rectal ulcer",
                "Recurrent laryngeal nerve palsy",
                "Renal and urinary disorders - Other, specify",
                "Renal calculi",
                "Renal colic",
                "Renal hemorrhage",
                "Reproductive system and breast disorders - Other, specify",
                "Respiratory failure",
                "Respiratory, thoracic and mediastinal disorders - Other, specify",
                "Restlessness",
                "Restrictive cardiomyopathy",
                "Retinal detachment",
                "Retinal tear",
                "Retinal vascular disorder",
                "Retinoic acid syndrome",
                "Retinopathy",
                "Retroperitoneal hemorrhage",
                "Reversible posterior leukoencephalopathy syndrome",
                "Rhabdomyolysis",
                "Rhinitis infective",
                "Rhinorrhea",
                "Right ventricular dysfunction",
                "Rotator cuff injury",
                "Salivary duct inflammation",
                "Salivary gland fistula",
                "Salivary gland infection",
                "Scalp pain",
                "Scleral disorder",
                "Scoliosis",
                "Scrotal infection",
                "Scrotal pain",
                "Seizure",
                "Sepsis",
                "Seroma",
                "Serum amylase increased",
                "Serum sickness",
                "Shingles",
                "Sick sinus syndrome",
                "Sinus bradycardia",
                "Sinus disorder",
                "Sinus pain",
                "Sinus tachycardia",
                "Sinusitis",
                "Sinusoidal obstruction syndrome",
                "Skin and subcutaneous tissue disorders - Other, specify",
                "Skin atrophy",
                "Skin hyperpigmentation",
                "Skin hypopigmentation",
                "Skin induration",
                "Skin infection",
                "Skin papilloma",
                "Skin ulceration",
                "Sleep apnea",
                "Small intestinal anastomotic leak",
                "Small intestinal mucositis",
                "Small intestinal obstruction",
                "Small intestinal perforation",
                "Small intestinal stenosis",
                "Small intestine infection",
                "Small intestine ulcer",
                "Sneezing",
                "Social circumstances - Other, specify",
                "Soft tissue infection",
                "Soft tissue necrosis lower limb",
                "Soft tissue necrosis upper limb",
                "Somnolence",
                "Sore throat",
                "Spasticity",
                "Spermatic cord anastomotic leak",
                "Spermatic cord hemorrhage",
                "Spermatic cord obstruction",
                "Spinal cord compression",
                "Spinal fracture",
                "Splenic infection",
                "Stenosis of gastrointestinal stoma",
                "Stevens-Johnson syndrome",
                "Stoma site infection",
                "Stomach pain",
                "Stomal ulcer",
                "Stridor",
                "Stroke",
                "Subcutaneous emphysema",
                "Sudden death NOS",
                "Suicidal ideation",
                "Suicide attempt",
                "Superficial soft tissue fibrosis",
                "Superficial thrombophlebitis",
                "Superior vena cava syndrome",
                "Supraventricular tachycardia",
                "Surgical and medical procedures - Other, specify",
                "Syncope",
                "Telangiectasia",
                "Tendon reflex decreased",
                "Testicular disorder",
                "Testicular hemorrhage",
                "Testicular pain",
                "Testosterone deficiency",
                "Thromboembolic event",
                "Thrombotic thrombocytopenic purpura",
                "Thrush",
                "Thyroid stimulating hormone increased",
                "Tinnitus",
                "Tooth development disorder",
                "Tooth discoloration",
                "Tooth infection",
                "Toothache",
                "Toxic epidermal necrolysis",
                "Tracheal fistula",
                "Tracheal hemorrhage",
                "Tracheal mucositis",
                "Tracheal obstruction",
                "Tracheal stenosis",
                "Tracheitis",
                "Tracheostomy site bleeding",
                "Transient ischemic attacks",
                "Treatment related secondary malignancy",
                "Tremor",
                "Tricuspid valve disease",
                "Trigeminal nerve disorder",
                "Trismus",
                "Trochlear nerve disorder",
                "Tumor hemorrhage",
                "Tumor lysis syndrome",
                "Tumor pain",
                "Typhlitis",
                "Unequal limb length",
                "Upper gastrointestinal hemorrhage",
                "Upper respiratory infection",
                "Ureteric anastomotic leak",
                "Urethral anastomotic leak",
                "Urethral infection",
                "Urinary fistula",
                "Urinary frequency",
                "Urinary incontinence",
                "Urinary retention",
                "Urinary tract infection",
                "Urinary tract obstruction",
                "Urinary tract pain",
                "Urinary urgency",
                "Urine discoloration",
                "Urine output decreased",
                "Urostomy leak",
                "Urostomy obstruction",
                "Urostomy site bleeding",
                "Urostomy stenosis",
                "Urticaria",
                "Uterine anastomotic leak",
                "Uterine fistula",
                "Uterine hemorrhage",
                "Uterine infection",
                "Uterine obstruction",
                "Uterine pain",
                "Uterine perforation",
                "Uveitis",
                "Vaccination complication",
                "Vaccination site lymphadenopathy",
                "Vaginal anastomotic leak",
                "Vaginal discharge",
                "Vaginal dryness",
                "Vaginal fistula",
                "Vaginal hemorrhage",
                "Vaginal infection",
                "Vaginal inflammation",
                "Vaginal obstruction",
                "Vaginal pain",
                "Vaginal perforation",
                "Vaginal stricture",
                "Vagus nerve disorder",
                "Vas deferens anastomotic leak",
                "Vascular access complication",
                "Vascular disorders - Other, specify",
                "Vasculitis",
                "Vasovagal reaction",
                "Venous injury",
                "Ventricular arrhythmia",
                "Ventricular fibrillation",
                "Ventricular tachycardia",
                "Vertigo",
                "Vestibular disorder",
                "Viremia",
                "Virilization",
                "Visceral arterial ischemia",
                "Vision decreased",
                "Vital capacity abnormal",
                "Vitreous hemorrhage",
                "Voice alteration",
                "Vomiting",
                "Vulval infection",
                "Watering eyes",
                "Weight gain",
                "Weight loss",
                "Wheezing",
                "White blood cell decreased",
                "Wound complication",
                "Wound dehiscence",
                "Wound infection",
                "Wrist fracture"
              ],
              "right": [
                "Abdominal distension",
                "Abdominal infection",
                "Abdominal pain",
                "Abdominal soft tissue necrosis",
                "Abducens nerve disorder",
                "Accessory nerve disorder",
                "Acidosis",
                "Acoustic nerve disorder NOS",
                "Activated partial thromboplastin time prolonged",
                "Acute kidney injury",
                "Adrenal insufficiency",
                "Adult respiratory distress syndrome",
                "Agitation",
                "Akathisia",
                "Alanine aminotransferase increased",
                "Alcohol intolerance",
                "Alkaline phosphatase increased",
                "Alkalosis",
                "Allergic reaction",
                "Allergic rhinitis",
                "Alopecia",
                "Amenorrhea",
                "Amnesia",
                "Anal fissure",
                "Anal fistula",
                "Anal hemorrhage",
                "Anal mucositis",
                "Anal necrosis",
                "Anal pain",
                "Anal stenosis",
                "Anal ulcer",
                "Anaphylaxis",
                "Anemia",
                "Ankle fracture",
                "Anorectal infection",
                "Anorexia",
                "Anorgasmia",
                "Anosmia",
                "Anxiety",
                "Aortic injury",
                "Aortic valve disease",
                "Aphonia",
                "Apnea",
                "Appendicitis",
                "Appendicitis perforated",
                "Arachnoiditis",
                "Arterial injury",
                "Arterial thromboembolism",
                "Arteritis infective",
                "Arthralgia",
                "Arthritis",
                "Ascites",
                "Aspartate aminotransferase increased",
                "Aspiration",
                "Asystole",
                "Ataxia",
                "Atelectasis",
                "Atrial fibrillation",
                "Atrial flutter",
                "Atrioventricular block complete",
                "Atrioventricular block first degree",
                "Autoimmune disorder",
                "Avascular necrosis",
                "Azoospermia",
                "Back pain",
                "Bacteremia",
                "Belching",
                "Bile duct stenosis",
                "Biliary anastomotic leak",
                "Biliary fistula",
                "Biliary tract infection",
                "Bladder anastomotic leak",
                "Bladder infection",
                "Bladder perforation",
                "Bladder spasm",
                "Bloating",
                "Blood and lymphatic system disorders - Other, specify",
                "Blood antidiuretic hormone abnormal",
                "Blood bicarbonate decreased",
                "Blood bilirubin increased",
                "Blood corticotrophin decreased",
                "Blood gonadotrophin abnormal",
                "Blood lactate dehydrogenase increased",
                "Blood prolactin abnormal",
                "Blurred vision",
                "Body odor",
                "Bone infection",
                "Bone marrow hypocellular",
                "Bone pain",
                "Brachial plexopathy",
                "Breast atrophy",
                "Breast infection",
                "Breast pain",
                "Bronchial fistula",
                "Bronchial infection",
                "Bronchial obstruction",
                "Bronchial stricture",
                "Bronchopleural fistula",
                "Bronchopulmonary hemorrhage",
                "Bronchospasm",
                "Bruising",
                "Budd-Chiari syndrome",
                "Bullous dermatitis",
                "Burn",
                "Buttock pain",
                "Capillary leak syndrome",
                "Carbon monoxide diffusing capacity decreased",
                "Cardiac arrest",
                "Cardiac disorders - Other, specify",
                "Cardiac troponin I increased",
                "Cardiac troponin T increased",
                "Cataract",
                "Catheter related infection",
                "CD4 lymphocytes decreased",
                "Cecal hemorrhage",
                "Cecal infection",
                "Central nervous system necrosis",
                "Cerebrospinal fluid leakage",
                "Cervicitis infection",
                "Cheilitis",
                "Chest pain - cardiac",
                "Chest wall necrosis",
                "Chest wall pain",
                "Chills",
                "Cholecystitis",
                "Cholesterol high",
                "Chronic kidney disease",
                "Chylothorax",
                "Chylous ascites",
                "Cognitive disturbance",
                "Colitis",
                "Colonic fistula",
                "Colonic hemorrhage",
                "Colonic obstruction",
                "Colonic perforation",
                "Colonic stenosis",
                "Colonic ulcer",
                "Concentration impairment",
                "Conduction disorder",
                "Confusion",
                "Congenital, familial and genetic disorders - Other, specify",
                "Conjunctivitis",
                "Conjunctivitis infective",
                "Constipation",
                "Corneal infection",
                "Corneal ulcer",
                "Cough",
                "CPK increased",
                "Cranial nerve infection",
                "Creatinine increased",
                "Cushingoid",
                "Cyanosis",
                "Cystitis noninfective",
                "Cytokine release syndrome",
                "Cytomegalovirus infection reactivation",
                "Death neonatal",
                "Death NOS",
                "Dehydration",
                "Delayed orgasm",
                "Delayed puberty",
                "Delirium",
                "Delusions",
                "Dental caries",
                "Depressed level of consciousness",
                "Depression",
                "Dermatitis radiation",
                "Device related infection",
                "Diarrhea",
                "Disease progression",
                "Disseminated intravascular coagulation",
                "Dizziness",
                "Dry eye",
                "Dry mouth",
                "Dry skin",
                "Duodenal fistula",
                "Duodenal hemorrhage",
                "Duodenal infection",
                "Duodenal obstruction",
                "Duodenal perforation",
                "Duodenal stenosis",
                "Duodenal ulcer",
                "Dysarthria",
                "Dysesthesia",
                "Dysgeusia",
                "Dysmenorrhea",
                "Dyspareunia",
                "Dyspepsia",
                "Dysphagia",
                "Dysphasia",
                "Dyspnea",
                "Dysuria",
                "Ear and labyrinth disorders - Other, specify",
                "Ear pain",
                "Eczema",
                "Edema cerebral",
                "Edema face",
                "Edema limbs",
                "Edema trunk",
                "Ejaculation disorder",
                "Ejection fraction decreased",
                "Electrocardiogram QT corrected interval prolonged",
                "Electrocardiogram T wave abnormal",
                "Encephalitis infection",
                "Encephalomyelitis infection",
                "Encephalopathy",
                "Endocarditis infective",
                "Endocrine disorders - Other, specify",
                "Endophthalmitis",
                "Enterocolitis",
                "Enterocolitis infectious",
                "Enterovesical fistula",
                "Eosinophilia",
                "Epistaxis",
                "Epstein-Barr virus infection reactivation",
                "Erectile dysfunction",
                "Erythema multiforme",
                "Erythroderma",
                "Esophageal anastomotic leak",
                "Esophageal fistula",
                "Esophageal hemorrhage",
                "Esophageal infection",
                "Esophageal necrosis",
                "Esophageal obstruction",
                "Esophageal pain",
                "Esophageal perforation",
                "Esophageal stenosis",
                "Esophageal ulcer",
                "Esophageal varices hemorrhage",
                "Esophagitis",
                "Euphoria",
                "Exostosis",
                "External ear pain",
                "Extraocular muscle paresis",
                "Extrapyramidal disorder",
                "Eye disorders - Other, specify",
                "Eye infection",
                "Eye pain",
                "Eyelid function disorder",
                "Facial muscle weakness",
                "Facial nerve disorder",
                "Facial pain",
                "Fall",
                "Fallopian tube anastomotic leak",
                "Fallopian tube obstruction",
                "Fallopian tube perforation",
                "Fat atrophy",
                "Fatigue",
                "Febrile neutropenia",
                "Fecal incontinence",
                "Feminization acquired",
                "Fetal growth retardation",
                "Fever",
                "Fibrinogen decreased",
                "Fibrosis deep connective tissue",
                "Flank pain",
                "Flashing lights",
                "Flatulence",
                "Floaters",
                "Flu like symptoms",
                "Flushing",
                "Folliculitis",
                "Forced expiratory volume decreased",
                "Fracture",
                "Fungemia",
                "Gait disturbance",
                "Gallbladder fistula",
                "Gallbladder infection",
                "Gallbladder necrosis",
                "Gallbladder obstruction",
                "Gallbladder pain",
                "Gallbladder perforation",
                "Gastric anastomotic leak",
                "Gastric fistula",
                "Gastric hemorrhage",
                "Gastric necrosis",
                "Gastric perforation",
                "Gastric stenosis",
                "Gastric ulcer",
                "Gastritis",
                "Gastroesophageal reflux disease",
                "Gastrointestinal anastomotic leak",
                "Gastrointestinal disorders - Other, specify",
                "Gastrointestinal fistula",
                "Gastrointestinal pain",
                "Gastrointestinal stoma necrosis",
                "Gastroparesis",
                "General disorders and administration site conditions - Other, specify",
                "Generalized edema",
                "Generalized muscle weakness",
                "Genital edema",
                "GGT increased",
                "Gingival pain",
                "Glaucoma",
                "Glossopharyngeal nerve disorder",
                "Glucose intolerance",
                "Glucosuria",
                "Growth accelerated",
                "Growth hormone abnormal",
                "Growth suppression",
                "Guillain-Barre syndrome",
                "Gum infection",
                "Gynecomastia",
                "Hair color changes",
                "Hair texture abnormal",
                "Hallucinations",
                "Haptoglobin decreased",
                "Head soft tissue necrosis",
                "Headache",
                "Hearing impaired",
                "Heart failure",
                "Hematoma",
                "Hematosalpinx",
                "Hematuria",
                "Hemoglobin increased",
                "Hemoglobinuria",
                "Hemolysis",
                "Hemolytic uremic syndrome",
                "Hemorrhoidal hemorrhage",
                "Hemorrhoids",
                "Hepatic failure",
                "Hepatic hemorrhage",
                "Hepatic infection",
                "Hepatic necrosis",
                "Hepatic pain",
                "Hepatitis B reactivation",
                "Hepatitis viral",
                "Hepatobiliary disorders - Other, specify",
                "Herpes simplex reactivation",
                "Hiccups",
                "Hip fracture",
                "Hirsutism",
                "Hoarseness",
                "Hot flashes",
                "Hydrocephalus",
                "Hypercalcemia",
                "Hyperglycemia",
                "Hyperhidrosis",
                "Hyperkalemia",
                "Hyperkeratosis",
                "Hyperlipidemia",
                "Hypermagnesemia",
                "Hypernatremia",
                "Hyperparathyroidism",
                "Hyperphosphatemia",
                "Hypersomnia",
                "Hypertension",
                "Hyperthyroidism",
                "Hypertrichosis",
                "Hypertriglyceridemia",
                "Hyperuricemia",
                "Hypoalbuminemia",
                "Hypocalcemia",
                "Hypoglossal nerve disorder",
                "Hypoglycemia",
                "Hypohidrosis",
                "Hypokalemia",
                "Hypomagnesemia",
                "Hyponatremia",
                "Hypoparathyroidism",
                "Hypophosphatemia",
                "Hypophysitis",
                "Hypopituitarism",
                "Hypotension",
                "Hypothermia",
                "Hypothyroidism",
                "Hypoxia",
                "Ileal fistula",
                "Ileal hemorrhage",
                "Ileal obstruction",
                "Ileal perforation",
                "Ileal stenosis",
                "Ileal ulcer",
                "Ileus",
                "Immune system disorders - Other, specify",
                "Infections and infestations - Other, specify",
                "Infective myositis",
                "Infusion related reaction",
                "Infusion site extravasation",
                "Injection site reaction",
                "Injury to carotid artery",
                "Injury to inferior vena cava",
                "Injury to jugular vein",
                "Injury to superior vena cava",
                "Injury, poisoning and procedural complications - Other, specify",
                "INR increased",
                "Insomnia",
                "Intestinal stoma leak",
                "Intestinal stoma obstruction",
                "Intestinal stoma site bleeding",
                "Intra-abdominal hemorrhage",
                "Intracranial hemorrhage",
                "Intraoperative arterial injury",
                "Intraoperative breast injury",
                "Intraoperative cardiac injury",
                "Intraoperative ear injury",
                "Intraoperative endocrine injury",
                "Intraoperative gastrointestinal injury",
                "Intraoperative head and neck injury",
                "Intraoperative hemorrhage",
                "Intraoperative hepatobiliary injury",
                "Intraoperative musculoskeletal injury",
                "Intraoperative neurological injury",
                "Intraoperative ocular injury",
                "Intraoperative renal injury",
                "Intraoperative reproductive tract injury",
                "Intraoperative respiratory injury",
                "Intraoperative splenic injury",
                "Intraoperative urinary injury",
                "Intraoperative venous injury",
                "Investigations - Other, specify",
                "Iron overload",
                "Irregular menstruation",
                "Irritability",
                "Ischemia cerebrovascular",
                "Jejunal fistula",
                "Jejunal hemorrhage",
                "Jejunal obstruction",
                "Jejunal perforation",
                "Jejunal stenosis",
                "Jejunal ulcer",
                "Joint effusion",
                "Joint infection",
                "Joint range of motion decreased",
                "Joint range of motion decreased cervical spine",
                "Joint range of motion decreased lumbar spine",
                "Keratitis",
                "Kidney anastomotic leak",
                "Kidney infection",
                "Kyphosis",
                "Lactation disorder",
                "Large intestinal anastomotic leak",
                "Laryngeal edema",
                "Laryngeal fistula",
                "Laryngeal hemorrhage",
                "Laryngeal inflammation",
                "Laryngeal mucositis",
                "Laryngeal obstruction",
                "Laryngeal stenosis",
                "Laryngitis",
                "Laryngopharyngeal dysesthesia",
                "Laryngospasm",
                "Left ventricular systolic dysfunction",
                "Lethargy",
                "Leukemia secondary to oncology chemotherapy",
                "Leukocytosis",
                "Leukoencephalopathy",
                "Libido decreased",
                "Libido increased",
                "Lip infection",
                "Lip pain",
                "Lipase increased",
                "Lipohypertrophy",
                "Localized edema",
                "Lordosis",
                "Lower gastrointestinal hemorrhage",
                "Lung infection",
                "Lymph gland infection",
                "Lymph leakage",
                "Lymph node pain",
                "Lymphedema",
                "Lymphocele",
                "Lymphocyte count decreased",
                "Lymphocyte count increased",
                "Malabsorption",
                "Malaise",
                "Mania",
                "Mediastinal hemorrhage",
                "Mediastinal infection",
                "Memory impairment",
                "Meningismus",
                "Meningitis",
                "Menorrhagia",
                "Metabolism and nutrition disorders - Other, specify",
                "Methemoglobinemia",
                "Middle ear inflammation",
                "Mitral valve disease",
                "Mobitz (type) II atrioventricular block",
                "Mobitz type I",
                "Movements involuntary",
                "Mucosal infection",
                "Mucositis oral",
                "Multi-organ failure",
                "Muscle cramp",
                "Muscle weakness left-sided",
                "Muscle weakness lower limb",
                "Muscle weakness right-sided",
                "Muscle weakness trunk",
                "Muscle weakness upper limb",
                "Musculoskeletal and connective tissue disorder - Other, specify",
                "Musculoskeletal deformity",
                "Myalgia",
                "Myasthenia gravis",
                "Myelitis",
                "Myelodysplastic syndrome",
                "Myocardial infarction",
                "Myocarditis",
                "Myositis",
                "Nail changes",
                "Nail discoloration",
                "Nail infection",
                "Nail loss",
                "Nail ridging",
                "Nasal congestion",
                "Nausea",
                "Neck edema",
                "Neck pain",
                "Neck soft tissue necrosis",
                "Neoplasms benign, malignant and unspecified (incl cysts and polyps) - Other, specify",
                "Nephrotic syndrome",
                "Nervous system disorders - Other, specify",
                "Neuralgia",
                "Neutrophil count decreased",
                "Night blindness",
                "Nipple deformity",
                "Non-cardiac chest pain",
                "None",
                "Nystagmus",
                "Obesity",
                "Obstruction gastric",
                "Oculomotor nerve disorder",
                "Olfactory nerve disorder",
                "Oligospermia",
                "Optic nerve disorder",
                "Oral cavity fistula",
                "Oral dysesthesia",
                "Oral hemorrhage",
                "Oral pain",
                "Oropharyngeal pain",
                "Osteonecrosis",
                "Osteonecrosis of jaw",
                "Osteoporosis",
                "Otitis externa",
                "Otitis media",
                "Ovarian hemorrhage",
                "Ovarian infection",
                "Ovarian rupture",
                "Ovulation pain",
                "Pain",
                "Pain in extremity",
                "Pain of skin",
                "Palmar-plantar erythrodysesthesia syndrome",
                "Palpitations",
                "Pancreas infection",
                "Pancreatic anastomotic leak",
                "Pancreatic duct stenosis",
                "Pancreatic enzymes decreased",
                "Pancreatic fistula",
                "Pancreatic hemorrhage",
                "Pancreatic necrosis",
                "Pancreatitis",
                "Papilledema",
                "Papulopustular rash",
                "Paresthesia",
                "Paronychia",
                "Paroxysmal atrial tachycardia",
                "Pelvic floor muscle weakness",
                "Pelvic infection",
                "Pelvic pain",
                "Pelvic soft tissue necrosis",
                "Penile infection",
                "Penile pain",
                "Perforation bile duct",
                "Pericardial effusion",
                "Pericardial tamponade",
                "Pericarditis",
                "Perineal pain",
                "Periodontal disease",
                "Periorbital edema",
                "Periorbital infection",
                "Peripheral ischemia",
                "Peripheral motor neuropathy",
                "Peripheral nerve infection",
                "Peripheral sensory neuropathy",
                "Peritoneal infection",
                "Peritoneal necrosis",
                "Personality change",
                "Phantom pain",
                "Pharyngeal anastomotic leak",
                "Pharyngeal fistula",
                "Pharyngeal hemorrhage",
                "Pharyngeal mucositis",
                "Pharyngeal necrosis",
                "Pharyngeal stenosis",
                "Pharyngitis",
                "Pharyngolaryngeal pain",
                "Phlebitis",
                "Phlebitis infective",
                "Photophobia",
                "Photosensitivity",
                "Platelet count decreased",
                "Pleural effusion",
                "Pleural hemorrhage",
                "Pleural infection",
                "Pleuritic pain",
                "Pneumonitis",
                "Pneumothorax",
                "Portal hypertension",
                "Portal vein thrombosis",
                "Postnasal drip",
                "Postoperative hemorrhage",
                "Postoperative thoracic procedure complication",
                "Precocious puberty",
                "Pregnancy loss",
                "Pregnancy, puerperium and perinatal conditions - Other, specify",
                "Premature delivery",
                "Premature menopause",
                "Presyncope",
                "Proctitis",
                "Productive cough",
                "Prolapse of intestinal stoma",
                "Prolapse of urostomy",
                "Prostate infection",
                "Prostatic hemorrhage",
                "Prostatic obstruction",
                "Prostatic pain",
                "Proteinuria",
                "Pruritus",
                "Psychiatric disorders - Other, specify",
                "Psychosis",
                "Pulmonary edema",
                "Pulmonary fibrosis",
                "Pulmonary fistula",
                "Pulmonary hypertension",
                "Pulmonary valve disease",
                "Purpura",
                "Pyramidal tract syndrome",
                "Radiation recall reaction (dermatologic)",
                "Radiculitis",
                "Rash acneiform",
                "Rash maculo-papular",
                "Rash pustular",
                "Rectal anastomotic leak",
                "Rectal fissure",
                "Rectal fistula",
                "Rectal hemorrhage",
                "Rectal mucositis",
                "Rectal necrosis",
                "Rectal obstruction",
                "Rectal pain",
                "Rectal perforation",
                "Rectal stenosis",
                "Rectal ulcer",
                "Recurrent laryngeal nerve palsy",
                "Renal and urinary disorders - Other, specify",
                "Renal calculi",
                "Renal colic",
                "Renal hemorrhage",
                "Reproductive system and breast disorders - Other, specify",
                "Respiratory failure",
                "Respiratory, thoracic and mediastinal disorders - Other, specify",
                "Restlessness",
                "Restrictive cardiomyopathy",
                "Retinal detachment",
                "Retinal tear",
                "Retinal vascular disorder",
                "Retinoic acid syndrome",
                "Retinopathy",
                "Retroperitoneal hemorrhage",
                "Reversible posterior leukoencephalopathy syndrome",
                "Rhabdomyolysis",
                "Rhinitis infective",
                "Rhinorrhea",
                "Right ventricular dysfunction",
                "Rotator cuff injury",
                "Salivary duct inflammation",
                "Salivary gland fistula",
                "Salivary gland infection",
                "Scalp pain",
                "Scleral disorder",
                "Scoliosis",
                "Scrotal infection",
                "Scrotal pain",
                "Seizure",
                "Sepsis",
                "Seroma",
                "Serum amylase increased",
                "Serum sickness",
                "Shingles",
                "Sick sinus syndrome",
                "Sinus bradycardia",
                "Sinus disorder",
                "Sinus pain",
                "Sinus tachycardia",
                "Sinusitis",
                "Sinusoidal obstruction syndrome",
                "Skin and subcutaneous tissue disorders - Other, specify",
                "Skin atrophy",
                "Skin hyperpigmentation",
                "Skin hypopigmentation",
                "Skin induration",
                "Skin infection",
                "Skin papilloma",
                "Skin ulceration",
                "Sleep apnea",
                "Small intestinal anastomotic leak",
                "Small intestinal mucositis",
                "Small intestinal obstruction",
                "Small intestinal perforation",
                "Small intestinal stenosis",
                "Small intestine infection",
                "Small intestine ulcer",
                "Sneezing",
                "Social circumstances - Other, specify",
                "Soft tissue infection",
                "Soft tissue necrosis lower limb",
                "Soft tissue necrosis upper limb",
                "Somnolence",
                "Sore throat",
                "Spasticity",
                "Spermatic cord anastomotic leak",
                "Spermatic cord hemorrhage",
                "Spermatic cord obstruction",
                "Spinal cord compression",
                "Spinal fracture",
                "Splenic infection",
                "Stenosis of gastrointestinal stoma",
                "Stevens-Johnson syndrome",
                "Stoma site infection",
                "Stomach pain",
                "Stomal ulcer",
                "Stridor",
                "Stroke",
                "Subcutaneous emphysema",
                "Sudden death NOS",
                "Suicidal ideation",
                "Suicide attempt",
                "Superficial soft tissue fibrosis",
                "Superficial thrombophlebitis",
                "Superior vena cava syndrome",
                "Supraventricular tachycardia",
                "Surgical and medical procedures - Other, specify",
                "Syncope",
                "Telangiectasia",
                "Tendon reflex decreased",
                "Testicular disorder",
                "Testicular hemorrhage",
                "Testicular pain",
                "Testosterone deficiency",
                "Thromboembolic event",
                "Thrombotic thrombocytopenic purpura",
                "Thrush",
                "Thyroid stimulating hormone increased",
                "Tinnitus",
                "Tooth development disorder",
                "Tooth discoloration",
                "Tooth infection",
                "Toothache",
                "Toxic epidermal necrolysis",
                "Tracheal fistula",
                "Tracheal hemorrhage",
                "Tracheal mucositis",
                "Tracheal obstruction",
                "Tracheal stenosis",
                "Tracheitis",
                "Tracheostomy site bleeding",
                "Transient ischemic attacks",
                "Treatment related secondary malignancy",
                "Tremor",
                "Tricuspid valve disease",
                "Trigeminal nerve disorder",
                "Trismus",
                "Trochlear nerve disorder",
                "Tumor hemorrhage",
                "Tumor lysis syndrome",
                "Tumor pain",
                "Typhlitis",
                "Unequal limb length",
                "Unknown",
                "Upper gastrointestinal hemorrhage",
                "Upper respiratory infection",
                "Ureteric anastomotic leak",
                "Urethral anastomotic leak",
                "Urethral infection",
                "Urinary fistula",
                "Urinary frequency",
                "Urinary incontinence",
                "Urinary retention",
                "Urinary tract infection",
                "Urinary tract obstruction",
                "Urinary tract pain",
                "Urinary urgency",
                "Urine discoloration",
                "Urine output decreased",
                "Urostomy leak",
                "Urostomy obstruction",
                "Urostomy site bleeding",
                "Urostomy stenosis",
                "Urticaria",
                "Uterine anastomotic leak",
                "Uterine fistula",
                "Uterine hemorrhage",
                "Uterine infection",
                "Uterine obstruction",
                "Uterine pain",
                "Uterine perforation",
                "Uveitis",
                "Vaccination complication",
                "Vaccination site lymphadenopathy",
                "Vaginal anastomotic leak",
                "Vaginal discharge",
                "Vaginal dryness",
                "Vaginal fistula",
                "Vaginal hemorrhage",
                "Vaginal infection",
                "Vaginal inflammation",
                "Vaginal obstruction",
                "Vaginal pain",
                "Vaginal perforation",
                "Vaginal stricture",
                "Vagus nerve disorder",
                "Vas deferens anastomotic leak",
                "Vascular access complication",
                "Vascular disorders - Other, specify",
                "Vasculitis",
                "Vasovagal reaction",
                "Venous injury",
                "Ventricular arrhythmia",
                "Ventricular fibrillation",
                "Ventricular tachycardia",
                "Vertigo",
                "Vestibular disorder",
                "Viremia",
                "Virilization",
                "Visceral arterial ischemia",
                "Vision decreased",
                "Vital capacity abnormal",
                "Vitreous hemorrhage",
                "Voice alteration",
                "Vomiting",
                "Vulval infection",
                "Watering eyes",
                "Weight gain",
                "Weight loss",
                "Wheezing",
                "White blood cell decreased",
                "Wound complication",
                "Wound dehiscence",
                "Wound infection",
                "Wrist fracture"
              ],
              "data": { "added": ["None", "Unknown"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ]
            }
          }
        },
        "clinical_trials_database": {
          "meta": {
            "notes": {
              "left": null,
              "right": "If the clinical trials database you use is not included in the controlled terminology, please contact us at https://platform.icgc-argo.org/contact to request it be added."
            }
          },
          "restrictions": {
            "codeList": {
              "left": ["NCI Clinical Trials", "EU Clinical Trials Register"],
              "right": [
                "NCI Clinical Trials",
                "EU Clinical Trials Register",
                "Not applicable",
                "Unknown"
              ],
              "data": { "added": ["Not applicable", "Unknown"], "deleted": [] }
            }
          }
        },
        "clinical_trial_number": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      //regex check for clinical trial number\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\n\n      // list of valid clinical trial databases\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\n      \n      if ($row.clinical_trials_database && $field) {\n          const trialNumber = $field.trim();\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\n          }\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\n          }\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.`};\n          }\n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\n          result = {valid: true, message: \"Ok\"};\n      }\n      else if ($row.clinical_trials_database && !$field) {\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\n          } \n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\n      }\n      return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      //regex check for clinical trial number\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\n\n      // list of valid clinical trial databases\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\n      \n      if ($row.clinical_trials_database && $field) {\n          const trialNumber = $field.trim();\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\n          }\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\n          }\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database. To include a new clinical trials database in the controlled terminology for 'clinical_trials_database', please contact us at https://platform.icgc-argo.org/contact.`};\n          }\n          else if ((clinicalTrialsDB === 'unknown' || clinicalTrialsDB === 'not applicable') && (NCTCheck(trialNumber) || EudraCTCheck(trialNumber))) {\n            result = {valid: false, message: `If a trial number is submitted in the '${$name}' field, then you must indicate the clinical trial database in the 'clinical_trials_database' field.`};\n          }\n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\n          result = {valid: true, message: \"Ok\"};\n      }\n      else if ($row.clinical_trials_database && !$field) {\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\n          } \n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\n      }\n      return result;\n    })"
              ]
            }
          }
        }
      },
      "created": {
        "response_to_treatment_criteria_method": {
          "changeType": "created",
          "name": "response_to_treatment_criteria_method",
          "description": "Indicate the criteria used to assess the donor's response to the applied treatment regimen.",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
            ],
            "codeList": [
              "ELN Dohner AML 2017 Oncology Response Criteria",
              "IWG Cheson AML 2003 Oncology Response Criteria",
              "iRECIST",
              "RECIST",
              "Response Assessment in Neuro-Oncology (RANO)",
              "Physician Assessed Response Criteria"
            ]
          },
          "meta": {
            "core": true,
            "displayName": "Response To Treatment Criteria Method",
            "validationDependency": true,
            "dependsOn": "treatment.treatment_type"
          }
        }
      },
      "deleted": {}
    },
    "chemotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {
        "chemotherapy_drug_dose_units": {
          "changeType": "created",
          "name": "chemotherapy_drug_dose_units",
          "description": "Indicate units used to record chemotherapy drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Chemotherapy Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "created",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in chemotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "validationDependency": true,
            "dependsOn": "chemotherapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "created",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in chemotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "validationDependency": true,
            "dependsOn": "chemotherapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      },
      "deleted": {
        "chemotherapy_dosage_units": {
          "changeType": "deleted",
          "name": "chemotherapy_dosage_units",
          "description": "Indicate units used to record chemotherapy drug dosage.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Chemotherapy Dosage Units" }
        },
        "cumulative_drug_dosage": {
          "changeType": "deleted",
          "name": "cumulative_drug_dosage",
          "description": "Indicate the total actual drug dose in the same units specified in chemotherapy_dosage_units.",
          "valueType": "number",
          "restrictions": { "required": true, "range": { "exclusiveMin": 0 } },
          "meta": { "core": true, "displayName": "Cumulative Drug Dosage" }
        }
      }
    },
    "hormone_therapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {
        "hormone_drug_dose_units": {
          "changeType": "created",
          "name": "hormone_drug_dose_units",
          "description": "Indicate the units used to record hormone drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Hormone Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "created",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in hormone_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "dependsOn": "hormone_therapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "created",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in hormone_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "dependsOn": "hormone_therapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      },
      "deleted": {
        "hormone_drug_dosage_units": {
          "changeType": "deleted",
          "name": "hormone_drug_dosage_units",
          "description": "Indicate the units used to record hormone drug dosage.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Hormone Therapy Dosage Units" }
        },
        "cumulative_drug_dosage": {
          "changeType": "deleted",
          "name": "cumulative_drug_dosage",
          "description": "Indicate total drug dose in units specified in hormone_drug_dosage_units.",
          "valueType": "number",
          "restrictions": { "required": true, "range": { "exclusiveMin": 0 } },
          "meta": { "core": true, "displayName": "Cumulative Drug Dosage" }
        }
      }
    },
    "radiation": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "immunotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {
        "immunotherapy_drug_dose_units": {
          "changeType": "created",
          "name": "immunotherapy_drug_dose_units",
          "description": "Indicate units used to record immunotherapy drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Immunotherapy Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "created",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in immunotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "dependsOn": "immunotherapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "created",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in immunotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "dependsOn": "immunotherapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      },
      "deleted": {}
    },
    "follow_up": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_follow_up_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": {
              "left": null,
              "right": "primary_diagnosis.submitter_primary_diagnosis_id"
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": { "left": null, "right": "treatment.submitter_treatment_id" }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "relapse_type": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "method_of_progression_status": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "anatomic_site_progression_or_recurrence": {
          "description": {
            "left": "Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.",
            "right": "Indicate the ICD-O-3 topography code for the anatomic site(s) where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344."
          },
          "meta": {
            "examples": { "left": "C50.1,C18", "right": "C50.1|C18" },
            "notes": {
              "left": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.",
              "right": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file."
            }
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "recurrence_tumour_staging_system": {
          "meta": { "core": { "left": true, "right": null } },
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (R-ISS)"],
                "deleted": ["Revised International staging system (RISS)"]
              }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })",
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })",
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "recurrence_t_category": { "meta": { "core": { "left": true, "right": null } } },
        "recurrence_n_category": { "meta": { "core": { "left": true, "right": null } } },
        "recurrence_m_category": {
          "meta": { "core": { "left": true, "right": null } },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "recurrence_stage_group": { "meta": { "core": { "left": true, "right": null } } },
        "posttherapy_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (R-ISS)"],
                "deleted": ["Revised International staging system (RISS)"]
              }
            }
          }
        },
        "posttherapy_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "exposure": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "tobacco_smoking_status": {
          "restrictions": {
            "codeList": {
              "left": [
                "Current reformed smoker for <= 15 years",
                "Current reformed smoker for > 15 years",
                "Current reformed smoker, duration not specified",
                "Current smoker",
                "Lifelong non-smoker (<100 cigarettes smoked in lifetime)",
                "Smoking history not documented"
              ],
              "right": [
                "Current reformed smoker for <= 15 years",
                "Current reformed smoker for > 15 years",
                "Current reformed smoker, duration not specified",
                "Current smoker",
                "Lifelong non-smoker (<100 cigarettes smoked in lifetime)",
                "Not applicable",
                "Smoking history not documented"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "tobacco_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Chewing Tobacco",
                "Cigar",
                "Cigarettes",
                "Electronic cigarettes",
                "Pipe",
                "Roll-ups",
                "Snuff",
                "Unknown",
                "Waterpipe"
              ],
              "right": [
                "Chewing Tobacco",
                "Cigar",
                "Cigarettes",
                "Electronic cigarettes",
                "Not applicable",
                "Pipe",
                "Roll-ups",
                "Snuff",
                "Unknown",
                "Waterpipe"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            const tobaccoType = ($row.tobacco_type).map(value => value.toLowerCase());\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else {\n               const smokingStatus = $row.tobacco_smoking_status.trim().toLowerCase();\n               if (smokerCategories.includes(smokingStatus) && tobaccoType.includes('not applicable')) {\n                  result = {valid: false, message: `If the 'tobacco_smoking_status' field is '${smokingStatus}', then the '${$name}' field cannot be submitted as 'Not applicable'. Indicate type(s) of tobacco smoked or submit 'Unknown'.`};\n               }\n               else if (smokingStatus  === 'smoking history not documented' && !(tobaccoType.includes('unknown'))) {\n                  result = {valid: false, message: `If the 'tobacco_smoking_status' field is submitted as '${smokingStatus}', then the '${$name}' field must be submitted as 'Unknown'.`};\n               }\n               else if (smokingStatus === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)' && !(tobaccoType.includes('not applicable'))) {\n                  result = { valid: false, message: `If donor is a lifelong non-smoker, then the '${$name}' field should be submitted as 'Not applicable'.`}\n               }\n               else if (smokingStatus === 'not applicable' && !(tobaccoType.includes('not applicable'))) {\n                  result = { valid: false, message: `If donor's smoking history is not applicable, then the '${$name}' field should be submitted as 'Not applicable'.`}\n               }\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"
              ]
            }
          }
        },
        "pack_years_smoked": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            const tobaccoType = ($row.tobacco_type).map(value => value.toLowerCase());\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else {\n               const smokingStatus = $row.tobacco_smoking_status.trim().toLowerCase();\n               if (smokerCategories.includes(smokingStatus) && tobaccoType.includes('not applicable')) {\n                  result = {valid: false, message: `If the 'tobacco_smoking_status' field is '${smokingStatus}', then the '${$name}' field cannot be submitted as 'Not applicable'. Indicate type(s) of tobacco smoked or submit 'Unknown'.`};\n               }\n               else if (smokingStatus  === 'smoking history not documented' && !(tobaccoType.includes('unknown'))) {\n                  result = {valid: false, message: `If the 'tobacco_smoking_status' field is submitted as '${smokingStatus}', then the '${$name}' field must be submitted as 'Unknown'.`};\n               }\n               else if (smokingStatus === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)' && !(tobaccoType.includes('not applicable'))) {\n                  result = { valid: false, message: `If donor is a lifelong non-smoker, then the '${$name}' field should be submitted as 'Not applicable'.`}\n               }\n               else if (smokingStatus === 'not applicable' && !(tobaccoType.includes('not applicable'))) {\n                  result = { valid: false, message: `If donor's smoking history is not applicable, then the '${$name}' field should be submitted as 'Not applicable'.`}\n               }\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"
              ]
            }
          }
        },
        "alcohol_history": {
          "restrictions": {
            "codeList": {
              "left": ["Yes", "No", "Unknown"],
              "right": ["Yes", "No", "Not applicable", "Unknown"],
              "data": { "added": ["Not applicable"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\n       \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\n         }\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const alcoholHistoryYes = [\"daily drinker\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n      const exclusionCategories = [\"no\", \"not applicable\", \"unknown\"];\n      \n      if ($field && $field != null && !(checkforEmpty($field))) {\n         const alcoholHistory = $field.trim().toLowerCase() \n         if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n            const alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n            if (exclusionCategories.includes(alcoholHistory) && alcoholHistoryYes.includes(alcoholConsumptionCategory)) {\n               result = {valid:false, message: `The 'alcohol_history' field (submitted as '${alcoholHistory}') is inconsistent if the donor is a(n) '${alcoholConsumptionCategory}'. Confirm and correct the 'alcohol_history' and 'alcohol_consumption_category' fields.`};\n            }\n            else if (alcoholHistory === 'not applicable' && (alcoholConsumptionCategory === 'unknown' || alcoholConsumptionCategory === 'none' || alcoholConsumptionCategory === 'occasional drinker (< once a month)')) {\n               result = {valid:false, message: `If the 'alcohol_history' field is not applicable, then the 'alcohol_consumption_category' field must be submitted as 'Not applicable'.`};\n            }\n            else if (alcoholHistory === 'unknown' && (alcoholConsumptionCategory === 'not applicable' || alcoholConsumptionCategory === 'none' || alcoholConsumptionCategory === 'occasional drinker (< once a month)')) {\n               result = {valid:false, message: `If the 'alcohol_history' field is unknown, then the 'alcohol_consumption_category' field must be submitted as 'Unknown'.`};\n            }\n            else if (alcoholHistory === 'no' && alcoholConsumptionCategory === 'unknown') {\n               result = {valid:false, message: `If the 'alcohol_history' field is 'No', then the 'alcohol_consumption_category' field must be submitted as 'Not applicable' or 'None'.`};\n            }\n        }\n        else if (alcoholHistory === 'unknown' || alcoholHistory === 'not applicable') {\n           result = {valid: false, message: `If the 'alcohol_history' field is '${$field}', then the 'alcohol_consumption_category' field must be submitted as '${$field}'.`};\n        }\n        else if (alcoholHistory === 'yes') {\n           result = {valid: false, message: `If the 'alcohol_history' field is '${$field}', then the 'alcohol_consumption_category' field must be submitted as well.`};\n        }\n      }\n      else if (alcoholHistoryYes.includes($row.alcohol_consumption_category)) {\n        result = {valid:false, message: `If the donor is a(n) '${$row.alcohol_consumption_category}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\n      }\n      else if (exclusionCategories.includes($row.alcohol_consumption_category)) {\n        result = {valid:false, message: `If the 'alcohol_consumption_category' field is submitted as '${$row.alcohol_consumption_category}', then the 'alcohol_history' field must be submitted as '${$row.alcohol_consumption_category}'.`}\n      }\n   return result;\n  })"
              ]
            }
          }
        },
        "alcohol_consumption_category": {
          "restrictions": {
            "codeList": {
              "left": [
                "Daily Drinker",
                "None",
                "Occasional Drinker (< once a month)",
                "Social Drinker (> once a month, < once a week)",
                "Unknown",
                "Weekly Drinker (>=1x a week)"
              ],
              "right": [
                "Daily Drinker",
                "None",
                "Not applicable",
                "Occasional Drinker (< once a month)",
                "Social Drinker (> once a month, < once a week)",
                "Unknown",
                "Weekly Drinker (>=1x a week)"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if (!$field || $field === null || checkforEmpty($field)) {\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\n         }\n      }\n      else {\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      const alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if (!$field || $field === null || checkforEmpty($field)) {\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\n         }\n      }\n      else {\n         const alcoholConsumptionCategory = $field.trim().toLowerCase();\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "alcohol_type": {
          "restrictions": {
            "codeList": {
              "left": ["Beer", "Liquor", "Other", "Unknown", "Wine"],
              "right": ["Beer", "Liquor", "Not applicable", "Other", "Unknown", "Wine"],
              "data": { "added": ["Not applicable"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ($field && $field != null && !(checkforEmpty($field))) {\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\n            }\n         }\n         else {\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\n            }\n         }\n      }\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ($field && $field != null && !(checkforEmpty($field))) {\n            const alcoholType = ($field).map(value => value.toLowerCase());\n            if (alcoholConsumptionCategory === 'none' && !(alcoholType.includes('unknown')) && !(alcoholType.includes('not applicable'))) {\n               result = {valid:false, message: `The 'alcohol_consumption_category' field is submitted as 'None' and is inconsistent with the '${$name}' field which indicates the donor consumed '${alcoholType}'. If donor did not consume alcohol, then the '${$name}' field should be submitted as 'Not applicable'. Otherwise, please confirm the 'alcohol_consumption_category' field.`};\n            }\n            else if (alcoholConsumptionCategory === 'not applicable' && !(alcoholType.includes('not applicable'))) {\n               result = {valid:false, message: `If the 'alcohol_consumption_category' is submitted as 'Not applicable', then the '${$name}' field must be submitted as 'Not applicable'.`};\n            }\n            else if (alcoholConsumptionCategory === 'unknown' && !(alcoholType.includes('unknown'))) {\n               result = {valid:false, message: `If the 'alcohol_consumption_category' is submitted as 'Unknown', then the '${$name}' field must be submitted as 'Unknown'.`};\n            }\n            else if (requiresAlcoholType.includes(alcoholConsumptionCategory) && (alcoholType.includes('not applicable'))) {\n               result = {valid:false, message: `If the donor consumes alcohol ('${alcoholConsumptionCategory}'), then the '${$name}' field cannot be 'Not applicable'. Indicate type(s) of alcohol consumed or submit 'Unknown'.`};\n            }\n         }\n         else {\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\n            }\n         }\n      }\n      else {\n         if ($field && $field != null && !(checkforEmpty($field)) && !(($field).map(value => value.toLowerCase())).includes('not applicable')) {\n               result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "opiate_use": {
          "restrictions": {
            "codeList": {
              "left": ["Never", "Unknown", "Yes, currently", "Yes, only in the past"],
              "right": [
                "Never",
                "Not applicable",
                "Unknown",
                "Yes, currently",
                "Yes, only in the past"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "hot_drinks_consumption": {
          "restrictions": {
            "codeList": {
              "left": ["Never", "Unknown", "Yes, currently", "Yes, only in the past"],
              "right": [
                "Never",
                "Not applicable",
                "Unknown",
                "Yes, currently",
                "Yes, only in the past"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "red_meat_frequency": {
          "restrictions": {
            "codeList": {
              "left": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "right": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Not applicable",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "processed_meat_frequency": {
          "restrictions": {
            "codeList": {
              "left": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "right": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Not applicable",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "soft_drinks_frequency": {
          "restrictions": {
            "codeList": {
              "left": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "right": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Not applicable",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "exercise_frequency": {
          "restrictions": {
            "codeList": {
              "left": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "right": [
                "Never",
                "Less than once a month",
                "1-3 times a month",
                "Not applicable",
                "Once or twice a week",
                "Most days but not every day",
                "Every day",
                "Unknown"
              ],
              "data": { "added": ["Not applicable"], "deleted": [] }
            }
          }
        },
        "exercise_intensity": {
          "restrictions": {
            "codeList": {
              "left": [
                "Low: No increase in the heart beat, and no perspiration",
                "Moderate: Increase in the heart beat slightly with some light perspiration",
                "Vigorous: Increase in the heart beat substantially with heavy perspiration"
              ],
              "right": [
                "Low: No increase in the heart beat, and no perspiration",
                "Moderate: Increase in the heart beat slightly with some light perspiration",
                "Not applicable",
                "Vigorous: Increase in the heart beat substantially with heavy perspiration",
                "Unknown"
              ],
              "data": { "added": ["Not applicable", "Unknown"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if ($field != null || !(checkforEmpty($field))) {\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\n         }\n      } \n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n         //const exerciseFreq = $row.exercise_frequency.trim().toLowerCase();\n     \n      if ($field && $field != null && !(checkforEmpty($field))) {\n        const exerciseIntensity = $field.trim().toLowerCase();\n        if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency))) {\n          const exerciseFreq = $row.exercise_frequency.trim().toLowerCase();\n          if (exerciseIntensity === 'not applicable' && exerciseFreq != 'not applicable') {\n            result = {valid: false, message: `If the 'exercise_intensity' field is submitted as 'Not applicable', then the 'exercise_frequency' field must be submitted as 'Not applicable' as well. Please correct your data submission.`};\n          }\n          else if (exerciseIntensity === 'unknown' && exerciseFreq === 'not applicable') {\n            result = {valid: false, message: `If the 'exercise_intensity' field is submitted as 'Unknown', then the 'exercise_frequency' field must be submitted as 'Unknown' as well. Please correct your data submission.`};\n          }\n          else if ((exerciseIntensity != 'unknown' || exerciseIntensity != 'not applicable') && (exerciseFreq === 'never')) {\n            result = {valid: false, message: `The 'exercise_intensity' field (submitted as '${$field}') is inconsistent with the 'exercise_frequency': 'Never'. Please correct your data submission.`};\n          }\n        }\n        else { \n          result = {valid: false, message: `If the '${$name}' field is submitted, then the 'exercise_frequency' field is required as well.`};\n        }\n      }\n      else if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency))) {\n         result = {valid:false, message: `If the 'exercise_frequency' field is submitted, then the '${$name}' field must be submitted as well.`}\n      }\n      return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "family_history": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "family_relative_id": {
          "meta": { "primaryId": { "left": null, "right": true } },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "biomarker": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": {
              "left": null,
              "right": "primary_diagnosis.submitter_primary_diagnosis_id"
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "meta": {
            "validationDependency": { "left": null, "right": true },
            "foreignKey": { "left": null, "right": "treatment.submitter_treatment_id" }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_follow_up_id": {
          "meta": { "foreignKey": { "left": null, "right": "follow_up.submitter_follow_up_id" } },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "comorbidity": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "surgery": {
      "updated": {},
      "created": {
        "program_id": {
          "changeType": "created",
          "name": "program_id",
          "valueType": "string",
          "description": "Unique identifier of the ARGO program.",
          "meta": {
            "validationDependency": true,
            "primaryId": true,
            "foreignKey": "sample_registration.program_id",
            "displayName": "Program ID"
          },
          "restrictions": { "required": true }
        },
        "submitter_donor_id": {
          "changeType": "created",
          "name": "submitter_donor_id",
          "description": "Unique identifier of the donor, assigned by the data provider.",
          "valueType": "string",
          "meta": {
            "validationDependency": true,
            "primaryId": true,
            "foreignKey": "sample_registration.submitter_donor_id",
            "displayName": "Submitter Donor ID"
          },
          "restrictions": { "required": true, "regex": "^[A-Za-z0-9\\-\\._]{1,64}$" }
        },
        "submitter_specimen_id": {
          "changeType": "created",
          "name": "submitter_specimen_id",
          "description": "If a specimen was resected during surgery, indicate the unique identifier of the specimen here. This submitter_specimen_id should exist in the Specimen file.",
          "valueType": "string",
          "meta": {
            "validationDependency": true,
            "primaryId": true,
            "foreignKey": "specimen.submitter_specimen_id",
            "displayName": "Submitter Specimen ID",
            "notes": "Please refer to documentation for instructions on how to submit a specimen that was resected during surgery: https://docs.icgc-argo.org/docs/submission/submitting-clinical-data#submitting-data-in-surgery-file"
          },
          "restrictions": { "regex": "^[A-Za-z0-9\\-\\._]{1,64}$" }
        },
        "submitter_treatment_id": {
          "changeType": "created",
          "name": "submitter_treatment_id",
          "description": "Unique identifier of the treatment, assigned by the data provider.",
          "valueType": "string",
          "meta": {
            "validationDependency": true,
            "primaryId": true,
            "foreignKey": "treatment.submitter_treatment_id",
            "displayName": "Submitter Treatment ID"
          },
          "restrictions": { "required": true, "regex": "^[A-Za-z0-9\\-\\._]{1,64}$" }
        },
        "surgery_type": {
          "changeType": "created",
          "name": "surgery_type",
          "valueType": "string",
          "description": "Indicate the type of surgical procedure that was performed. (References: SNOMED, NCIt, UMLS)",
          "meta": { "core": true, "displayName": "Surgery Type " },
          "restrictions": {
            "required": true,
            "codeList": [
              "Axillary Clearance",
              "Axillary lymph nodes sampling",
              "Biopsy",
              "Bypass Gastrojejunostomy",
              "Cholecystectomy",
              "Cholecystojejunostomy",
              "Completion gastrectomy",
              "Debridement of pancreatic and peripancreatic necrosis",
              "Debulking",
              "Distal subtotal pancreatectomy",
              "Drainage of abscess",
              "Duodenal preserving pancreatic head resection",
              "Endoscopic biopsy",
              "Endoscopic brushings of GIT",
              "Enucleation",
              "Esophageal bypass surgery/jejunostomy only",
              "Exploratory laparotomy",
              "Fine needle aspiration biopsy",
              "Gastric Antrectomy",
              "Hemithyroidectomy",
              "Hepaticojejunostomy",
              "Ivor Lewis subtotal esophagectomy",
              "Laparotomy (Open and Shut)",
              "Left thoracoabdominal incision",
              "Lobectomy",
              "Mammoplasty",
              "Mastectomy",
              "McKeown esophagectomy",
              "Merendino procedure",
              "Minimally invasive esophagectomy",
              "Near-total thyroidectomy",
              "Pancreaticoduodenectomy",
              "Pancreaticojejunostomy, side-to-side anastomosis",
              "Pneumonectomy",
              "Proximal subtotal gastrectomy",
              "Pylorus-sparing Whipple operation",
              "Radical pancreaticoduodenectomy",
              "Reexcision",
              "Segmentectomy",
              "Sentinal Lymph Node Biopsy",
              "Spleen preserving distal pancreatectomy",
              "Splenectomy",
              "Subtotal pancreatectomy",
              "Subtotal thyroidectomy",
              "Thoracotomy (Open & Shut)",
              "Total gastrectomy",
              "Total gastrectomy with extended lymphadenectomy",
              "Total pancreatectomy",
              "Total thyroidectomy",
              "Transhiatal esophagectomy",
              "Triple bypass of pancreas",
              "Wedge/localised gastric resection",
              "Wide Local Excision"
            ]
          }
        },
        "surgery_site": {
          "changeType": "created",
          "name": "surgery_site",
          "valueType": "string",
          "description": "Indicate the ICD-O-3 topography code for the anatomic site where the surgical procedure was performed, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3).",
          "meta": {
            "displayName": "Surgery Site",
            "core": true,
            "dependsOn": "surgery.submitter_specimen_id",
            "notes": "Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344. This field is not required if a specimen was resected during surgery (ie. if `submitter_specimen_id` is submitted) since anatomic site is collected in the Specimen table."
          },
          "restrictions": {
            "regex": "^[C][0-9]{2}(.[0-9]{1})?$",
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.submitter_specimen_id && $row.submitter_specimen_id != null && !(checkforEmpty($row.submitter_specimen_id))) {\n         if ($field && $field != null && !(checkforEmpty($field))) {\n           result = {\n             valid: false,\n             message: `The '${$name}' field does not need to be submitted if a specimen was resected during surgery.`\n           };\n         }\n      }\n      else {\n         if (!$field || checkforEmpty($field) || $field === null) {\n            result = {\n              valid: false,\n              message: `The '${$name}' field is a required field.`\n            };\n         }\n      }\n      return result;\n  })"
            ]
          }
        },
        "surgery_location": {
          "changeType": "created",
          "name": "surgery_location",
          "valueType": "string",
          "description": "Indicate whether the surgical procedure was done at the primary, local recurrence or metastatic location.",
          "meta": {
            "displayName": "Surgery Location",
            "core": true,
            "dependsOn": "surgery.submitter_specimen_id",
            "notes": "This field is not required if a specimen was resected during surgery (ie. if `submitter_specimen_id` is submitted) since type of specimen is collected in the Specimen table."
          },
          "restrictions": {
            "codeList": ["Local recurrence", "Metastatic", "Primary"],
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.submitter_specimen_id && $row.submitter_specimen_id != null && !(checkforEmpty($row.submitter_specimen_id))) {\n         if ($field && $field != null && !(checkforEmpty($field))) {\n           result = {\n             valid: false,\n             message: `The '${$name}' field does not need to be submitted if a specimen was resected during surgery.`\n           };\n         }\n      }\n      else {\n         if (!$field || checkforEmpty($field) || $field === null) {\n            result = {\n              valid: false,\n              message: `The '${$name}' field is a required field.`\n            };\n         }\n      }\n      return result;\n  })"
            ]
          }
        },
        "tumour_length": {
          "changeType": "created",
          "name": "tumour_length",
          "valueType": "number",
          "description": "Indicate the length of the tumour, in millimetres (mm).",
          "meta": { "displayName": "Tumour Length" },
          "restrictions": { "range": { "exclusiveMin": 0 } }
        },
        "tumour_width": {
          "changeType": "created",
          "name": "tumour_width",
          "valueType": "number",
          "description": "Indicate the width of the tumour, in millimetres (mm).",
          "meta": { "displayName": "Tumour Width" },
          "restrictions": { "range": { "exclusiveMin": 0 } }
        },
        "greatest_dimension_tumour": {
          "changeType": "created",
          "name": "greatest_dimension_tumour",
          "valueType": "number",
          "description": "Indicate the greatest dimension or diameter of the tumour, in millimetres (mm). (Reference: NCIt C157135)",
          "meta": { "displayName": "Greatest Dimension Tumour" },
          "restrictions": { "range": { "exclusiveMin": 0 } }
        },
        "tumour_focality": {
          "changeType": "created",
          "name": "tumour_focality",
          "valueType": "string",
          "description": "Indicate the characterization of the location of the tumour. (Reference: NCIt: C157425)",
          "meta": { "displayName": "Tumour Focality" },
          "restrictions": {
            "codeList": [
              "Cannot be assessed",
              "Multifocal",
              "Not applicable",
              "Unifocal",
              "Unknown"
            ]
          }
        },
        "residual_tumour_classification": {
          "changeType": "created",
          "name": "residual_tumour_classification",
          "valueType": "string",
          "description": "Indicate the absence or presence of residual tumour after treatment. In some cases treated with surgery and/or with neoadjuvant therapy there will be residual tumour at the primary site after treatment because of incomplete resection or local and regional disease that extends beyond the limit of ability of resection. (Reference: AJCC 8th ed.)",
          "meta": {
            "displayName": "Residual Tumour Classification",
            "notes": "RX (Presence of residual tumour cannot be assessed), R0 (no residual tumour), R1 (microscopic residual tumour), R2 (macroscopic residual tumour)"
          },
          "restrictions": { "codeList": ["Not applicable", "RX", "R0", "R1", "R2", "Unknown"] }
        },
        "margin_types_involved": {
          "changeType": "created",
          "name": "margin_types_involved",
          "valueType": "string",
          "description": "Indicate the margin type(s) involved.",
          "isArray": true,
          "meta": {
            "displayName": "Margin Types Involved",
            "notes": "To include multiple values, separate values with a pipe delimiter '|' within your file."
          },
          "restrictions": {
            "codeList": [
              "Circumferential resection margin",
              "Common bile duct margin",
              "Distal margin",
              "Not applicable",
              "Proximal margin",
              "Unknown"
            ],
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* checks if surgical procedure involves debulking or biopsy */\n        const surgeryTypeExceptions = (entry) => {return /(biopsy|debulking)$/.test(decodeURI(entry))}; \n   \n        /* checks for a string just consisting of whitespace */\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n        \n        if ($field && !(checkforEmpty($field)) && $field != null) {\n          if ((!$row.submitter_specimen_id || $row.submitter_specimen_id === null) && !(surgeryTypeExceptions($row.surgery_type.trim().toLowerCase()))) {\n            result = {valid: false, message: `The 'submitter_specimen_id' of the resected specimen must be submitted if '${$name}' is submitted.`};\n          }\n        }\n        return  result;\n    })"
            ]
          }
        },
        "margin_types_not_involved": {
          "changeType": "created",
          "name": "margin_types_not_involved",
          "valueType": "string",
          "description": "Indicate the margin type(s) not involved.",
          "isArray": true,
          "meta": {
            "displayName": "Margin Types Not Involved",
            "notes": "To include multiple values, separate values with a pipe delimiter '|' within your file."
          },
          "restrictions": {
            "codeList": [
              "Circumferential resection margin",
              "Common bile duct margin",
              "Distal margin",
              "Not applicable",
              "Proximal margin",
              "Unknown"
            ],
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* checks if surgical procedure involves debulking or biopsy */\n        const surgeryTypeExceptions = (entry) => {return /(biopsy|debulking)$/.test(decodeURI(entry))}; \n   \n        /* checks for a string just consisting of whitespace */\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n        \n        if ($field && !(checkforEmpty($field)) && $field != null) {\n          if ((!$row.submitter_specimen_id || $row.submitter_specimen_id === null) && !(surgeryTypeExceptions($row.surgery_type.trim().toLowerCase()))) {\n            result = {valid: false, message: `The 'submitter_specimen_id' of the resected specimen must be submitted if '${$name}' is submitted.`};\n          }\n        }\n        return  result;\n    })"
            ]
          }
        },
        "margin_types_not_assessed": {
          "changeType": "created",
          "name": "margin_types_not_assessed",
          "valueType": "string",
          "description": "Indicate the margin type(s) that cannot be assessed.",
          "isArray": true,
          "meta": {
            "displayName": "Margin Types Not Assessed",
            "notes": "To include multiple values, separate values with a pipe delimiter '|' within your file."
          },
          "restrictions": {
            "codeList": [
              "Circumferential resection margin",
              "Common bile duct margin",
              "Distal margin",
              "Not applicable",
              "Proximal margin",
              "Unknown"
            ]
          }
        },
        "lymphovascular_invasion": {
          "changeType": "created",
          "name": "lymphovascular_invasion",
          "valueType": "string",
          "description": "Indicate the absence or presence of lymphovascular invasion (LVI). LVI includes lymphatic invasion, vascular invasion and lymphovascular invasion. (Reference: AJCC 8th ed.)",
          "meta": { "displayName": "Lymphovascular Invasion (LVI)" },
          "restrictions": {
            "codeList": [
              "Absent",
              "Both lymphatic and small vessel and venous (large vessel) invasion",
              "Lymphatic and small vessel invasion only",
              "Not applicable",
              "Present",
              "Venous (large vessel) invasion only",
              "Unknown"
            ]
          }
        },
        "perineural_invasion": {
          "changeType": "created",
          "name": "perineural_invasion",
          "valueType": "string",
          "description": "A morphologic finding referring to a tumour that has spread along and infiltrated nerve fibers. Indicate the presence or absence of perineural invasion. (Reference: NCIt: C48260, ICCR)",
          "meta": { "displayName": "Perineural Invasion" },
          "restrictions": {
            "codeList": ["Absent", "Cannot be assessed", "Not applicable", "Present", "Unknown"]
          }
        },
        "extrathyroidal_extension": {
          "changeType": "created",
          "name": "extrathyroidal_extension",
          "valueType": "string",
          "description": "Indicate the involvement of perithyroidal soft tissues by direct extension from the thyroid primary. (Reference: AJCC 8th Ed.)",
          "meta": { "displayName": "Extrathyroidal Extension" },
          "restrictions": {
            "codeList": ["Absent", "Cannot be assessed", "Not applicable", "Present", "Unknown"]
          }
        }
      },
      "deleted": {}
    }
  }
}
