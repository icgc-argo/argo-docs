{
  "schemas": {
    "sample_registration": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "specimen_type": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n\r\n        const row = $row;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        const designation = row.tumour_normal_designation.trim().toLowerCase();\r\n        const specimen_type = $field.trim().toLowerCase();\r\n        \r\n        if (designation === \"normal\"){\r\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\r\n            if (!validTypes.includes(specimen_type)){\r\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\r\n            }\r\n        }\r\n        else if (designation === \"tumour\") {\r\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\r\n            if (invalidTypes.includes(specimen_type)){\r\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\r\n            }\r\n        }\r\n        return result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      const row = $row;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      const designation = row.tumour_normal_designation.trim().toLowerCase();\r\n      const specimen_type = $field.trim().toLowerCase();\r\n      \r\n      if (designation === \"normal\"){\r\n          const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\r\n          if (!validTypes.includes(specimen_type)){\r\n              result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\r\n          }\r\n      }\r\n      else if (designation === \"tumour\") {\r\n          const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\r\n          if (invalidTypes.includes(specimen_type)){\r\n              result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\r\n          }\r\n      }\r\n      return result;\r\n    })"
              ]
            }
          }
        },
        "submitter_sample_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "donor": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "cause_of_death": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })"
              ]
            }
          }
        },
        "survival_time": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n    \r\n        if (!currField && vitalStatus === \"deceased\"){\r\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n        }\r\n        else if (currField && vitalStatus != \"deceased\"){\r\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n        }\r\n        return result;\r\n    })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "specimen": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "pathological_tumour_staging_system": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "pathological_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.pathological_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.pathological_tumour_staging_system && $row.pathological_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'pathological_tumour_staging_system' is set to '${\r\n          $row.pathological_tumour_staging_system\r\n        }', 'pathological_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.pathological_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.pathological_tumour_staging_system && $row.pathological_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'pathological_tumour_staging_system' is set to '${\r\n          $row.pathological_tumour_staging_system\r\n        }', 'pathological_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "tumour_grade": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.tumour_grading_system && $field) {\r\n      let codeList = [];\r\n      const tieredGradingList = ['gx','g1','g2','g3'];\r\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\r\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\r\n        case 'two-tier grading system':\r\n          codeList = [\r\n            'low grade',\r\n            'high grade',\r\n          ];\r\n          break;\r\n        case 'three-tier grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'four-tier grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'grading system for gists':\r\n          codeList = [\r\n            'low',\r\n            'high',\r\n          ];\r\n          break;\r\n        case 'grading system for gnets':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'isup grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'who grading system for cns tumours':\r\n          codeList = [\r\n            'grade i',\r\n            'grade ii',\r\n            'grade iii',\r\n            'grade iv',\r\n          ];\r\n          break;\r\n        case 'fnclcc grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'gleason grade group system':\r\n          codeList = [\r\n            'grade group 1',\r\n            'grade group 2',\r\n            'grade group 3',\r\n            'grade group 4',\r\n            'grade group 5',\r\n          ];\r\n          break;\r\n        case 'scarff-bloom-richardson grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'nuclear grading system for dcis':\r\n          codeList = tieredGradingList;\r\n          break;\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase())) {\r\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\r\n          $row.tumour_grading_system\r\n        }', 'tumour_grade' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\r\n         result.valid = false;\r\n         const msg = \"'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.\";\r\n         result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.tumour_grading_system && $field) {\r\n      let codeList = [];\r\n      const tieredGradingList = ['gx','g1','g2','g3'];\r\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\r\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\r\n        case 'two-tier grading system':\r\n          codeList = [\r\n            'low grade',\r\n            'high grade',\r\n          ];\r\n          break;\r\n        case 'three-tier grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'four-tier grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'grading system for gists':\r\n          codeList = [\r\n            'low',\r\n            'high',\r\n          ];\r\n          break;\r\n        case 'grading system for gnets':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'isup grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'who grading system for cns tumours':\r\n          codeList = [\r\n            'grade i',\r\n            'grade ii',\r\n            'grade iii',\r\n            'grade iv',\r\n          ];\r\n          break;\r\n        case 'fnclcc grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'gleason grade group system':\r\n          codeList = [\r\n            'grade group 1',\r\n            'grade group 2',\r\n            'grade group 3',\r\n            'grade group 4',\r\n            'grade group 5',\r\n          ];\r\n          break;\r\n        case 'scarff-bloom-richardson grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'nuclear grading system for dcis':\r\n          codeList = tieredGradingList;\r\n          break;\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase())) {\r\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\r\n          $row.tumour_grading_system\r\n        }', 'tumour_grade' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\r\n         result.valid = false;\r\n         const msg = \"'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.\";\r\n         result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "percent_proliferating_cells": {
          "meta": {
            "core": { "left": true, "right": null },
            "notes": {
              "left": "This field is only required if the specimen is a tumour.",
              "right": ""
            }
          }
        },
        "percent_inflammatory_tissue": {
          "meta": {
            "core": { "left": true, "right": null },
            "notes": {
              "left": "This field is only required if the specimen is a tumour.",
              "right": ""
            }
          }
        },
        "percent_stromal_cells": {
          "meta": {
            "core": { "left": true, "right": null },
            "notes": {
              "left": "This field is only required if the specimen is a tumour.",
              "right": ""
            }
          }
        },
        "percent_necrosis": {
          "meta": {
            "core": { "left": true, "right": null },
            "notes": {
              "left": "This field is only required if the specimen is a tumour.",
              "right": ""
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "primary_diagnosis": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "age_at_diagnosis": {
          "description": {
            "left": "Age that the donor was first diagnosed with cancer, in years.",
            "right": "Age that the donor was first diagnosed with cancer, in years. This should be based on the earliest diagnosis of cancer."
          }
        },
        "clinical_tumour_staging_system": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "clinical_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.clinical_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'clinical_tumour_staging_system' is set to '${\r\n          $row.clinical_tumour_staging_system\r\n        }', 'clinical_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.clinical_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'clinical_tumour_staging_system' is set to '${\r\n          $row.clinical_tumour_staging_system\r\n        }', 'clinical_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "presenting_symptoms": {
          "restrictions": {
            "codeList": {
              "left": [
                "Abdominal Pain",
                "Anemia",
                "Back Pain",
                "Bloating",
                "Cholangitis",
                "Constipation",
                "Dark Urine",
                "Decreased Appetite",
                "Diabetes",
                "Diarrhea",
                "Fatigue",
                "Fever",
                "Hypoglycemia",
                "Jaundice",
                "Loss of Appetite",
                "Nausea",
                "None",
                "Pale Stools",
                "Pancreatitis",
                "Pruritus/Itchiness",
                "Steatorrhea",
                "Unknown",
                "Vomiting",
                "Weight Loss"
              ],
              "right": [
                "Abdominal Pain",
                "Anemia",
                "Back Pain",
                "Bloating",
                "Cholangitis",
                "Constipation",
                "Dark Urine",
                "Decreased Appetite",
                "Diabetes",
                "Diarrhea",
                "Fatigue",
                "Fever",
                "Hypoglycemia",
                "Jaundice",
                "Loss of Appetite",
                "Nausea",
                "None",
                "Not Reported",
                "Pale Stools",
                "Pancreatitis",
                "Pruritus/Itchiness",
                "Steatorrhea",
                "Swelling in the Neck",
                "Unknown",
                "Vomiting",
                "Weight Loss"
              ],
              "data": { "added": ["Not Reported", "Swelling in the Neck"], "deleted": [] }
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "treatment": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "clinical_trial_number": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n        \r\n        //regex check for clinical trial number\r\n        const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\r\n        const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\r\n\r\n        // list of valid clinical trial databases\r\n        const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\r\n        \r\n        if ($row.clinical_trials_database && $field) {\r\n           const trialNumber = $field.trim();\r\n           const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\r\n           if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\r\n              result = {valid: false, message: 'The submitted NCI clinical trial number is in incorrect format.'};\r\n           }\r\n           else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\r\n             result = {valid: false, message: \"The submitted EudraCT clinical trial number is in incorrect format.\"};\r\n           }\r\n           else if (!clinical_dbs.includes(clinicalTrialsDB)) {\r\n              result = {valid: false, message: \"The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.\"};\r\n           }\r\n        }\r\n        else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\r\n           result = {valid: true, message: \"Ok\"};\r\n        }\r\n        else if ($row.clinical_trials_database && !$field) {\r\n           if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\r\n              result = {valid: false, message: \"'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.\"};\r\n           } \r\n        }\r\n        return result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      //regex check for clinical trial number\r\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\r\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\r\n\r\n      // list of valid clinical trial databases\r\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\r\n      \r\n      if ($row.clinical_trials_database && $field) {\r\n          const trialNumber = $field.trim();\r\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\r\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\r\n            result = {valid: false, message: 'The submitted NCI clinical trial number is in incorrect format.'};\r\n          }\r\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\r\n            result = {valid: false, message: \"The submitted EudraCT clinical trial number is in incorrect format.\"};\r\n          }\r\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\r\n            result = {valid: false, message: \"The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.\"};\r\n          }\r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\r\n          result = {valid: true, message: \"Ok\"};\r\n      }\r\n      else if ($row.clinical_trials_database && !$field) {\r\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\r\n            result = {valid: false, message: \"'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.\"};\r\n          } \r\n      }\r\n      return result;\r\n    })"
              ]
            }
          }
        }
      },
      "created": {
        "treatment_intent": {
          "changeType": "created",
          "name": "treatment_intent",
          "description": "Indicate the intended disease outcome for which the treatment is given. (Reference: CDISC [NCIt code: C124307])",
          "valueType": "string",
          "restrictions": { "required": true, "codeList": ["Curative", "Palliative", "Unknown"] },
          "meta": { "core": true, "displayName": "Treatment Intent" }
        },
        "treatment_setting": {
          "changeType": "created",
          "name": "treatment_setting",
          "description": "Indicate the treatment setting, which describes the treatment's purpose in relation to the primary treatment. (Reference: CDISC [NCIt code: C124308])",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["Adjuvant", "Advanced/Metastatic", "Neoadjuvant", "Not applicable"]
          },
          "meta": { "core": true, "displayName": "Treatment Setting" }
        },
        "response_to_treatment": {
          "changeType": "created",
          "name": "response_to_treatment",
          "description": "The donor's response to the applied treatment regimen. (Source: RECIST)",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": [
              "Complete response",
              "Disease progression",
              "NED",
              "Partial response",
              "Stable disease"
            ]
          },
          "meta": { "core": true, "displayName": "Response To Treatment" }
        },
        "outcome_of_treatment": {
          "changeType": "created",
          "name": "outcome_of_treatment",
          "description": "Indicate the donor's outcome of the prescribed treatment.",
          "valueType": "string",
          "restrictions": {
            "codeList": [
              "Treatment completed as prescribed",
              "Treatment incomplete due to technical or organizational problems",
              "Treatment incomplete because patient died",
              "Patient choice (stopped or interrupted treatment)",
              "Physician decision (stopped or interrupted treatment)",
              "Treatment stopped due to lack of efficacy (disease progression)",
              "Treatment stopped due to acute toxicity",
              "Other",
              "Not applicable",
              "Unknown"
            ]
          },
          "meta": { "displayName": "Outcome Of Treatment" }
        }
      },
      "deleted": {
        "therapeutic_intent": {
          "changeType": "deleted",
          "name": "therapeutic_intent",
          "description": "The therapeutic intent, the reason behind the choice of a therapy, of the treatment.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": [
              "Adjuvant",
              "Concurrent",
              "Curative",
              "Neoadjuvant",
              "Not applicable",
              "Palliative",
              "Unknown"
            ]
          },
          "meta": { "core": true, "displayName": "Therapeutic Intent" }
        },
        "response_to_therapy": {
          "changeType": "deleted",
          "name": "response_to_therapy",
          "description": "The donor's response to the applied treatment regimen. (Source: RECIST)",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": [
              "Complete response",
              "Disease progression",
              "NED",
              "Partial response",
              "Stable disease"
            ]
          },
          "meta": { "core": true, "displayName": "Response To Therapy" }
        },
        "outcome_of_therapy": {
          "changeType": "deleted",
          "name": "outcome_of_therapy",
          "description": "Indicate the donor's outcome of the prescribed treatment.",
          "valueType": "string",
          "restrictions": {
            "codeList": [
              "Treatment completed as prescribed",
              "Treatment incomplete due to technical or organizational problems",
              "Treatment incomplete because patient died",
              "Patient choice (stopped or interrupted treatment)",
              "Physician decision (stopped or interrupted treatment)",
              "Treatment stopped due to lack of efficacy (disease progression)",
              "Treatment stopped due to acute toxicity",
              "Other",
              "Not applicable",
              "Unknown"
            ]
          },
          "meta": { "displayName": "Outcome Of Therapy" }
        }
      }
    },
    "chemotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "cumulative_drug_dosage": {
          "description": {
            "left": "Indicate the total drug dose in the same units specified in chemotherapy_dosage_units.",
            "right": "Indicate the total actual drug dose in the same units specified in chemotherapy_dosage_units."
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "hormone_therapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "radiation": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "follow_up": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_follow_up_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "disease_status_at_followup": {
          "description": {
            "left": "Indicate the donor's disease status at time of follow-up.",
            "right": "Indicate the donor's disease status at time of follow-up. (Reference: RECIST)"
          },
          "restrictions": {
            "codeList": {
              "left": [
                "Complete remission",
                "Distant progression",
                "Loco-regional progression",
                "No evidence of disease",
                "Partial remission",
                "Relapse or recurrence",
                "Stable"
              ],
              "right": [
                "Complete remission",
                "Distant progression",
                "Loco-regional progression",
                "No evidence of disease",
                "Partial remission",
                "Progression NOS",
                "Relapse or recurrence",
                "Stable"
              ],
              "data": { "added": ["Progression NOS"], "deleted": [] }
            }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": {
              "left": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}",
              "right": "^[A-Za-z0-9\\-\\._]{1,64}"
            }
          }
        },
        "relapse_type": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"
              ]
            }
          }
        },
        "relapse_interval": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n        const intervalOfFollowup = parseInt($row.interval_of_followup);\r\n\r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            relapseInterval = parseInt($field);\r\n            if (relapseInterval > intervalOfFollowup) {\r\n                result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\r\n            }\r\n        }\r\n        return  result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* required field, cannot be null */\r\n      const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n      const intervalOfFollowup = parseInt($row.interval_of_followup);\r\n\r\n      const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n      const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n  \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n      if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n          result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n      }\r\n      else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n          result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n      }\r\n      else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n          relapseInterval = parseInt($field);\r\n          if (relapseInterval > intervalOfFollowup) {\r\n              result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\r\n          }\r\n      }\r\n      return  result;\r\n    })"
              ]
            }
          }
        },
        "method_of_progression_status": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"
              ]
            }
          }
        },
        "anatomic_site_progression_or_recurrences": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"
              ]
            }
          }
        },
        "recurrence_tumour_staging_system": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })()",
                "(function validate() {\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })",
                "(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n    \r\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n        // checks for a string just consisting of whitespace\r\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n\r\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n        }\r\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n        }\r\n        return  result;\r\n    })"
              ]
            }
          }
        },
        "recurrence_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.recurrence_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.recurrence_tumour_staging_system && $row.recurrence_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'recurrence_tumour_staging_system' is set to '${\r\n          $row.recurrence_tumour_staging_system\r\n        }', 'recurrence_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.recurrence_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.recurrence_tumour_staging_system && $row.recurrence_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'recurrence_tumour_staging_system' is set to '${\r\n          $row.recurrence_tumour_staging_system\r\n        }', 'recurrence_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "posttherapy_tumour_staging_system": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    /* This is not a required field, so first ensure that it exists */\r\n    if ($field) {\r\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n      const stagingName = $name\r\n        .trim()\r\n        .toLowerCase()\r\n        .split('_tumour_staging_system')[0];\r\n      const requiredFields = [\r\n        `${stagingName}_m_category`,\r\n        `${stagingName}_n_category`,\r\n        `${stagingName}_t_category`,\r\n      ];\r\n      const convertedRow = Object.fromEntries(\r\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n      );\r\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n      const checkforEmpty = entry => {\r\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n      };\r\n\r\n      /* search for fields with falsy values*/\r\n      const emptyFields = requiredFields.filter(\r\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n      );\r\n\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        },
        "posttherapy_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate() {\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.posttherapy_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.posttherapy_tumour_staging_system && $row.posttherapy_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'posttherapy_tumour_staging_system' is set to '${\r\n          $row.posttherapy_tumour_staging_system\r\n        }', 'posttherapy_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })()"
              ],
              "right": [
                "(function validate(inputs) {\r\n    const {$row, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.posttherapy_tumour_staging_system && $field) {\r\n      let codeList = [];\r\n      switch ($row.posttherapy_tumour_staging_system && $row.posttherapy_tumour_staging_system.trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ib',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ivb',\r\n            'stage ive',\r\n            'stage ivs'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\r\n];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When 'posttherapy_tumour_staging_system' is set to '${\r\n          $row.posttherapy_tumour_staging_system\r\n        }', 'posttherapy_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    }
  }
}
