{
  "schemas": {
    "sample_registration": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "specimen_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "right": [
                "Cell line - derived from metastatic tumour",
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Tumour - unknown if derived from primary or metastatic",
                "Xenograft - derived from metastatic tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "data": {
                "added": [
                  "Cell line - derived from metastatic tumour",
                  "Tumour - unknown if derived from primary or metastatic",
                  "Xenograft - derived from metastatic tumour"
                ],
                "deleted": []
              }
            }
          }
        },
        "submitter_sample_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "donor": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {
        "lost_to_followup_after_clinical_event_id": {
          "changeType": "created",
          "description": "If the donor became lost to follow up, indicate the identifier of the clinical event (eg. submitter_primary_diagnosis_id, submitter_treatment_id or submitter_follow_up_id) after which the donor became lost to follow up.",
          "name": "lost_to_followup_after_clinical_event_id",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      \n        /* checks for a string just consisting of whitespace */\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n        \n        if (currField != null && !(checkforEmpty(currField))) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} cannot be submitted if the donor's vital_status is deceased.`}\n           }\n        }\n        return result;\n    })"
            ]
          },
          "meta": {
            "displayName": "Lost To Follow Up After Clinical Event",
            "foreignKey": "primary_diagnosis.submitter_primary_diagnosis_id",
            "validationDependency": true
          }
        },
        "country_of_residence_at_enrollment": {
          "changeType": "created",
          "description": "Indicate the donor's country of residence at the time they were enrolled in the study. The country list include 193 UN member states plus 2 UN observer states. Source: https://www.un.org/en/about-us/member-states",
          "name": "country_of_residence_at_enrollment",
          "valueType": "string",
          "restrictions": {
            "codeList": [
              "Afghanistan",
              "Albania",
              "Algeria",
              "Andorra",
              "Angola",
              "Antigua and Barbuda",
              "Argentina",
              "Armenia",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bhutan",
              "Bolivia (Plurinational State of)",
              "Bosnia and Herzegovina",
              "Botswana",
              "Brazil",
              "Brunei Darussalam",
              "Bulgaria",
              "Burkina Faso",
              "Burundi",
              "Cabo Verde",
              "Cambodia",
              "Cameroon",
              "Canada",
              "Central African Republic",
              "Chad",
              "Chile",
              "China",
              "Colombia",
              "Comoros",
              "Congo",
              "Costa Rica",
              "Côte d’Ivoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "Czechia",
              "Democratic People’s Republic of Korea",
              "Democratic Republic of the Congo",
              "Denmark",
              "Djibouti",
              "Dominica",
              "Dominican Republic",
              "Ecuador",
              "Egypt",
              "El Salvador",
              "Equatorial Guinea",
              "Eritrea",
              "Estonia",
              "Eswatini",
              "Ethiopia",
              "Fiji",
              "Finland",
              "France",
              "Gabon",
              "Gambia",
              "Georgia",
              "Germany",
              "Ghana",
              "Greece",
              "Grenada",
              "Guatemala",
              "Guinea",
              "Guinea-Bissau",
              "Guyana",
              "Haiti",
              "Honduras",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran (Islamic Republic of)",
              "Iraq",
              "Ireland",
              "Israel",
              "Italy",
              "Jamaica",
              "Japan",
              "Jordan",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "Kuwait",
              "Kyrgyzstan",
              "Lao People’s Democratic Republic",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "Marshall Islands",
              "Mauritania",
              "Mauritius",
              "Mexico",
              "Micronesia (Federated States of)",
              "Monaco",
              "Mongolia",
              "Montenegro",
              "Morocco",
              "Mozambique",
              "Myanmar",
              "Namibia",
              "Nauru",
              "Nepal",
              "Netherlands",
              "New Zealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "North Macedonia",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "Papua New Guinea",
              "Paraguay",
              "Peru",
              "Philippines",
              "Poland",
              "Portugal",
              "Qatar",
              "Republic of Korea",
              "Republic of Moldova",
              "Romania",
              "Russian Federation",
              "Rwanda",
              "Saint Kitts and Nevis",
              "Saint Lucia",
              "Saint Vincent and the Grenadines",
              "Samoa",
              "San Marino",
              "Sao Tome and Principe",
              "Saudi Arabia",
              "Senegal",
              "Serbia",
              "Seychelles",
              "Sierra Leone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "Solomon Islands",
              "Somalia",
              "South Africa",
              "South Sudan",
              "Spain",
              "Sri Lanka",
              "Sudan",
              "Suriname",
              "Sweden",
              "Switzerland",
              "Syrian Arab Republic",
              "Tajikistan",
              "Thailand",
              "Timor-Leste",
              "Togo",
              "Tonga",
              "Trinidad and Tobago",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "United Arab Emirates",
              "United Kingdom of Great Britain and Northern Ireland",
              "United Republic of Tanzania",
              "United States of America",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela (Bolivarian Republic of)",
              "Viet Nam",
              "Yemen",
              "Zambia",
              "Zimbabwe",
              "Holy See",
              "State of Palestine"
            ]
          },
          "meta": { "displayName": "Country of Residence at Enrollment" }
        }
      },
      "deleted": {}
    },
    "specimen": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "specimen_acquisition_interval": {
          "restrictions": { "range": { "left": { "min": 0 }, "right": null } }
        },
        "tumour_grade": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        case 'unknown':\n          codeList = ['unknown'];\n          break;\n        case 'not applicable':\n          codeList = ['not applicable'];\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        },
        "percent_tumour_cells": {
          "restrictions": {
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    // When $name is percent_tumour_cells, and $field is a number between 0 and 1\n    const {$row, $name, $field} = inputs;\n\n    const result = { valid: true, message: 'Ok' };\n    const measurementMethodExceptionTypes = ['not applicable'];\n\n    // checks for a string just consisting of whitespace\n    const checkforEmpty = (entry) => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    const fieldHasValue = $field && $field != null && !(checkforEmpty($field));\n    const measurementMethod = $row?.percent_tumour_cells_measurement_method?.trim?.().toLowerCase();\n\n    if (fieldHasValue) {\n      if (measurementMethodExceptionTypes.includes(measurementMethod)) {\n        return {\n          valid: false,\n          message: `The '${$name}' field cannot be submitted when 'percent_tumour_cells_measurement_method' = 'Not applicable'`\n        };\n      }\n    }\n\n    return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {
        "percent_tumour_cells_measurement_method": {
          "changeType": "created",
          "name": "percent_tumour_cells_measurement_method",
          "description": "Indicate method used to measure percent_tumour_cells.",
          "valueType": "string",
          "meta": {
            "core": true,
            "dependsOn": "sample_registration.tumour_normal_designation",
            "notes": "This field is only required if the specimen is a tumour.",
            "displayName": "Percent Tumour Cells Measurement Method"
          },
          "restrictions": {
            "codeList": ["Genomics", "Image analysis", "Pathology estimate by percent nuclei"]
          }
        }
      },
      "deleted": {}
    },
    "primary_diagnosis": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "lymph_nodes_examined_method": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const notExamined = ['cannot be determined', 'no', 'no lymph nodes found in resected specimen', 'not applicable'];\n      const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      \n      if (!$field || $field === null || checkforEmpty($field)) {\n        if (lymphNodesExaminedStatus === 'yes') {\n          result = { valid: false, message: `The '${$name}' field must be submitted if the 'lymph_nodes_examined_status' field is 'Yes'`};\n        }\n      }\n      else {\n         if (notExamined.includes(lymphNodesExaminedStatus)) {\n           result = { valid: false, message: `The '${$name}' field should not be submitted if the 'lymph_nodes_examined_status' field is '${lymphNodesExaminedStatus}'`};\n         }\n      }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const notExamined = ['cannot be determined', 'no', 'no lymph nodes found in resected specimen', 'not applicable', 'unknown'];\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if (!$row.lymph_nodes_examined_status || $row.lymph_nodes_examined_status === null || checkforEmpty($row.lymph_nodes_examined_status)) {\n        result = {valid: false, message: `The 'lymph_nodes_examined_status' field must be submitted.`};\n      }\n      else {\n        const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n      \n        if (!$field || $field === null || checkforEmpty($field)) {\n          if (lymphNodesExaminedStatus === 'yes') {\n            result = { valid: false, message: `The '${$name}' field must be submitted if the 'lymph_nodes_examined_status' field is 'Yes'`};\n          }\n        }\n        else {\n          if (notExamined.includes(lymphNodesExaminedStatus)) {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if the 'lymph_nodes_examined_status' field is '${lymphNodesExaminedStatus}'`};\n          }\n        }\n      }\n    return result;\n})"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "treatment": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "treatment_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "right": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "End of life care",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "data": { "added": ["End of life care"], "deleted": [] }
            }
          }
        },
        "is_primary_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "treatment_start_interval": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            },
            "range": { "left": { "exclusiveMin": 0 }, "right": null }
          }
        },
        "treatment_duration": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "days_per_cycle": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "number_of_cycles": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "treatment_intent": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "treatment_setting": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "response_to_treatment_criteria_method": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            },
            "codeList": {
              "left": [
                "ELN Dohner AML 2017 Oncology Response Criteria",
                "IWG Cheson AML 2003 Oncology Response Criteria",
                "iRECIST",
                "RECIST",
                "Response Assessment in Neuro-Oncology (RANO)",
                "Physician Assessed Response Criteria"
              ],
              "right": [
                "ELN Dohner AML 2017 Oncology Response Criteria",
                "IWG Cheson AML 2003 Oncology Response Criteria",
                "iRECIST",
                "RECIST",
                "RECIST 1.1",
                "Response Assessment in Neuro-Oncology (RANO)",
                "Physician Assessed Response Criteria"
              ],
              "data": { "added": ["RECIST 1.1"], "deleted": [] }
            }
          }
        },
        "response_to_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })",
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n\n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n    let codeList = [];\n    \n      switch ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method.trim().toLowerCase()) {\n        case 'eln dohner aml 2017 oncology response criteria':\n          codeList = [\n            'complete remission',\n            'complete remission with incomplete hematologic recovery (cri)',\n            'complete remission without minimal residual disease (crmrd-)',\n            'hematologic relapse (after crmrd-, cr, cri)',\n            'molecular relapse (after crmrd-)',\n            'partial remission',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'iwg cheson aml 2003 oncology response criteria':\n          codeList = [\n            'cytogenetic complete remission (crc)',\n            'molecular complete remission (crm)',\n            'morphologic complete remission',\n            'morphologic complete remission with incomplete blood count recovery (cri)',\n            'morphologic leukemia-free state',\n            'partial remission'\n          ];\n          break;\n        case 'irecist':\n          codeList = [\n            'immune complete response (icr)',\n            'immune confirmed progressive disease (icpd)',\n            'immune partial response (ipr)',\n            'immune stable disease (isd)',\n            'immune unconfirmed progressive disease (iupd)'\n          ];\n          break;\n        case 'recist':\n          codeList = [\n            'complete response',\n            'no evidence of disease (ned)',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'response assessment in neuro-oncology (rano)':\n          codeList = [\n            'complete response',\n            'minor response',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'physician assessed response criteria':\n          codeList = [\n            'physician assessed complete response',\n            'physician assessed partial response',\n            'physician assessed stable disease'\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n    if ($field && $field != null && !(checkforEmpty($field))) {\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'response_to_treatment_criteria_method' is set to '${\n          $row.response_to_treatment_criteria_method}', the '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    else {\n       if ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method != null && !(checkforEmpty($row.response_to_treatment_criteria_method))) {\n         result = { valid: false, message: `The '${$name}' field must be submitted when 'response_to_treatment_criteria_method' is set to '${$row.response_to_treatment_criteria_method}'. The '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`};\n       }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})",
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n\n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n    let codeList = [];\n    \n      switch ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method.trim().toLowerCase()) {\n        case 'eln dohner aml 2017 oncology response criteria':\n          codeList = [\n            'complete remission',\n            'complete remission with incomplete hematologic recovery (cri)',\n            'complete remission without minimal residual disease (crmrd-)',\n            'hematologic relapse (after crmrd-, cr, cri)',\n            'molecular relapse (after crmrd-)',\n            'partial remission',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'iwg cheson aml 2003 oncology response criteria':\n          codeList = [\n            'cytogenetic complete remission (crc)',\n            'molecular complete remission (crm)',\n            'morphologic complete remission',\n            'morphologic complete remission with incomplete blood count recovery (cri)',\n            'morphologic leukemia-free state',\n            'partial remission'\n          ];\n          break;\n        case 'irecist':\n          codeList = [\n            'immune complete response (icr)',\n            'immune confirmed progressive disease (icpd)',\n            'immune partial response (ipr)',\n            'immune stable disease (isd)',\n            'immune unconfirmed progressive disease (iupd)'\n          ];\n          break;\n        case 'recist':\n          codeList = [\n            'complete response',\n            'no evidence of disease (ned)',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'response assessment in neuro-oncology (rano)':\n          codeList = [\n            'complete response',\n            'minor response',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'physician assessed response criteria':\n          codeList = [\n            'physician assessed complete response',\n            'physician assessed partial response',\n            'physician assessed progressive disease',\n            'physician assessed stable disease'\n          ];\n          break;\n        case 'recist 1.1':\n          codeList = [\n            'complete response',\n            'not evaluable (ne)',\n            'non-complete response/non-progressive disease (non-cr/non-pd)',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n    if ($field && $field != null && !(checkforEmpty($field))) {\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'response_to_treatment_criteria_method' is set to '${\n          $row.response_to_treatment_criteria_method}', the '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    else {\n       if ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method != null && !(checkforEmpty($row.response_to_treatment_criteria_method))) {\n         result = { valid: false, message: `The '${$name}' field must be submitted when 'response_to_treatment_criteria_method' is set to '${$row.response_to_treatment_criteria_method}'. The '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`};\n       }\n    }\n    return result;\n  })"
              ]
            },
            "codeList": {
              "left": [
                "Complete remission",
                "Complete remission with incomplete hematologic recovery (CRi)",
                "Complete remission without minimal residual disease (CRMRD-)",
                "Complete response",
                "Cytogenetic complete remission (CRc)",
                "Hematologic relapse (after CRMRD-, CR, CRi)",
                "Immune complete response (iCR)",
                "Immune confirmed progressive disease (iCPD)",
                "Immune partial response (iPR)",
                "Immune stable disease (iSD)",
                "Immune unconfirmed progressive disease (iUPD)",
                "Minor response",
                "Molecular complete remission (CRm)",
                "Molecular relapse (after CRMRD-)",
                "Morphologic complete remission",
                "Morphologic complete remission with incomplete blood count recovery (CRi)",
                "Morphologic leukemia-free state",
                "No evidence of disease (NED)",
                "Partial remission",
                "Partial response",
                "Physician assessed complete response",
                "Physician assessed partial response",
                "Physician assessed stable disease",
                "Progressive disease",
                "Stable disease"
              ],
              "right": [
                "Complete remission",
                "Complete remission with incomplete hematologic recovery (CRi)",
                "Complete remission without minimal residual disease (CRMRD-)",
                "Complete response",
                "Cytogenetic complete remission (CRc)",
                "Hematologic relapse (after CRMRD-, CR, CRi)",
                "Immune complete response (iCR)",
                "Immune confirmed progressive disease (iCPD)",
                "Immune partial response (iPR)",
                "Immune stable disease (iSD)",
                "Immune unconfirmed progressive disease (iUPD)",
                "Minor response",
                "Molecular complete remission (CRm)",
                "Molecular relapse (after CRMRD-)",
                "Morphologic complete remission",
                "Morphologic complete remission with incomplete blood count recovery (CRi)",
                "Morphologic leukemia-free state",
                "No evidence of disease (NED)",
                "Non-Complete response/Non-Progressive disease (Non-CR/Non-PD)",
                "Not evaluable (NE)",
                "Partial remission",
                "Partial response",
                "Physician assessed complete response",
                "Physician assessed partial response",
                "Physician assessed progressive disease",
                "Physician assessed stable disease",
                "Progressive disease",
                "Stable disease"
              ],
              "data": {
                "added": [
                  "Non-Complete response/Non-Progressive disease (Non-CR/Non-PD)",
                  "Not evaluable (NE)",
                  "Physician assessed progressive disease"
                ],
                "deleted": []
              }
            }
          }
        },
        "outcome_of_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        },
        "adverse_events": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['treatment_start_interval', 'treatment_duration', 'is_primary_treatment', 'treatment_intent', 'treatment_setting', 'response_to_treatment_criteria_method', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const treatmentType = ($row.treatment_type).map(value => value.toLowerCase());\n       \n      if (!treatmentType.includes(\"no treatment\") && coreFields.includes($name) && (!$field || $field === null || checkforEmpty($field))) {\n          result = { valid: false, message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentType}'`};\n      }\n      else if (treatmentType.includes(\"no treatment\") && ($field && $field != null && !(checkforEmpty($field)))) {\n        if (coreFields.includes($name) || (typeof($field) === 'string' && $field.trim().toLowerCase() != 'not applicable') || typeof($field) === 'number') {\n          result = { valid: false, message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentType}'`};\n        }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n\t\tconst { $row, $name, $field } = inputs;\n\t\tconst result = { valid: true, message: 'Ok' };\n\n\t\tconst arrayItemsInSecondArray = (arr1, arr2) => {\n\t\t\treturn arr2.some(arr2Item => {\n\t\t\t\treturn arr1.includes(arr2Item);\n\t\t\t});\n\t\t};\n\n\t\tconst coreFields = [\n\t\t\t'treatment_start_interval',\n\t\t\t'treatment_duration',\n\t\t\t'is_primary_treatment',\n\t\t\t'treatment_intent',\n\t\t\t'treatment_setting',\n\t\t\t'response_to_treatment_criteria_method',\n\t\t\t'response_to_treatment',\n\t\t];\n\n\t\tconst treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n\t\tconst checkforInvalid = entry => {\n\t\t\t// note: negative numbers are allowed as per\n\t\t\t// https://github.com/icgc-argo/argo-dictionary/issues/432 */\n\n\t\t\treturn (\n\t\t\t\t// regular falsy values\n\t\t\t\t[null, undefined, ''].includes($field) ||\n\t\t\t\t// whitespace-filled strings\n\t\t\t\t/^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))\n\t\t\t);\n\t\t};\n\n\t\tconst treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n\t\tconst recordHasTreatments = !arrayItemsInSecondArray(treatmentExceptionTypes, treatmentTypes);\n\n\t\tif (recordHasTreatments) {\n\t\t\tif (coreFields.includes($name) && checkforInvalid($field)) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t} // otherwise, is there a valid value without a treatment defined\n\t\telse if (!checkforInvalid($field)) {\n\t\t\tif (\n\t\t\t\tcoreFields.includes($name) ||\n\t\t\t\t(typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n\t\t\t\t!isNaN(parseFloat($field))\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tvalid: false,\n\t\t\t\t\tmessage: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t})"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "chemotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "drug_rxnormcui": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "dependsOn": { "left": null, "right": "chemotherapy.drug_database" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "drug_name": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "dependsOn": { "left": null, "right": "chemotherapy.drug_rxnormcui" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "chemotherapy_drug_dose_units": {
          "restrictions": {
            "codeList": {
              "left": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"],
              "right": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg", "mg"],
              "data": { "added": ["mg"], "deleted": [] }
            }
          }
        },
        "prescribed_cumulative_drug_dose": {
          "meta": { "validationDependency": { "left": null, "right": true } },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "actual_cumulative_drug_dose": {
          "meta": { "validationDependency": { "left": null, "right": true } },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {
        "drug_database": {
          "changeType": "created",
          "name": "drug_database",
          "description": "Indicate the drug database where drug term is found.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "chemotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Database"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ],
            "codeList": ["KEGG", "PubChem", "NCI Thesaurus"]
          }
        },
        "drug_id": {
          "changeType": "created",
          "name": "drug_id",
          "description": "Indicate the identifier from the drug_database for the drug.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "chemotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug ID"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        },
        "drug_term": {
          "changeType": "created",
          "name": "drug_term",
          "description": "Indicate the drug term as it exists in the database specified in the drug_database.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "chemotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Term"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        }
      },
      "deleted": {}
    },
    "hormone_therapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "drug_rxnormcui": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "validationDependency": { "left": null, "right": true },
            "dependsOn": { "left": null, "right": "hormone_therapy.drug_database" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "drug_name": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "validationDependency": { "left": null, "right": true },
            "dependsOn": { "left": null, "right": "hormone_therapy.drug_rxnormcui" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "hormone_drug_dose_units": {
          "restrictions": {
            "codeList": {
              "left": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"],
              "right": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg", "mg"],
              "data": { "added": ["mg"], "deleted": [] }
            }
          }
        }
      },
      "created": {
        "drug_database": {
          "changeType": "created",
          "name": "drug_database",
          "description": "Indicate the drug database where drug term is found.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "hormone_therapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Database"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ],
            "codeList": ["KEGG", "PubChem", "NCI Thesaurus"]
          }
        },
        "drug_id": {
          "changeType": "created",
          "name": "drug_id",
          "description": "Indicate the identifier from the drug_database for the drug.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "hormone_therapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug ID"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        },
        "drug_term": {
          "changeType": "created",
          "name": "drug_term",
          "description": "Indicate the drug term as it exists in the database specified in the drug_database.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "hormone_therapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Term"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        }
      },
      "deleted": {}
    },
    "radiation": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {
        "radiation_boost": {
          "changeType": "created",
          "name": "radiation_boost",
          "description": "A radiation boost is an extra radiation treatment targeted at the tumor bed, given after the regular sessions of radiation is complete (Reference NCIt: C137812). Indicate if this radiation treatment was a radiation boost.",
          "valueType": "string",
          "restrictions": { "codeList": ["Yes", "No", "Not applicable"] },
          "meta": { "displayName": "Radiation Boost" }
        },
        "reference_radiation_treatment_id": {
          "changeType": "created",
          "name": "reference_radiation_treatment_id",
          "description": "If a radiation boost was given, indicate the 'submitter_treatment_id' of the primary radiation treatment the radiation boost treatment is linked to.",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        \n        if ($row.radiation_boost != null) {\n           const radiationBoost = $row.radiation_boost.trim().toLowerCase();\n\n           if (!currField && radiationBoost === \"yes\") {\n              result = {valid: false, message: `${$name} must be provided when if a radiation boost was given.`}\n           }\n           else if (currField && radiationBoost != \"yes\"){\n              result = {valid: false, message: `${$name} cannot be provided if the 'radiation_boost' field is '${radiationBoost}'.`}\n           }\n        }\n        else if ((!$row.radiation_boost) && (currField)) {\n           result = {valid: false, message: `'${$name}' requires the 'radiation_boost' field.` }\n        }\n        return result;\n    })"
            ]
          },
          "meta": { "displayName": "Reference Radiation Treatment for Boost" }
        }
      },
      "deleted": {}
    },
    "immunotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "drug_rxnormcui": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "dependsOn": { "left": null, "right": "immunotherapy.drug_database" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "drug_name": {
          "meta": {
            "notes": {
              "left": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin",
              "right": "This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin. \n\nIf the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found."
            },
            "displayName": { "left": "Immunotherapy Drug Name", "right": "Chemotherapy Drug Name" },
            "dependsOn": { "left": null, "right": "immunotherapy.drug_rxnormcui" }
          },
          "restrictions": {
            "required": { "left": true, "right": null },
            "script": {
              "left": null,
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
              ]
            }
          }
        },
        "immunotherapy_drug_dose_units": {
          "restrictions": {
            "codeList": {
              "left": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"],
              "right": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg", "mg"],
              "data": { "added": ["mg"], "deleted": [] }
            }
          }
        }
      },
      "created": {
        "drug_database": {
          "changeType": "created",
          "name": "drug_database",
          "description": "Indicate the drug database where drug term is found.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "immunotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Database"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ],
            "codeList": ["KEGG", "PubChem", "NCI Thesaurus"]
          }
        },
        "drug_id": {
          "changeType": "created",
          "name": "drug_id",
          "description": "Indicate the identifier from the drug_database for the drug.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "immunotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug ID"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        },
        "drug_term": {
          "changeType": "created",
          "name": "drug_term",
          "description": "Indicate the drug term as it exists in the database specified in the drug_database.",
          "valueType": "string",
          "meta": {
            "core": true,
            "validationDependency": true,
            "dependsOn": "immunotherapy.drug_rxnormcui",
            "notes": "If the drugs don't exist in RxNorm, please indicate drug_database, drug_id and drug_term where the drugs information can be found.",
            "displayName": "Drug Term"
          },
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = {valid: true, message: \"Ok\"};\n\n    // Extract related fields from the row\n    const drug_rxnormcui = $row.drug_rxnormcui;\n    const drug_name = $row.drug_name;\n    const drug_database = $row.drug_database;\n    const drug_id = $row.drug_id;\n    const drug_term = $row.drug_term;\n      \n    // checks for empty fields\n    const checkforEmpty = (entry) => {\n      // Check if entry is null or undefined\n      if (entry === null || entry === undefined) {\n        return true;\n      } \n      // Logic to check if the entry is an empty string or contains only whitespace\n      return /^\\s*$/.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n     \n    // Validate based on the field name\n    switch ($name) {\n        case 'drug_rxnormcui':\n            // If drug_rxnormcui is provided\n            if (!checkforEmpty($field)) {\n              if (checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name is required when drug_rxnormcui is provided.`\n                  };\n              }\n              if (!checkforEmpty(drug_database) || !checkforEmpty(drug_id) || !checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term should be blank when drug_rxnormcui is provided.`\n                  };\n              }\n          } else {\n              // If drug_rxnormcui is not provided\n              if (!checkforEmpty(drug_name)) {\n                  result = {\n                    valid: false,\n                    message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n              if (checkforEmpty(drug_database) || checkforEmpty(drug_id) || checkforEmpty(drug_term) ) {\n                  result = {\n                    valid: false,\n                    message: `drug_database, drug_id and drug_term must be populated when drug_rxnormcui is not provided.`\n                  };\n              }\n          }\n          break;\n\n      case 'drug_name':\n          // If drug_rxnormcui is provided, drug_name must be populated\n          if (!checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name is required when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, drug_name should be empty\n          if (checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `drug_name should not be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n      case 'drug_database':\n      case 'drug_id': \n      case 'drug_term':\n          // If drug_rxnormcui is provided, these fields should be empty\n          if (!checkforEmpty(drug_rxnormcui) && !checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' should be blank when drug_rxnormcui is provided.`\n              };\n          }\n          // If drug_rxnormcui is not provided, these fields must be populated\n          if (checkforEmpty(drug_rxnormcui) && checkforEmpty($field)) {\n              result = {\n                valid: false,\n                message: `'${$name}' must be populated when drug_rxnormcui is not provided.`\n              };\n          }\n          break;\n\n        default:\n            break;\n    }\n\n    return result;\n  })"
            ]
          }
        }
      },
      "deleted": {}
    },
    "surgery": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "follow_up": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_follow_up_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "interval_of_followup": {
          "restrictions": { "range": { "left": { "exclusiveMin": 0 }, "right": null } }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "relapse_interval": {
          "restrictions": { "range": { "left": { "exclusiveMin": 0 }, "right": null } }
        },
        "anatomic_site_progression_or_recurrence": {
          "description": {
            "left": "Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.",
            "right": "Indicate the ICD-O-3 topography code for the anatomic site(s) where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344."
          },
          "meta": {
            "examples": { "left": "C50.1,C18", "right": "C50.1|C18" },
            "notes": {
              "left": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.",
              "right": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file."
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "exposure": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "family_history": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "family_relative_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "relationship_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Aunt",
                "Brother",
                "Cousin",
                "Daughter",
                "Father",
                "Grandchild",
                "Grandfather",
                "Grandmother",
                "Maternal Aunt",
                "Maternal Cousin",
                "Maternal Grandfather",
                "Maternal Grandmother",
                "Maternal Half-brother",
                "Maternal Half-sister",
                "Maternal Uncle",
                "Mother",
                "Nephew",
                "Niece",
                "Other",
                "Paternal Aunt",
                "Paternal Cousin",
                "Paternal Grandfather",
                "Paternal Grandmother",
                "Paternal Half-brother",
                "Paternal Half-sister",
                "Paternal Uncle",
                "Sister",
                "Son",
                "Uncle",
                "Unknown"
              ],
              "right": [
                "Aunt",
                "Brother",
                "Child",
                "Cousin",
                "Daughter",
                "Father",
                "Grandchild",
                "Grandfather",
                "Grandmother",
                "Maternal Aunt",
                "Maternal Cousin",
                "Maternal Grandfather",
                "Maternal Grandmother",
                "Maternal Half-brother",
                "Maternal Half-sister",
                "Maternal Uncle",
                "Mother",
                "Nephew",
                "Niece",
                "Other",
                "Paternal Aunt",
                "Paternal Cousin",
                "Paternal Grandfather",
                "Paternal Grandmother",
                "Paternal Half-brother",
                "Paternal Half-sister",
                "Paternal Uncle",
                "Sibling",
                "Sister",
                "Son",
                "Uncle",
                "Unknown"
              ],
              "data": { "added": ["Child", "Sibling"], "deleted": [] }
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "biomarker": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "submitter_follow_up_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        },
        "test_interval": {
          "restrictions": { "range": { "left": { "exclusiveMin": 0 }, "right": null } }
        }
      },
      "created": {},
      "deleted": {}
    },
    "comorbidity": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}", "right": "^[A-Za-z0-9\\-\\._]{1,64}$" }
          }
        }
      },
      "created": {},
      "deleted": {}
    }
  }
}
