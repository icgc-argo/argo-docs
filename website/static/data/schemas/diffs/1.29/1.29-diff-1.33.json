{
  "schemas": {
    "specimen": {
      "updated": {
        "pathological_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ii',\n            'stage iia',\n            'stage iab',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        },
        "tumour_grade": {
          "restrictions": {
            "codeList": {
              "left": [
                "Low grade",
                "High grade",
                "GX",
                "G1",
                "G2",
                "G3",
                "G4",
                "Low",
                "High",
                "Grade I",
                "Grade II",
                "Grade III",
                "Grade IV",
                "Grade Group 1",
                "Grade Group 2",
                "Grade Group 3",
                "Grade Group 4",
                "Grade Group 5"
              ],
              "right": [
                "Low grade",
                "High grade",
                "GX",
                "G1",
                "G2",
                "G3",
                "G4",
                "Low",
                "High",
                "Intermediate",
                "Very low",
                "Grade I",
                "Grade II",
                "Grade III",
                "Grade IV",
                "Grade Group 1",
                "Grade Group 2",
                "Grade Group 3",
                "Grade Group 4",
                "Grade Group 5"
              ],
              "data": { "added": ["Intermediate", "Very low"], "deleted": [] }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        case 'unknown':\n          codeList = ['unknown'];\n          break;\n        case 'not applicable':\n          codeList = ['not applicable'];\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n            'intermediate',\n            'very low'\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        case 'unknown':\n          codeList = ['unknown'];\n          break;\n        case 'not applicable':\n          codeList = ['not applicable'];\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "primary_diagnosis": {
      "updated": {
        "clinical_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ii',\n            'stage iia',\n            'stage iab',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "surgery": {
      "updated": {
        "surgery_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Axillary Clearance",
                "Axillary lymph nodes sampling",
                "Biopsy",
                "Bypass Gastrojejunostomy",
                "Cholecystectomy",
                "Cholecystojejunostomy",
                "Completion gastrectomy",
                "Debridement of pancreatic and peripancreatic necrosis",
                "Debulking",
                "Distal subtotal pancreatectomy",
                "Drainage of abscess",
                "Duodenal preserving pancreatic head resection",
                "Endoscopic biopsy",
                "Endoscopic brushings of GIT",
                "Enucleation",
                "Esophageal bypass surgery/jejunostomy only",
                "Exploratory laparotomy",
                "Fine needle aspiration biopsy",
                "Gastric Antrectomy",
                "Hemithyroidectomy",
                "Hepaticojejunostomy",
                "Ivor Lewis subtotal esophagectomy",
                "Laparotomy (Open and Shut)",
                "Left thoracoabdominal incision",
                "Lobectomy",
                "Mammoplasty",
                "Mastectomy",
                "McKeown esophagectomy",
                "Merendino procedure",
                "Minimally invasive esophagectomy",
                "Near-total thyroidectomy",
                "Pancreaticoduodenectomy",
                "Pancreaticojejunostomy, side-to-side anastomosis",
                "Pneumonectomy",
                "Proximal subtotal gastrectomy",
                "Pylorus-sparing Whipple operation",
                "Radical pancreaticoduodenectomy",
                "Reexcision",
                "Segmentectomy",
                "Sentinal Lymph Node Biopsy",
                "Spleen preserving distal pancreatectomy",
                "Splenectomy",
                "Subtotal pancreatectomy",
                "Subtotal thyroidectomy",
                "Thoracotomy (Open & Shut)",
                "Total gastrectomy",
                "Total gastrectomy with extended lymphadenectomy",
                "Total pancreatectomy",
                "Total thyroidectomy",
                "Transhiatal esophagectomy",
                "Triple bypass of pancreas",
                "Wedge/localised gastric resection",
                "Wide Local Excision"
              ],
              "right": [
                "Axillary Clearance",
                "Axillary lymph nodes sampling",
                "Biopsy",
                "Bypass Gastrojejunostomy",
                "Cholecystectomy",
                "Cholecystojejunostomy",
                "Completion gastrectomy",
                "Debridement of pancreatic and peripancreatic necrosis",
                "Debulking",
                "Distal subtotal pancreatectomy",
                "Drainage of abscess",
                "Duodenal preserving pancreatic head resection",
                "Endoscopic biopsy",
                "Endoscopic brushings of GIT",
                "Enucleation",
                "Esophageal bypass surgery/jejunostomy only",
                "Exploratory laparotomy",
                "Fine needle aspiration biopsy",
                "Gastric Antrectomy",
                "Hemithyroidectomy",
                "Hepaticojejunostomy",
                "Hysterectomy",
                "Ivor Lewis subtotal esophagectomy",
                "Laparotomy (Open and Shut)",
                "Left thoracoabdominal incision",
                "Lobectomy",
                "Lymphadenectomy",
                "Mammoplasty",
                "Mastectomy",
                "McKeown esophagectomy",
                "Merendino procedure",
                "Minimally invasive esophagectomy",
                "Near-total thyroidectomy",
                "Pancreaticoduodenectomy",
                "Pancreaticojejunostomy, side-to-side anastomosis",
                "Pneumonectomy",
                "Proximal subtotal gastrectomy",
                "Pylorus-sparing Whipple operation",
                "Radical pancreaticoduodenectomy",
                "Radical prostatectomy",
                "Reexcision",
                "Segmentectomy",
                "Sentinal Lymph Node Biopsy",
                "Spleen preserving distal pancreatectomy",
                "Splenectomy",
                "Subtotal pancreatectomy",
                "Subtotal thyroidectomy",
                "Thoracotomy (Open & Shut)",
                "Total gastrectomy",
                "Total gastrectomy with extended lymphadenectomy",
                "Total pancreatectomy",
                "Total thyroidectomy",
                "Transhiatal esophagectomy",
                "Triple bypass of pancreas",
                "Wedge/localised gastric resection",
                "Wide Local Excision"
              ],
              "data": {
                "added": ["Hysterectomy", "Lymphadenectomy", "Radical prostatectomy"],
                "deleted": []
              }
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "follow_up": {
      "updated": {
        "recurrence_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ii',\n            'stage iia',\n            'stage iab',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        },
        "posttherapy_stage_group": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ii',\n            'stage iia',\n            'stage iab',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    }
  }
}
