{"schemas":{"sample_registration":{"updated":{"program_id":{"meta":{"examples":{"left":"TEST-CA","right":"PACA-AU,BR-CA"},"notes":{"left":"This is the unique id that is assigned to your program.  If you have logged into the platform, this is the Program Id that you see in the Program Services area. For example, TEST-CA is a Program ID.","right":"This is the unique id that is assigned to your program.  If you have logged into the platform, this is the Program Id that you see in the Submission area. For example, PACA-CA is a Program ID."}}},"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"gender":{},"submitter_specimen_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"specimen_tissue_source":{},"specimen_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n     \n      if ($row.tumour_normal_designation != null && $row.specimen_type != null) { \n         const designation = $row.tumour_normal_designation.trim().toLowerCase();\n         const specimen_type = $field.trim().toLowerCase();\n      \n         if (designation === \"normal\") {\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)) {\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when the 'tumour_normal_designation' field is set to Normal.\"};\n            }\n         }\n         else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)) {\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when 'tumour_normal_designation' field is set to Tumour.\"};\n            }\n         }\n      }\n      return result;\n   })"],"right":["(function validate() {\n\n        const row = $row;\n        let result = {valid: true, message: \"Ok\"};\n        \n        const designation = row.tumour_normal_designation.trim().toLowerCase();\n        const specimen_type = $field.trim().toLowerCase();\n        \n        if (designation === \"normal\"){\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\n            }\n        }\n        else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\n            }\n        }\n        return result;\n    })()"]}}},"submitter_sample_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"sample_type":{}},"created":{},"deleted":{}},"donor":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"vital_status":{"restrictions":{"codeList":{"left":["Alive","Deceased"],"right":["Alive","Deceased","Unknown"],"data":{"added":["Unknown"],"deleted":[]}}}},"cause_of_death":{"restrictions":{"codeList":{"left":["Died of cancer","Died of other reasons","Unknown"],"right":["Died of cancer","Died of other reasons"],"data":{"added":[],"deleted":["Unknown"]}},"script":{"left":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        \n        if ($row.vital_status != null) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (!currField && vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n           }\n           else if (currField && vitalStatus != \"deceased\"){\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n           }\n        }\n        else if (($row.vital_status === null) && (currField)) {\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}}},"survival_time":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        \n        if ($row.vital_status != null) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (!currField && vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n           }\n           else if (currField && vitalStatus != \"deceased\"){\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n           }\n        }\n        else if (($row.vital_status === null) && (currField)) {\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]},"range":{"left":{"exclusiveMin":0},"right":null}}},"primary_site":{"meta":{"notes":{"left":"To include multiple values, separate values with a pipe delimiter '|' within your file.","right":null},"examples":{"left":"Breast|Ovary","right":null}},"restrictions":{"codeList":{"left":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva"],"right":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva","Unknown","Not Reported"],"data":{"added":["Unknown","Not Reported"],"deleted":[]}}}},"height":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"weight":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"bmi":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"menopause_status":{"description":{"left":"Indicate the donor's menopause status at the time of primary diagnosis. (Reference: caDSR CDE ID 2434914)","right":"Indicate the donor's menopause status at the time of primary diagnosis. (Codelist reference: NCI CDE ID: 2434914)"},"restrictions":{"codeList":{"left":["Not applicable","Perimenopausal","Postmenopausal","Premenopausal","Unknown"],"right":["Indeterminate or unknown","Not applicable","Perimenopausal","Postmenopausal","Premenopausal"],"data":{"added":["Indeterminate or unknown"],"deleted":["Unknown"]}}}},"age_at_menarche":{"description":{"left":"Indicate the donor's age, in years, at which the first menstruation event occurred. (Reference: NCIt C19666)","right":"Indicate the donor's age of menarche, the first occurrence of menstruation."},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"number_of_pregnancies":{"description":{"left":"Indicate the total number of pregnancy events experienced by the donor. (Reference: NCIt C106551)","right":"Indicate the number of pregnancies a donor has had."},"restrictions":{"range":{"left":{"min":0},"right":null}}},"number_of_children":{"description":{"left":"Indicate the number of children the donor has birthed. (Reference: caDSR CDE ID 2486644)","right":"Indicate the number of children the donor has birthed."},"restrictions":{"range":{"left":{"min":0},"right":null}}}},"created":{"prior_malignancy":{"changeType":"created","description":"Prior malignancy affecting donor.","name":"prior_malignancy","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Prior Malignancy","examples":"C41.1, C16.9, C00.5, D46.9"}},"cancer_type_prior_malignancy":{"changeType":"created","description":"The code to represent the cancer type of a prior malignancy using the WHO ICD-10 code (https://icd.who.int/browse10/2019/en) classification.","name":"cancer_type_prior_malignancy","restrictions":{"regex":"^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"valueType":"string","meta":{"displayName":"Cancer Type Prior Malignancy"}},"age_at_prior_malignancy":{"changeType":"created","description":"If donor has history of prior malignancy, indicate age at previous diagnosis, in years.","name":"age_at_prior_malignancy","valueType":"integer","meta":{"displayName":"Age at Prior Malignancy"}},"laterality_of_prior_malignancy":{"changeType":"created","description":"If donor has history of prior malignancy, indicate laterality of previous diagnosis.","name":"laterality_of_prior_malignancy","valueType":"string","meta":{"displayName":"Laterality at Prior Malignancy"}}},"deleted":{"genetic_disorders":{"changeType":"deleted","description":"Indicate presence of any hereditary genetic disorders. (Reference: Genetic disorder names were standardized using Orphanet (https://www.orpha.net/) and NCI Thesaurus)","name":"genetic_disorders","valueType":"string","isArray":true,"restrictions":{"codeList":["Alpha-1-antitrypsin Deficiency","Ataxia Telangiectasia Syndrome","BAP1-related Tumor Predisposition Syndrome","Beckwith-Wiedemann Syndrome","Birt-Hogg-Dub Syndrome","Bloom Syndrome","Carney Complex","Cowden Syndrome","Familial Adenomatous Polyposis Syndrome (FAP)","Familial Atypical Multiple Mole Melanoma Syndrome (FAMMM)","Familial Gastrointestinal Stromal Tumor","Fanconi Anemia","Gardner Syndrome","Glycogen Storage Disease","Gorlin Syndrome","Hereditary Breast and Ovarian Cancer Syndrome (HBOC)","Hereditary Diffuse Gastric Cancer","Hereditary Leiomyomatosis and Renal Cell Cancer (HLRCC)","Hereditary Pancreatitis","Hereditary Papillary Renal Cell Carcinoma","Hereditary Retinoblastoma","Juvenile Polyposis Syndrome","Li-Fraumeni Syndrome","Lynch Syndrome","Serrated Polyposis Syndrome","Muir-Torre Syndrome","Multiple Endocrine Neoplasia Type 1 (MEN1)","Multiple Endocrine Neoplasia type 2 (MEN2)","MUTYH Polyposis Syndrome","Neurofibromatosis Type 1","Neurofibromatosis Type 2","Peutz-Jeghers Syndrome","PTEN hamartoma Tumor Syndrome","Rubinstein-Taybi Syndrome","Sjogren Syndrome","Tuberous Sclerosis Complex","Turcot Syndrome","Tyrosinemia Type 1","von Hippel-Lindau Syndrome","Werner Syndrome","Wiskott-Aldrich Syndrome","Xeroderma Pigmentosum"]},"meta":{"displayName":"Genetic Disorders","notes":"If the genetic disorder term you use is not included in the controlled terminology, please contact us at https://platform.icgc-argo.org/contact to request it be added. To include multiple values, separate values with a pipe delimiter '|' within your file.","examples":"Familial Adenomatous Polyposis Syndrome (FAP)|Lynch Syndrome"}},"hrt_type":{"changeType":"deleted","description":"Indicate the type of hormone replacement therapy (HRT) the donor has taken or is currently taking.","name":"hrt_type","restrictions":{"codeList":["Combination HRT","Estrogen-only HRT","Injectable","Never taken HRT","Other","Patch","Pill","Unknown"]},"valueType":"string","meta":{"displayName":"Hormone Replacement Therapy Type"}},"hrt_duration":{"changeType":"deleted","description":"If donor has taken hormone replacement therapy (HRT), indicate how long donor has been taking HRT, in months. (Reference: caDSR CDE ID 5365433)","name":"hrt_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormone Replacement Therapy Duration","units":"months","dependsOn":"donor.hrt_type"}},"contraception_type":{"changeType":"deleted","description":"Indicate the type of hormonal contraception the donor has taken or is currently taking. (Reference: caDSR CDE ID 3264234)","name":"contraception_type","restrictions":{"codeList":["Combination pill","Contraceptive implant","Contraceptive patch","Injectable","Intrauterine device","Never used hormonal contraception","Other","Progestin-only pill","Unknown","Vaginal ring"]},"valueType":"string","meta":{"displayName":"Contraception Type"}},"contraception_duration":{"changeType":"deleted","description":"If donor has taken hormonal contraception, indicate duration of use, in months. (Reference: caDSR CDE ID 5206887)","name":"contraception_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormonal Contraception Duration","units":"months","dependsOn":"donor.contraception_type"}}}},"specimen":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_specimen_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_primary_diagnosis_id":{"description":{"left":"Indicate the primary diagnosis event in the clinical timeline that this specimen acquisition was related to.","right":"Indicate the primary diagnosis event in the clinical timeline that this specimen aquisition was related to."},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"pathological_tumour_staging_system":{"meta":{"validationDependency":{"left":true,"right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"data":{"added":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"deleted":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]}}}},"pathological_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":null,"data":{"added":[],"deleted":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}},"pathological_n_category":{"restrictions":{"codeList":{"left":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"],"right":null,"data":{"added":[],"deleted":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}},"pathological_m_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"],"right":null},"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"right":null,"data":{"added":[],"deleted":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"]}}}},"pathological_stage_group":{"description":{"left":"Specify the tumour stage, based on pathological_tumour_staging_system, used to assess the cancer at the time the tumour specimen was resected.","right":"Specify the tumour stage, based on tumour_staging_system, used to assess the cancer at the time the tumour specimen was resected."},"meta":{"notes":{"left":"This field depends on the selected pathological_tumour_staging_system, and is only required if the specimen is a tumour.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","right":"This field depends on the selected pathological staging system, and is only required if the specimen is a tumour."}},"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"right":null,"data":{"added":[],"deleted":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"],"right":null}}},"specimen_acquisition_interval":{"meta":{"notes":{"left":"The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis.","right":"The associated Primary Diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."},"displayName":{"left":"Specimen Acquisition Interval","right":"Specimen Aquisition Interval"}},"restrictions":{"range":{"left":{"min":0},"right":null}}},"tumour_histological_type":{"description":{"left":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","right":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Please refer to the guidelines provided in the ICD-O-3 manual at https://apps.who.int/iris/handle/10665/42344."},"meta":{"validationDependency":{"left":true,"right":null}}},"specimen_anatomic_location":{"description":{"left":"Indicate the ICD-O-3 topography code for the anatomic location of a specimen when it was collected. Refer to the guidelines provided in the ICD-O-3 manual at https://apps.who.int/iris/handle/10665/42344.","right":"Anatomic location of a specimen when it was collected."},"meta":{"examples":{"left":"C50.1,C18","right":null}},"restrictions":{"regex":{"left":"^[C][0-9]{2}(.[0-9]{1})?$","right":null},"codeList":{"right":["Abdomen","Abdominal wall","Acetabulum","Adenoid","Adipose","Adrenal","Adrenal gland","Alveolar ridge","Amniotic fluid","Ampulla of Vater","Anal sphincter","Ankle","Anorectum","Antecubital fossa","Antrum","Anus","Aorta","Aortic body","Appendix","Aqueous fluid","Arm","Artery","Ascending colon","Ascending colon hepatic flexure","Ascites","Auditory canal","Autonomic nervous system","Axilla","Back","Bile duct","Bladder","Blood","Blood vessel","Bone","Bone marrow","Bowel","Brain","Brain stem","Breast","Broad ligament","Bronchiole","Bronchus","Brow","Buccal cavity","Buccal mucosa","Buttock","Calf","Capillary","Cardia","Carina","Carotid artery","Carotid body","Cartilage","Cecum","Cell-line","Central nervous system","Cerebellum","Cerebral cortex","Cerebrospinal fluid","Cerebrum","Cervical spine","Cervix","Chest","Chest wall","Chin","Clavicle","Clitoris","CNS/spinal","Colon","Colon - mucosa only","Colorectal","Common duct","Conjunctiva","Connective tissue","Dermal","Descending colon","Diaphragm","Duodenum","Ear","Ear canal","Ear - pinna (external)","Effusion","Elbow","Endocrine gland","Epididymis","Epidural space","Esophageal - distal","Esophageal - mid","Esophageal - proximal","Esophagogastric junction","Esophagus","Esophagus - mucosa only","Eye","Fallopian tube","Femoral artery","Femoral vein","Femur","Fibroblasts","Fibula","Finger","Floor of mouth","Fluid","Foot","Forearm","Forehead","Foreskin","Frontal cortex","Frontal lobe","Fundus of stomach","Gallbladder","Ganglia","Gastroesophageal junction","Gastrointestinal tract","Groin","Gum","Hand","Hard palate","Head - face or neck NOS","Head and neck","Heart","Hepatic","Hepatic duct","Hepatic flexure","Hepatic vein","Hip","Hippocampus","Humerus","Hypopharynx","Ileum","Ilium","Index finger","Ischium","Islet cells","Jaw","Jejunum","Joint","Kidney","Knee","Lacrimal gland","Large bowel","Laryngopharynx","Larynx","Leg","Leptomeninges","Ligament","Lip","Liver","Lumbar spine","Lung","Lymph node","Lymph node(s) axilla","Lymph node(s) cervical","Lymph node(s) distant","Lymph node(s) epitrochlear","Lymph node(s) femoral","Lymph node(s) hilar","Lymph node(s) iliac-common","Lymph node(s) iliac-external","Lymph node(s) inguinal","Lymph node(s) internal mammary","Lymph node(s) mammary","Lymph node(s) mesenteric","Lymph node(s) occipital","Lymph node(s) paraaortic","Lymph node(s) parotid","Lymph node(s) pelvic","Lymph node(s) popliteal","Lymph node(s) regional","Lymph node(s) retroperitoneal","Lymph node(s) scalene","Lymph node(s) splenic","Lymph node(s) subclavicular","Lymph node(s) submandibular","Lymph node(s) supraclavicular","Lymph nodes(s) mediastinal","Mandible","Maxilla","Mediastinal soft tissue","Mediastinum","Mesentery","Mesothelium","Middle finger","Mitochondria","Muscle","Nails","Nasal cavity","Nasal soft tissue","Nasopharynx","Neck","Nerve","Nerve(s) cranial","Occipital cortex","Ocular orbits","Omentum","Oral cavity","Oral cavity - mucosa only","Oropharynx","Other","Ovary","Palate","Pancreas","Paraspinal ganglion","Parathyroid","Parotid gland","Patella","Pelvis","Penis","Pericardium","Periorbital soft tissue","Peritoneal cavity","Peritoneum","Pharynx","Pineal","Pineal gland","Pituitary gland","Placenta","Pleura","Pleural effusion","Popliteal fossa","Prostate","Pylorus","Rectosigmoid junction","Rectum","Retina","Retro-orbital region","Retroperitoneum","Rib","Ring finger","Round ligament","Sacrum","Salivary gland","Scalp","Scapula","Sciatic nerve","Scrotum","Seminal vesicle","Shoulder","Sigmoid colon","Sinus","Sinus(es) - maxillary","Skeletal muscle","Skin","Skull","Small bowel","Small bowel - mucosa only","Small finger","Soft tissue","Spinal column","Spinal cord","Spleen","Splenic flexure","Sternum","Stomach","Stomach - mucosa only","Subcutaneous tissue","Synovium","Temporal cortex","Tendon","Testis","Thigh","Thoracic spine","Thorax","Throat","Thumb","Thymus","Thyroid","Tibia","Tongue","Tonsil","Tonsil (pharyngeal)","Trachea / major bronchi","Transverse colon","Trunk","Umbilical cord","Ureter","Urethra","Urinary tract","Uterus","Uvula","Vagina","Vas deferens","Vein","Venous","Vertebra","Vulva","White blood cells","Wrist"],"data":["Abdomen","Abdominal wall","Acetabulum","Adenoid","Adipose","Adrenal","Adrenal gland","Alveolar ridge","Amniotic fluid","Ampulla of Vater","Anal sphincter","Ankle","Anorectum","Antecubital fossa","Antrum","Anus","Aorta","Aortic body","Appendix","Aqueous fluid","Arm","Artery","Ascending colon","Ascending colon hepatic flexure","Ascites","Auditory canal","Autonomic nervous system","Axilla","Back","Bile duct","Bladder","Blood","Blood vessel","Bone","Bone marrow","Bowel","Brain","Brain stem","Breast","Broad ligament","Bronchiole","Bronchus","Brow","Buccal cavity","Buccal mucosa","Buttock","Calf","Capillary","Cardia","Carina","Carotid artery","Carotid body","Cartilage","Cecum","Cell-line","Central nervous system","Cerebellum","Cerebral cortex","Cerebrospinal fluid","Cerebrum","Cervical spine","Cervix","Chest","Chest wall","Chin","Clavicle","Clitoris","CNS/spinal","Colon","Colon - mucosa only","Colorectal","Common duct","Conjunctiva","Connective tissue","Dermal","Descending colon","Diaphragm","Duodenum","Ear","Ear canal","Ear - pinna (external)","Effusion","Elbow","Endocrine gland","Epididymis","Epidural space","Esophageal - distal","Esophageal - mid","Esophageal - proximal","Esophagogastric junction","Esophagus","Esophagus - mucosa only","Eye","Fallopian tube","Femoral artery","Femoral vein","Femur","Fibroblasts","Fibula","Finger","Floor of mouth","Fluid","Foot","Forearm","Forehead","Foreskin","Frontal cortex","Frontal lobe","Fundus of stomach","Gallbladder","Ganglia","Gastroesophageal junction","Gastrointestinal tract","Groin","Gum","Hand","Hard palate","Head - face or neck NOS","Head and neck","Heart","Hepatic","Hepatic duct","Hepatic flexure","Hepatic vein","Hip","Hippocampus","Humerus","Hypopharynx","Ileum","Ilium","Index finger","Ischium","Islet cells","Jaw","Jejunum","Joint","Kidney","Knee","Lacrimal gland","Large bowel","Laryngopharynx","Larynx","Leg","Leptomeninges","Ligament","Lip","Liver","Lumbar spine","Lung","Lymph node","Lymph node(s) axilla","Lymph node(s) cervical","Lymph node(s) distant","Lymph node(s) epitrochlear","Lymph node(s) femoral","Lymph node(s) hilar","Lymph node(s) iliac-common","Lymph node(s) iliac-external","Lymph node(s) inguinal","Lymph node(s) internal mammary","Lymph node(s) mammary","Lymph node(s) mesenteric","Lymph node(s) occipital","Lymph node(s) paraaortic","Lymph node(s) parotid","Lymph node(s) pelvic","Lymph node(s) popliteal","Lymph node(s) regional","Lymph node(s) retroperitoneal","Lymph node(s) scalene","Lymph node(s) splenic","Lymph node(s) subclavicular","Lymph node(s) submandibular","Lymph node(s) supraclavicular","Lymph nodes(s) mediastinal","Mandible","Maxilla","Mediastinal soft tissue","Mediastinum","Mesentery","Mesothelium","Middle finger","Mitochondria","Muscle","Nails","Nasal cavity","Nasal soft tissue","Nasopharynx","Neck","Nerve","Nerve(s) cranial","Occipital cortex","Ocular orbits","Omentum","Oral cavity","Oral cavity - mucosa only","Oropharynx","Other","Ovary","Palate","Pancreas","Paraspinal ganglion","Parathyroid","Parotid gland","Patella","Pelvis","Penis","Pericardium","Periorbital soft tissue","Peritoneal cavity","Peritoneum","Pharynx","Pineal","Pineal gland","Pituitary gland","Placenta","Pleura","Pleural effusion","Popliteal fossa","Prostate","Pylorus","Rectosigmoid junction","Rectum","Retina","Retro-orbital region","Retroperitoneum","Rib","Ring finger","Round ligament","Sacrum","Salivary gland","Scalp","Scapula","Sciatic nerve","Scrotum","Seminal vesicle","Shoulder","Sigmoid colon","Sinus","Sinus(es) - maxillary","Skeletal muscle","Skin","Skull","Small bowel","Small bowel - mucosa only","Small finger","Soft tissue","Spinal column","Spinal cord","Spleen","Splenic flexure","Sternum","Stomach","Stomach - mucosa only","Subcutaneous tissue","Synovium","Temporal cortex","Tendon","Testis","Thigh","Thoracic spine","Thorax","Throat","Thumb","Thymus","Thyroid","Tibia","Tongue","Tonsil","Tonsil (pharyngeal)","Trachea / major bronchi","Transverse colon","Trunk","Umbilical cord","Ureter","Urethra","Urinary tract","Uterus","Uvula","Vagina","Vas deferens","Vein","Venous","Vertebra","Vulva","White blood cells","Wrist"]}}},"specimen_storage":{"description":{"left":"Indicate the method of specimen storage for specimen that were not extracted freshly or immediately cultured.","right":"Indicate the method of specimen storage for specimens that were not extracted freshly or immediately cultured."}},"tumour_grading_system":{"meta":{"validationDependency":{"left":true,"right":null}}},"tumour_grade":{"meta":{"notes":{"left":"This field depends on the selected tumour_grading_system, and is only required if the specimen is a tumour.\nPlease refer to the documentation for Tumour Grading Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-grading-classifications","right":"This field depends on the selected tumour grading system, and is only required if the specimen is a tumour."}},"restrictions":{"codeList":{"left":["Low grade","High grade","GX","G1","G2","G3","G4","Low","High","Grade I","Grade II","Grade III","Grade IV","Grade Group 1","Grade Group 2","Grade Group 3","Grade Group 4","Grade Group 5"],"right":["Low grade","High grade","GX","G1","G2","G3","G4","Low","High","I","II","III","IV","1","2","3","4","5"],"data":{"added":["I","II","III","IV","1","2","3","4","5"],"deleted":["Grade I","Grade II","Grade III","Grade IV","Grade Group 1","Grade Group 2","Grade Group 3","Grade Group 4","Grade Group 5"]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'i',\n            'ii',\n            'iii',\n            'iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            '1',\n            '2',\n            '3',\n            '4',\n            '5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}}},"percent_tumour_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percent of tumour cells compared to the number of total cells in a specimen. (Reference: NCIt: C159484)","right":"Indicate a value, in decimals, that represents the percentage of infiltration by tumour cells in a specimen."},"restrictions":{"range":{"left":{"min":0,"max":1},"right":null}}},"percent_proliferating_cells":{"meta":{"notes":{"left":"This field should only be submitted if the specimen is tumour.","right":"This field is only required if the specimen is a tumour."},"core":{"left":null,"right":true}},"restrictions":{"range":{"left":{"min":0,"max":1},"right":null}}},"percent_inflammatory_tissue":{"description":{"left":"Indicate a value, in decimals, that represents the percent of a specimen that is positive for inflammatory markers, including the presence of capillary dilatation, edema and increased leukocytes. (Reference NCIt C159479)","right":"Indicate a value, in decimals, that represents local response to cellular injury, marked by capillary dilatation, edema and leukocyte infiltration; clinically, inflammation is manifest by redness, heat, pain, swelling and loss of function, with the need to heal damaged tissue."},"meta":{"notes":{"left":"This field should only be submitted if the specimen is tumour.","right":"This field is only required if the specimen is a tumour."},"core":{"left":null,"right":true}},"restrictions":{"range":{"left":{"min":0,"max":1},"right":null}}},"percent_stromal_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a tumour specimen but are not malignant such as fibroblasts, vascular structures, etc. (Reference caDSR CDE ID 2841241)","right":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a malignant tumour specimen but are not malignant such as fibroblasts, vascular structures, etc."},"meta":{"notes":{"left":"This field should only be submitted if the specimen is tumour.","right":"This field is only required if the specimen is a tumour."},"core":{"left":null,"right":true}},"restrictions":{"range":{"left":{"min":0,"max":1},"right":null}}},"percent_necrosis":{"description":{"left":"Indicate a value, in decimals, that represents the percent of cells undergoing necrosis compared to the number of total cells present in a tumour specimen. (Reference NCIt C159481)","right":"Indicate a value, in decimals, that represents the percentage of cell death in a malignant tumour specimen."},"meta":{"notes":{"left":"This field should only be submitted if the specimen is tumour.","right":"This field is only required if the specimen is a tumour."},"core":{"left":null,"right":true}},"restrictions":{"range":{"left":{"min":0,"max":1},"right":null}}}},"created":{"central_pathology_confirmed":{"changeType":"created","name":"central_pathology_confirmed","description":"Indicate whether the histologic description of tissue or cells was confirmed by a pathology review of frozen or formalin fixed slide(s) completed after the diagnostic pathology review of the tumour sample used to extract analyte(s).","valueType":"string","meta":{"core":true,"dependsOn":"sample_registration.tumour_normal_designation","notes":"This field is only required if the specimen is a tumour.","displayName":"Central Pathology Confirmed"},"restrictions":{"codeList":["Yes","No","Unknown"]}}},"deleted":{"specimen_laterality":{"changeType":"deleted","name":"specimen_laterality","description":"For cancer in a paired organ, indicate the side on which the specimen was obtained. (Reference caDSR 2007875)","valueType":"string","restrictions":{"codeList":["Left","Right","Unknown"]},"meta":{"displayName":"Specimen Laterality"}},"reference_pathology_confirmed":{"changeType":"deleted","name":"reference_pathology_confirmed","description":"Indicate whether the pathological diagnosis was confirmed by a (central) reference pathologist.","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumour_normal_designation","notes":"This field is only required if the specimen is a tumour.","displayName":"Reference Pathology Confirmed"},"restrictions":{"codeList":["Yes","No","Unknown"]}}}},"primary_diagnosis":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_primary_diagnosis_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"age_at_diagnosis":{"description":{"left":"Age that the donor was first diagnosed with cancer, in years. This should be based on the earliest diagnosis of cancer.","right":"Age that the donor was first diagnosed with cancer, in years."},"restrictions":{"range":{"left":{"exclusiveMin":0,"max":90},"right":null}}},"basis_of_diagnosis":{},"number_lymph_nodes_examined":{"description":{"left":"The total number of lymph nodes tested for the presence of cancer. (Reference: caDSR CDE ID 3)","right":"The total number of lymph nodes tested for the presence of cancer. (Reference: NCI CDE ID: 3)"},"meta":{"dependsOn":{"left":"primary_diagnosis.lymph_nodes_examined_status","right":null},"notes":{"left":"This field should only be submitted if 'lymph_nodes_examined_status' is 'Yes'.","right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespacei */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\n      \n      if ($row.lymph_nodes_examined_status != null) {\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\n            if (lymphNodesExaminedStatus === \"yes\") { \n               if (parseInt($field) <= 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if (parseInt($field) > 0) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n         }\n      \n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\n         else if ($name === \"number_lymph_nodes_positive\") {\n            if (lymphNodesExaminedStatus === \"yes\") {\n               if (checkforEmpty($field) || $field == null) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if (parseInt($field) < 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if ($field || $field != null) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n        }\n     }\n     return result;\n})"],"right":null},"range":{"left":{"min":0},"right":null}}},"number_lymph_nodes_positive":{"description":{"left":"The number of regional lymph nodes reported as being positive for tumour metastases. (Reference: caDSR CDE ID 6113694)","right":"The number of regional lymph nodes reported as being positive for tumour metastases. (Reference: NCI CDE ID: 6113694)"},"meta":{"dependsOn":{"left":"primary_diagnosis.lymph_nodes_examined_status","right":null},"notes":{"left":"This field is only required if 'lymph_nodes_examined_status' is 'Yes'.","right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespacei */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\n      \n      if ($row.lymph_nodes_examined_status != null) {\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\n            if (lymphNodesExaminedStatus === \"yes\") { \n               if (parseInt($field) <= 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if (parseInt($field) > 0) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n         }\n      \n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\n         else if ($name === \"number_lymph_nodes_positive\") {\n            if (lymphNodesExaminedStatus === \"yes\") {\n               if (checkforEmpty($field) || $field == null) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if (parseInt($field) < 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if ($field || $field != null) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n        }\n     }\n     return result;\n})"],"right":null},"range":{"left":{"min":0},"right":null},"required":{"left":null,"right":true}}},"clinical_tumour_staging_system":{"meta":{"validationDependency":{"left":true,"right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"data":{"added":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"deleted":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]}},"required":{"left":null,"right":true}}},"clinical_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":null,"data":{"added":[],"deleted":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}},"clinical_n_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the stage of cancer defined by which is the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n   \n    const nCategoriesExclude = ['n0(i-)','n0(i+)','n0(mol-)','n0(mol+)','n4'];\n    \n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n    if ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system != null && !(checkforEmpty($row.clinical_tumour_staging_system))) {\n      if ($row.clinical_tumour_staging_system.trim().toLowerCase() === 'ajcc 6th edition') {\n         if ($field && $field != null && !(checkforEmpty($field)) && nCategoriesExclude.includes($field.trim().toLowerCase())) {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid N category in the clinical_tumour_staging_system '${$row.clinical_tumour_staging_system}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"],"right":null},"codeList":{"left":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"],"right":null,"data":{"added":[],"deleted":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}},"clinical_m_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual. MX is NOT a valid category and cannot be assigned.","right":"The code to represent the stage of cancer defined bythe extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual. MX is NOT a valid category and cannot be assigned."},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"],"right":null},"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"right":null,"data":{"added":[],"deleted":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"]}}}},"clinical_stage_group":{"description":{"left":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage.","right":"Stage group of the tumour, as assigned by the reporting tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)."},"meta":{"notes":{"left":"This field is dependent on the selected clinical_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","right":null},"examples":{"left":"Stage I, Stage IIB","right":null}},"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"data":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"]},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"],"right":null},"required":{"left":null,"right":true}}},"presenting_symptoms":{"meta":{"notes":{"left":"To include multiple values, separate values with a pipe delimiter '|' within your file.","right":"To include multiple values, separate values with a comma ',' within your file."},"examples":{"left":"Anemia|Bloating|Diabetes","right":"Anemia,Bloating,Diabetes"}},"restrictions":{"codeList":{"left":["Abdominal Pain","Anemia","Back Pain","Bloating","Cholangitis","Constipation","Dark Urine","Decreased Appetite","Diabetes","Diarrhea","Fatigue","Fever","Hypoglycemia","Jaundice","Loss of Appetite","Nausea","None","Not Reported","Pale Stools","Pancreatitis","Pruritus/Itchiness","Steatorrhea","Swelling in the Neck","Unknown","Vomiting","Weight Loss"],"right":["Abdominal Pain","Anemia","Back Pain","Bloating","Cholangitis","Constipation","Dark Urine","Decreased Appetite","Diabetes","Diarrhea","Fatigue","Fever","Hypoglycemia","Jaundice","Nausea","None","Pale Stools","Pancreatitis","Pruritus/Itchiness","Steatorrhea","Unknown","Vomiting","Weight Loss"],"data":{"added":[],"deleted":["Loss of Appetite","Not Reported","Swelling in the Neck"]}}}},"performance_status":{"description":{"left":"Indicate the donor's performance status grade at the time of primary diagnosis. (Reference: ECOG performance score grades from https://ecog-acrin.org/resources/ecog-performance-status).","right":"Indicate the donor's performance status grade at the time of primary diagnosis. (Reference source: ECOG performance score grades from https://ecog-acrin.org/resources/ecog-performance-status)."},"meta":{"notes":{"left":"Grade 0: Fully active, able to carry on all pre-disease performance without restriction.\nGrade 1: Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature (ie. Light house work, office work).\nGrade 2: Ambulatory and capable of all selfcare but unable to carry out any work activities; up and about more than 50% of waking hours.\nGrade 3: Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours.\nGrade 4: Completely disabled; cannot carry on any selfcare; totally confined to bed or chair","right":"Grade 0: Fully active, able to carry on all pre-disease performance without restriction \n Grade 1: Restricted in physically strenuous activity but ambulatory and able to carry out work of a light or sedentary nature (ie. Light house work, office work) \n Grade 2: Ambulatory and capable of all selfcare but unable to carry out any work activities; up and about more than 50% of waking hours \n Grade 3: Capable of only limited selfcare; confined to bed or chair more than 50% of waking hours \n Grade 4: Completely disabled; cannot carry on any selfcare; totally confined to bed or chair"}}}},"created":{"stage_suffix":{"changeType":"created","name":"stage_suffix","description":"If necessary, use this field to add any applicable stage suffixes. Stage suffixes may apply to certain staging systems such as Ann Arbour staging system where the four stages are divided into 4 categories (A, B, X and E).","valueType":"string","meta":{"core":true,"dependsOn":"primary_diagnosis.clinical_tumour_staging_system","displayName":"Stage Suffix"}}},"deleted":{"cancer_type_additional_information":{"changeType":"deleted","name":"cancer_type_additional_information","valueType":"string","description":"Additional details related to the cancer type that are not covered by the ICD-10 code provided in the cancer_type field.","meta":{"displayName":"Cancer Type Additional Information"}},"laterality":{"changeType":"deleted","name":"laterality","description":"For cancer in a paired organ, indicate the side of the body on which the primary tumour or cancer first developed at the time of primary diagnosis. (Reference caDSR 827)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not a paired site","Right","Unilateral, side not specified","Unknown"]},"meta":{"displayName":"Laterality"}},"lymph_nodes_examined_status":{"changeType":"deleted","name":"lymph_nodes_examined_status","description":"Indicate if lymph nodes were examined for metastases.","valueType":"string","restrictions":{"required":true,"codeList":["Cannot be determined","No","No lymph nodes found in resected specimen","Not applicable","Yes"]},"meta":{"core":true,"displayName":"Lymph Nodes Examined Status"}}}},"treatment":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_primary_diagnosis_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"treatment_type":{"meta":{"notes":{"left":"Depending on the treatment_type(s) selected, additional treatment details may be required to be submitted. For example, if treatment_type includes 'Chemotherapy', the supplemental Chemotherapy treatment type file is required.\nTo include multiple values, separate values with a pipe delimiter '|' within your file.","right":"Depending on the treatment_type selected, additional treament details may be required to be submitted.  Depending on the treatment_type selected, additional treatment details may be required to be submitted. For example, if treatment_type includes 'Chemotherapy', the supplemental Chemotherapy treatment type file is required."},"examples":{"left":"Chemotherapy|Hormonal therapy","right":null}},"restrictions":{"codeList":{"left":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","No treatment","Other targeting molecular therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery"],"right":["Chemotherapy","Ablation","Bone marrow transplant","Combined chemo+immunotherapy","Combined chemo+radiation therapy","Combined chemo-radiotherapy and surgery","Endoscopic therapy","Hormonal therapy","Immunotherapy","Monoclonal antibodies (for liquid tumours)","No treatment","Other targeting molecular therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgical resection"],"data":{"added":["Combined chemo+immunotherapy","Combined chemo+radiation therapy","Combined chemo-radiotherapy and surgery","Monoclonal antibodies (for liquid tumours)","Surgical resection"],"deleted":["Surgery"]}}}},"is_primary_treatment":{"description":{"left":"Indicate if the treatment was the primary treatment following the initial diagnosis.","right":"Indicate if the treamtment was the primary treatment following the initial diagnosis."},"meta":{"dependsOn":{"left":"treatment.treatment_type","right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"right":null},"required":{"left":null,"right":true}}},"treatment_start_interval":{"description":{"left":"The interval between the primary diagnosis and initiation of treatment, in days.","right":"The interval between primary diagnosis and initiation of treatment, in days."},"meta":{"notes":{"left":"The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis.","right":"The associated Primary Diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."},"dependsOn":{"left":"treatment.treatment_type","right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"right":null},"range":{"left":{"exclusiveMin":0},"right":null},"required":{"left":null,"right":true}}},"treatment_duration":{"meta":{"dependsOn":{"left":"treatment.treatment_type","right":null}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"right":null},"range":{"left":{"exclusiveMin":0},"right":null},"required":{"left":null,"right":true}}}},"created":{"age_at_consent_for_treatment":{"changeType":"created","name":"age_at_consent_for_treatment","description":"Indicate the age of donor when consent was given for treatment.","valueType":"integer","meta":{"displayName":"Age At Consent For Treatment"}},"therapeutic_intent":{"changeType":"created","name":"therapeutic_intent","description":"The therapeutic intent, the reason behind the choice of a therapy, of the treatment.","valueType":"string","restrictions":{"required":true,"codeList":["Adjuvant","Concurrent","Curative","Neoadjuvant","Not applicable","Palliative","Unknown"]},"meta":{"core":true,"displayName":"Therapeutic Intent"}},"response_to_therapy":{"changeType":"created","name":"response_to_therapy","description":"The donors's response to the applied treatment regimen. (Source: RECIST)","valueType":"string","restrictions":{"required":true,"codeList":["Complete response","Disease progression","NED","Partial response","Stable disease"]},"meta":{"core":true,"displayName":"Response to Therapy"}}},"deleted":{"line_of_treatment":{"changeType":"deleted","name":"line_of_treatment","description":"Indicate the line of treatment if it is not the primary treatment.","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'unknown') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Line Of treatment","dependsOn":"treatment.is_primary_treatment","examples":"2,3,4"}},"days_per_cycle":{"changeType":"deleted","name":"days_per_cycle","description":"Indicate the number of days in a treatment cycle.","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Days Per Cycle","dependsOn":"treatment.treatment_type"}},"number_of_cycles":{"changeType":"deleted","name":"number_of_cycles","description":"Indicate the number of treatment cycles.","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Number Of Cycles","dependsOn":"treatment.treatment_type"}},"treatment_intent":{"changeType":"deleted","name":"treatment_intent","description":"Indicate the intended disease outcome for which the treatment is given. (Reference: NCIt C124307)","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"codeList":["Curative","Palliative","Unknown"]},"meta":{"core":true,"displayName":"Treatment Intent","dependsOn":"treatment.treatment_type"}},"treatment_setting":{"changeType":"deleted","name":"treatment_setting","description":"Indicate the treatment setting, which describes the treatment's purpose in relation to the primary treatment. (Reference: NCIt C124308)","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"codeList":["Adjuvant","Advanced/Metastatic","Neoadjuvant","Not applicable"]},"meta":{"core":true,"displayName":"Treatment Setting","dependsOn":"treatment.treatment_type"}},"response_to_treatment":{"changeType":"deleted","name":"response_to_treatment","description":"The donor's response to the applied treatment regimen. (Source: RECIST)","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"codeList":["Complete response","Disease progression","NED","Partial response","Stable disease"]},"meta":{"core":true,"displayName":"Response To Treatment","dependsOn":"treatment.treatment_type"}},"outcome_of_treatment":{"changeType":"deleted","name":"outcome_of_treatment","description":"Indicate the donor's outcome of the prescribed treatment.","valueType":"string","restrictions":{"codeList":["Treatment completed as prescribed","Treatment incomplete due to technical or organizational problems","Treatment incomplete because patient died","Patient choice (stopped or interrupted treatment)","Physician decision (stopped or interrupted treatment)","Treatment stopped due to lack of efficacy (disease progression)","Treatment stopped due to acute toxicity","Other","Not applicable","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Outcome Of Treatment","dependsOn":"treatment.treatment_type"}},"toxicity_type":{"changeType":"deleted","name":"toxicity_type","description":"If the treatment was terminated early due to acute toxicity, indicate whether it was due to hematological toxicity or non-hematological toxicity.","valueType":"string","restrictions":{"codeList":["Hematological","Non-hematological"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\n     \n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Toxicity Type","dependsOn":"treatment.outcome_of_treatment"}},"hematological_toxicity":{"changeType":"deleted","name":"hematological_toxicity","description":"Indicate the hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Anemia - Grade 3","Anemia - Grade 4","Anemia - Grade 5","Neutropenia - Grade 3","Neutropenia - Grade 4","Neutropenia - Grade 5","Thrombocytopenia - Grade 3","Thrombocytopenia - Grade 4","Thrombocytopenia - Grade 5"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Hemotological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}},"non-hematological_toxicity":{"changeType":"deleted","name":"non-hematological_toxicity","description":"Indicate the non-hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Cardiac disorders - Grade 1","Cardiac disorders - Grade 2","Cardiac disorders - Grade 3","Cardiac disorders - Grade 4","Cardiac disorders - Grade 5","Dehydration - Grade 1","Dehydration - Grade 2","Dehydration - Grade 3","Dehydration - Grade 4","Dehydration - Grade 5","Diarrhea - Grade 1","Diarrhea - Grade 2","Diarrhea - Grade 3","Diarrhea - Grade 4","Diarrhea - Grade 5","Fatigue - Grade 1","Fatigue - Grade 2","Fatigue - Grade 3","Nausea - Grade 1","Nausea - Grade 2","Nausea - Grade 3","Vomiting - Grade 1","Vomiting - Grade 2","Vomiting - Grade 3","Vomiting - Grade 4","Vomiting - Grade 5","Weight loss - Grade 1","Weight loss - Grade 2","Weight loss - Grade 3"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Non-hematological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}},"adverse_events":{"changeType":"deleted","name":"adverse_events","description":"Report any treatment related adverse events. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Abdominal distension","Abdominal infection","Abdominal pain","Abdominal soft tissue necrosis","Abducens nerve disorder","Accessory nerve disorder","Acidosis","Acoustic nerve disorder NOS","Activated partial thromboplastin time prolonged","Acute kidney injury","Adrenal insufficiency","Adult respiratory distress syndrome","Agitation","Akathisia","Alanine aminotransferase increased","Alcohol intolerance","Alkaline phosphatase increased","Alkalosis","Allergic reaction","Allergic rhinitis","Alopecia","Amenorrhea","Amnesia","Anal fissure","Anal fistula","Anal hemorrhage","Anal mucositis","Anal necrosis","Anal pain","Anal stenosis","Anal ulcer","Anaphylaxis","Anemia","Ankle fracture","Anorectal infection","Anorexia","Anorgasmia","Anosmia","Anxiety","Aortic injury","Aortic valve disease","Aphonia","Apnea","Appendicitis","Appendicitis perforated","Arachnoiditis","Arterial injury","Arterial thromboembolism","Arteritis infective","Arthralgia","Arthritis","Ascites","Aspartate aminotransferase increased","Aspiration","Asystole","Ataxia","Atelectasis","Atrial fibrillation","Atrial flutter","Atrioventricular block complete","Atrioventricular block first degree","Autoimmune disorder","Avascular necrosis","Azoospermia","Back pain","Bacteremia","Belching","Bile duct stenosis","Biliary anastomotic leak","Biliary fistula","Biliary tract infection","Bladder anastomotic leak","Bladder infection","Bladder perforation","Bladder spasm","Bloating","Blood and lymphatic system disorders - Other, specify","Blood antidiuretic hormone abnormal","Blood bicarbonate decreased","Blood bilirubin increased","Blood corticotrophin decreased","Blood gonadotrophin abnormal","Blood lactate dehydrogenase increased","Blood prolactin abnormal","Blurred vision","Body odor","Bone infection","Bone marrow hypocellular","Bone pain","Brachial plexopathy","Breast atrophy","Breast infection","Breast pain","Bronchial fistula","Bronchial infection","Bronchial obstruction","Bronchial stricture","Bronchopleural fistula","Bronchopulmonary hemorrhage","Bronchospasm","Bruising","Budd-Chiari syndrome","Bullous dermatitis","Burn","Buttock pain","Capillary leak syndrome","Carbon monoxide diffusing capacity decreased","Cardiac arrest","Cardiac disorders - Other, specify","Cardiac troponin I increased","Cardiac troponin T increased","Cataract","Catheter related infection","CD4 lymphocytes decreased","Cecal hemorrhage","Cecal infection","Central nervous system necrosis","Cerebrospinal fluid leakage","Cervicitis infection","Cheilitis","Chest pain - cardiac","Chest wall necrosis","Chest wall pain","Chills","Cholecystitis","Cholesterol high","Chronic kidney disease","Chylothorax","Chylous ascites","Cognitive disturbance","Colitis","Colonic fistula","Colonic hemorrhage","Colonic obstruction","Colonic perforation","Colonic stenosis","Colonic ulcer","Concentration impairment","Conduction disorder","Confusion","Congenital, familial and genetic disorders - Other, specify","Conjunctivitis","Conjunctivitis infective","Constipation","Corneal infection","Corneal ulcer","Cough","CPK increased","Cranial nerve infection","Creatinine increased","Cushingoid","Cyanosis","Cystitis noninfective","Cytokine release syndrome","Cytomegalovirus infection reactivation","Death neonatal","Death NOS","Dehydration","Delayed orgasm","Delayed puberty","Delirium","Delusions","Dental caries","Depressed level of consciousness","Depression","Dermatitis radiation","Device related infection","Diarrhea","Disease progression","Disseminated intravascular coagulation","Dizziness","Dry eye","Dry mouth","Dry skin","Duodenal fistula","Duodenal hemorrhage","Duodenal infection","Duodenal obstruction","Duodenal perforation","Duodenal stenosis","Duodenal ulcer","Dysarthria","Dysesthesia","Dysgeusia","Dysmenorrhea","Dyspareunia","Dyspepsia","Dysphagia","Dysphasia","Dyspnea","Dysuria","Ear and labyrinth disorders - Other, specify","Ear pain","Eczema","Edema cerebral","Edema face","Edema limbs","Edema trunk","Ejaculation disorder","Ejection fraction decreased","Electrocardiogram QT corrected interval prolonged","Electrocardiogram T wave abnormal","Encephalitis infection","Encephalomyelitis infection","Encephalopathy","Endocarditis infective","Endocrine disorders - Other, specify","Endophthalmitis","Enterocolitis","Enterocolitis infectious","Enterovesical fistula","Eosinophilia","Epistaxis","Epstein-Barr virus infection reactivation","Erectile dysfunction","Erythema multiforme","Erythroderma","Esophageal anastomotic leak","Esophageal fistula","Esophageal hemorrhage","Esophageal infection","Esophageal necrosis","Esophageal obstruction","Esophageal pain","Esophageal perforation","Esophageal stenosis","Esophageal ulcer","Esophageal varices hemorrhage","Esophagitis","Euphoria","Exostosis","External ear pain","Extraocular muscle paresis","Extrapyramidal disorder","Eye disorders - Other, specify","Eye infection","Eye pain","Eyelid function disorder","Facial muscle weakness","Facial nerve disorder","Facial pain","Fall","Fallopian tube anastomotic leak","Fallopian tube obstruction","Fallopian tube perforation","Fat atrophy","Fatigue","Febrile neutropenia","Fecal incontinence","Feminization acquired","Fetal growth retardation","Fever","Fibrinogen decreased","Fibrosis deep connective tissue","Flank pain","Flashing lights","Flatulence","Floaters","Flu like symptoms","Flushing","Folliculitis","Forced expiratory volume decreased","Fracture","Fungemia","Gait disturbance","Gallbladder fistula","Gallbladder infection","Gallbladder necrosis","Gallbladder obstruction","Gallbladder pain","Gallbladder perforation","Gastric anastomotic leak","Gastric fistula","Gastric hemorrhage","Gastric necrosis","Gastric perforation","Gastric stenosis","Gastric ulcer","Gastritis","Gastroesophageal reflux disease","Gastrointestinal anastomotic leak","Gastrointestinal disorders - Other, specify","Gastrointestinal fistula","Gastrointestinal pain","Gastrointestinal stoma necrosis","Gastroparesis","General disorders and administration site conditions - Other, specify","Generalized edema","Generalized muscle weakness","Genital edema","GGT increased","Gingival pain","Glaucoma","Glossopharyngeal nerve disorder","Glucose intolerance","Glucosuria","Growth accelerated","Growth hormone abnormal","Growth suppression","Guillain-Barre syndrome","Gum infection","Gynecomastia","Hair color changes","Hair texture abnormal","Hallucinations","Haptoglobin decreased","Head soft tissue necrosis","Headache","Hearing impaired","Heart failure","Hematoma","Hematosalpinx","Hematuria","Hemoglobin increased","Hemoglobinuria","Hemolysis","Hemolytic uremic syndrome","Hemorrhoidal hemorrhage","Hemorrhoids","Hepatic failure","Hepatic hemorrhage","Hepatic infection","Hepatic necrosis","Hepatic pain","Hepatitis B reactivation","Hepatitis viral","Hepatobiliary disorders - Other, specify","Herpes simplex reactivation","Hiccups","Hip fracture","Hirsutism","Hoarseness","Hot flashes","Hydrocephalus","Hypercalcemia","Hyperglycemia","Hyperhidrosis","Hyperkalemia","Hyperkeratosis","Hyperlipidemia","Hypermagnesemia","Hypernatremia","Hyperparathyroidism","Hyperphosphatemia","Hypersomnia","Hypertension","Hyperthyroidism","Hypertrichosis","Hypertriglyceridemia","Hyperuricemia","Hypoalbuminemia","Hypocalcemia","Hypoglossal nerve disorder","Hypoglycemia","Hypohidrosis","Hypokalemia","Hypomagnesemia","Hyponatremia","Hypoparathyroidism","Hypophosphatemia","Hypophysitis","Hypopituitarism","Hypotension","Hypothermia","Hypothyroidism","Hypoxia","Ileal fistula","Ileal hemorrhage","Ileal obstruction","Ileal perforation","Ileal stenosis","Ileal ulcer","Ileus","Immune system disorders - Other, specify","Infections and infestations - Other, specify","Infective myositis","Infusion related reaction","Infusion site extravasation","Injection site reaction","Injury to carotid artery","Injury to inferior vena cava","Injury to jugular vein","Injury to superior vena cava","Injury, poisoning and procedural complications - Other, specify","INR increased","Insomnia","Intestinal stoma leak","Intestinal stoma obstruction","Intestinal stoma site bleeding","Intra-abdominal hemorrhage","Intracranial hemorrhage","Intraoperative arterial injury","Intraoperative breast injury","Intraoperative cardiac injury","Intraoperative ear injury","Intraoperative endocrine injury","Intraoperative gastrointestinal injury","Intraoperative head and neck injury","Intraoperative hemorrhage","Intraoperative hepatobiliary injury","Intraoperative musculoskeletal injury","Intraoperative neurological injury","Intraoperative ocular injury","Intraoperative renal injury","Intraoperative reproductive tract injury","Intraoperative respiratory injury","Intraoperative splenic injury","Intraoperative urinary injury","Intraoperative venous injury","Investigations - Other, specify","Iron overload","Irregular menstruation","Irritability","Ischemia cerebrovascular","Jejunal fistula","Jejunal hemorrhage","Jejunal obstruction","Jejunal perforation","Jejunal stenosis","Jejunal ulcer","Joint effusion","Joint infection","Joint range of motion decreased","Joint range of motion decreased cervical spine","Joint range of motion decreased lumbar spine","Keratitis","Kidney anastomotic leak","Kidney infection","Kyphosis","Lactation disorder","Large intestinal anastomotic leak","Laryngeal edema","Laryngeal fistula","Laryngeal hemorrhage","Laryngeal inflammation","Laryngeal mucositis","Laryngeal obstruction","Laryngeal stenosis","Laryngitis","Laryngopharyngeal dysesthesia","Laryngospasm","Left ventricular systolic dysfunction","Lethargy","Leukemia secondary to oncology chemotherapy","Leukocytosis","Leukoencephalopathy","Libido decreased","Libido increased","Lip infection","Lip pain","Lipase increased","Lipohypertrophy","Localized edema","Lordosis","Lower gastrointestinal hemorrhage","Lung infection","Lymph gland infection","Lymph leakage","Lymph node pain","Lymphedema","Lymphocele","Lymphocyte count decreased","Lymphocyte count increased","Malabsorption","Malaise","Mania","Mediastinal hemorrhage","Mediastinal infection","Memory impairment","Meningismus","Meningitis","Menorrhagia","Metabolism and nutrition disorders - Other, specify","Methemoglobinemia","Middle ear inflammation","Mitral valve disease","Mobitz (type) II atrioventricular block","Mobitz type I","Movements involuntary","Mucosal infection","Mucositis oral","Multi-organ failure","Muscle cramp","Muscle weakness left-sided","Muscle weakness lower limb","Muscle weakness right-sided","Muscle weakness trunk","Muscle weakness upper limb","Musculoskeletal and connective tissue disorder - Other, specify","Musculoskeletal deformity","Myalgia","Myasthenia gravis","Myelitis","Myelodysplastic syndrome","Myocardial infarction","Myocarditis","Myositis","Nail changes","Nail discoloration","Nail infection","Nail loss","Nail ridging","Nasal congestion","Nausea","Neck edema","Neck pain","Neck soft tissue necrosis","Neoplasms benign, malignant and unspecified (incl cysts and polyps) - Other, specify","Nephrotic syndrome","Nervous system disorders - Other, specify","Neuralgia","Neutrophil count decreased","Night blindness","Nipple deformity","Non-cardiac chest pain","Nystagmus","Obesity","Obstruction gastric","Oculomotor nerve disorder","Olfactory nerve disorder","Oligospermia","Optic nerve disorder","Oral cavity fistula","Oral dysesthesia","Oral hemorrhage","Oral pain","Oropharyngeal pain","Osteonecrosis","Osteonecrosis of jaw","Osteoporosis","Otitis externa","Otitis media","Ovarian hemorrhage","Ovarian infection","Ovarian rupture","Ovulation pain","Pain","Pain in extremity","Pain of skin","Palmar-plantar erythrodysesthesia syndrome","Palpitations","Pancreas infection","Pancreatic anastomotic leak","Pancreatic duct stenosis","Pancreatic enzymes decreased","Pancreatic fistula","Pancreatic hemorrhage","Pancreatic necrosis","Pancreatitis","Papilledema","Papulopustular rash","Paresthesia","Paronychia","Paroxysmal atrial tachycardia","Pelvic floor muscle weakness","Pelvic infection","Pelvic pain","Pelvic soft tissue necrosis","Penile infection","Penile pain","Perforation bile duct","Pericardial effusion","Pericardial tamponade","Pericarditis","Perineal pain","Periodontal disease","Periorbital edema","Periorbital infection","Peripheral ischemia","Peripheral motor neuropathy","Peripheral nerve infection","Peripheral sensory neuropathy","Peritoneal infection","Peritoneal necrosis","Personality change","Phantom pain","Pharyngeal anastomotic leak","Pharyngeal fistula","Pharyngeal hemorrhage","Pharyngeal mucositis","Pharyngeal necrosis","Pharyngeal stenosis","Pharyngitis","Pharyngolaryngeal pain","Phlebitis","Phlebitis infective","Photophobia","Photosensitivity","Platelet count decreased","Pleural effusion","Pleural hemorrhage","Pleural infection","Pleuritic pain","Pneumonitis","Pneumothorax","Portal hypertension","Portal vein thrombosis","Postnasal drip","Postoperative hemorrhage","Postoperative thoracic procedure complication","Precocious puberty","Pregnancy loss","Pregnancy, puerperium and perinatal conditions - Other, specify","Premature delivery","Premature menopause","Presyncope","Proctitis","Productive cough","Prolapse of intestinal stoma","Prolapse of urostomy","Prostate infection","Prostatic hemorrhage","Prostatic obstruction","Prostatic pain","Proteinuria","Pruritus","Psychiatric disorders - Other, specify","Psychosis","Pulmonary edema","Pulmonary fibrosis","Pulmonary fistula","Pulmonary hypertension","Pulmonary valve disease","Purpura","Pyramidal tract syndrome","Radiation recall reaction (dermatologic)","Radiculitis","Rash acneiform","Rash maculo-papular","Rash pustular","Rectal anastomotic leak","Rectal fissure","Rectal fistula","Rectal hemorrhage","Rectal mucositis","Rectal necrosis","Rectal obstruction","Rectal pain","Rectal perforation","Rectal stenosis","Rectal ulcer","Recurrent laryngeal nerve palsy","Renal and urinary disorders - Other, specify","Renal calculi","Renal colic","Renal hemorrhage","Reproductive system and breast disorders - Other, specify","Respiratory failure","Respiratory, thoracic and mediastinal disorders - Other, specify","Restlessness","Restrictive cardiomyopathy","Retinal detachment","Retinal tear","Retinal vascular disorder","Retinoic acid syndrome","Retinopathy","Retroperitoneal hemorrhage","Reversible posterior leukoencephalopathy syndrome","Rhabdomyolysis","Rhinitis infective","Rhinorrhea","Right ventricular dysfunction","Rotator cuff injury","Salivary duct inflammation","Salivary gland fistula","Salivary gland infection","Scalp pain","Scleral disorder","Scoliosis","Scrotal infection","Scrotal pain","Seizure","Sepsis","Seroma","Serum amylase increased","Serum sickness","Shingles","Sick sinus syndrome","Sinus bradycardia","Sinus disorder","Sinus pain","Sinus tachycardia","Sinusitis","Sinusoidal obstruction syndrome","Skin and subcutaneous tissue disorders - Other, specify","Skin atrophy","Skin hyperpigmentation","Skin hypopigmentation","Skin induration","Skin infection","Skin papilloma","Skin ulceration","Sleep apnea","Small intestinal anastomotic leak","Small intestinal mucositis","Small intestinal obstruction","Small intestinal perforation","Small intestinal stenosis","Small intestine infection","Small intestine ulcer","Sneezing","Social circumstances - Other, specify","Soft tissue infection","Soft tissue necrosis lower limb","Soft tissue necrosis upper limb","Somnolence","Sore throat","Spasticity","Spermatic cord anastomotic leak","Spermatic cord hemorrhage","Spermatic cord obstruction","Spinal cord compression","Spinal fracture","Splenic infection","Stenosis of gastrointestinal stoma","Stevens-Johnson syndrome","Stoma site infection","Stomach pain","Stomal ulcer","Stridor","Stroke","Subcutaneous emphysema","Sudden death NOS","Suicidal ideation","Suicide attempt","Superficial soft tissue fibrosis","Superficial thrombophlebitis","Superior vena cava syndrome","Supraventricular tachycardia","Surgical and medical procedures - Other, specify","Syncope","Telangiectasia","Tendon reflex decreased","Testicular disorder","Testicular hemorrhage","Testicular pain","Testosterone deficiency","Thromboembolic event","Thrombotic thrombocytopenic purpura","Thrush","Thyroid stimulating hormone increased","Tinnitus","Tooth development disorder","Tooth discoloration","Tooth infection","Toothache","Toxic epidermal necrolysis","Tracheal fistula","Tracheal hemorrhage","Tracheal mucositis","Tracheal obstruction","Tracheal stenosis","Tracheitis","Tracheostomy site bleeding","Transient ischemic attacks","Treatment related secondary malignancy","Tremor","Tricuspid valve disease","Trigeminal nerve disorder","Trismus","Trochlear nerve disorder","Tumor hemorrhage","Tumor lysis syndrome","Tumor pain","Typhlitis","Unequal limb length","Upper gastrointestinal hemorrhage","Upper respiratory infection","Ureteric anastomotic leak","Urethral anastomotic leak","Urethral infection","Urinary fistula","Urinary frequency","Urinary incontinence","Urinary retention","Urinary tract infection","Urinary tract obstruction","Urinary tract pain","Urinary urgency","Urine discoloration","Urine output decreased","Urostomy leak","Urostomy obstruction","Urostomy site bleeding","Urostomy stenosis","Urticaria","Uterine anastomotic leak","Uterine fistula","Uterine hemorrhage","Uterine infection","Uterine obstruction","Uterine pain","Uterine perforation","Uveitis","Vaccination complication","Vaccination site lymphadenopathy","Vaginal anastomotic leak","Vaginal discharge","Vaginal dryness","Vaginal fistula","Vaginal hemorrhage","Vaginal infection","Vaginal inflammation","Vaginal obstruction","Vaginal pain","Vaginal perforation","Vaginal stricture","Vagus nerve disorder","Vas deferens anastomotic leak","Vascular access complication","Vascular disorders - Other, specify","Vasculitis","Vasovagal reaction","Venous injury","Ventricular arrhythmia","Ventricular fibrillation","Ventricular tachycardia","Vertigo","Vestibular disorder","Viremia","Virilization","Visceral arterial ischemia","Vision decreased","Vital capacity abnormal","Vitreous hemorrhage","Voice alteration","Vomiting","Vulval infection","Watering eyes","Weight gain","Weight loss","Wheezing","White blood cell decreased","Wound complication","Wound dehiscence","Wound infection","Wrist fracture"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Adverse Events","dependsOn":"treatment.treatment_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}},"clinical_trials_database":{"changeType":"deleted","name":"clinical_trials_database","description":"If the donor is a participant in a clinical trial, indicate the clinical trial database where the clinical trial is registered.","valueType":"string","meta":{"display name":"Clinical Trials Database"},"restrictions":{"codeList":["NCI Clinical Trials","EU Clinical Trials Register"]}},"clinical_trial_number":{"changeType":"deleted","name":"clinical_trial_number","description":"Based on the clinical_trial_database, indicate the unique NCT or EudraCT clinical trial identifier of which the donor is a participant.","valueType":"string","meta":{"display name":"Clinical Trial Number","dependsOn":"treatment.clinical_trials_database","examples":"2016-002120-83,NCT02465060"},"restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      //regex check for clinical trial number\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\n\n      // list of valid clinical trial databases\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\n      \n      if ($row.clinical_trials_database && $field) {\n          const trialNumber = $field.trim();\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\n          }\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\n          }\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.`};\n          }\n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\n          result = {valid: true, message: \"Ok\"};\n      }\n      else if ($row.clinical_trials_database && !$field) {\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\n          } \n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\n      }\n      return result;\n    })"]}}}},"chemotherapy":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"drug_rxnormcui":{"meta":{"notes":{"left":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","right":"This field uses a controlled vocabulary gathered from the RxNorm database of drug names provided by the NIH (https://www.nlm.nih.gov/research/umls/rxnorm)."}}},"drug_name":{"description":{"left":"Name of agent or drug administered to donor as part of the treatment regimen.","right":"Name of agent or drug administered to patient as part of the treatment regimen."},"meta":{"notes":{"left":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","right":"This field uses a controlled vocabulary gathered from the RxNorm database of drug names provided by the NIH (https://www.nlm.nih.gov/research/umls/rxnorm)."}}},"cumulative_drug_dosage":{"description":{"left":"Indicate the total actual drug dose in the same units specified in chemotherapy_dosage_units.","right":"Indicate the total drug dose in the same units specified in chemotherapy_dosage_units."},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}}},"created":{},"deleted":{"dose_intensity_reduction":{"changeType":"deleted","name":"dose_intensity_reduction","description":"Indicate if there was a significant reduction in dose intensity.","valueType":"string","restrictions":{"codeList":["Yes","No","Unknown"]},"meta":{"displayName":"Dose Intensity Reduction"}},"dose_intensity_reduction_event":{"changeType":"deleted","name":"dose_intensity_reduction_event","description":"If there was a signficiant reduction in dose intensity, indicate which event caused it.","valueType":"string","restrictions":{"codeList":["Dose reduction","Dose delay or dose omission","Both"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Dose Intensity Reduction Event","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}},"dose_intensity_reduction_amount":{"changeType":"deleted","name":"dose_intensity_reduction_amount","description":"If there was a significant reduction in dose intensity, indicate the amount.","valueType":"string","restrictions":{"codeList":["<20%","20-49%",">=50%","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Amount of Dose Intensity Reduction","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}}}},"hormone_therapy":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"drug_rxnormcui":{"meta":{"notes":{"left":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","right":"This field uses a controlled vocabulary gathered from the RxNorm database of drug names provided by the NIH (https://www.nlm.nih.gov/research/umls/rxnorm)."}}},"drug_name":{"description":{"left":"Name of agent or drug administered to donor as part of the treatment regimen.","right":"Name of agent or drug administered to patient as part of the treatment regimen."},"meta":{"notes":{"left":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","right":"This field uses a controlled vocabulary gathered from the RxNorm database of drug names provided by the NIH (https://www.nlm.nih.gov/research/umls/rxnorm)."}}},"cumulative_drug_dosage":{"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}}},"created":{},"deleted":{}},"radiation":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"radiation_therapy_fractions":{"description":{"left":"Indicate the total number of fractions delivered as part of treatment.","right":"Indicate the number of total fractions delivered as part of treatment."},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"radiation_therapy_dosage":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"anatomical_site_irradiated":{"description":{"left":"Indicate body region where radiation therapy was administered. (Reference: Cancer Care Ontario)","right":"Indicate localization site where radiation therapy was administered."},"restrictions":{"codeList":{"left":["Abdomen","Body","Brain","Chest","Head","Liver","Lower Limb","Lung","Neck","Pelvis","Skin","Spine","Thorax","Upper Limb"],"right":["Abdomen","Bone","Brain","Extremities","Head","Head-Neck","Liver","Lung","Pelvis","Peritoneum","Spine","Thorax"],"data":{"added":["Bone","Extremities","Head-Neck","Peritoneum"],"deleted":["Body","Chest","Lower Limb","Neck","Skin","Upper Limb"]}}}}},"created":{"application_form":{"changeType":"created","name":"application_form","description":"Indicate type of radiation therapy administered.","valueType":"string","restrictions":{"required":true,"codeList":["External","Internal"]},"meta":{"core":true,"displayName":"Application Form","notes":"Internal application includes Brachytherapy."}}},"deleted":{"radiation_therapy_type":{"changeType":"deleted","name":"radiation_therapy_type","description":"Indicate type of radiation therapy administered.","valueType":"string","restrictions":{"required":true,"codeList":["External","Internal"]},"meta":{"core":true,"displayName":"Type of Radiation Therapy","notes":"Internal application includes Brachytherapy."}}}},"immunotherapy":{"updated":{},"created":{},"deleted":{"program_id":{"changeType":"deleted","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"submitter_treatment_id":{"changeType":"deleted","name":"submitter_treatment_id","valueType":"string","description":"Unique identifier of the treatment, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"treatment.submitter_treatment_id","displayName":"Submitter Treatment ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"immunotherapy_type":{"changeType":"deleted","name":"immunotherapy_type","valueType":"string","description":"Indicate the type of immunotherapy administered to donor.","meta":{"displayName":"Immunotherapy Type","core":true},"restrictions":{"required":true,"codeList":["Cell-based","Immune checkpoint inhibitors","Monoclonal antibodies other than immune checkpoint inhibitors","Other immunomodulatory substances"]}},"drug_rxnormcui":{"changeType":"deleted","name":"drug_rxnormcui","description":"The unique RxNormID assigned to the treatment regimen drug.","valueType":"string","meta":{"validationDependency":true,"core":true,"notes":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","displayName":"RxNormCUI"},"restrictions":{"required":true}},"drug_name":{"changeType":"deleted","name":"drug_name","description":"Name of agent or drug administered to donor as part of the treatment regimen.","valueType":"string","meta":{"validationDependency":true,"core":true,"notes":"This field uses standardized vocabulary from the RxNorm database (https://www.nlm.nih.gov/research/umls/rxnorm), provided by the NIH.\n\nYou can search for RX Norm values through the web interface (https://mor.nlm.nih.gov/RxNav/) or API (https://mor.nlm.nih.gov/download/rxnav/RxNormAPIs.html).\n\nFor example, to find the rxnormcui based on drug name, you can use: https://rxnav.nlm.nih.gov/REST/rxcui.json?name=leucovorin or https://mor.nlm.nih.gov/RxNav/search?searchBy=String&searchTerm=leucovorin","displayName":"Immunotherapy Drug Name"},"restrictions":{"required":true}}}},"follow_up":{"updated":{"submitter_donor_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_follow_up_id":{"description":{"left":"Unique identifier for a follow-up event in a donor's clinical record, assigned by the data provider.","right":"Unique identifier for a follow-up event in a donors clincal record, assigned by the data provider."},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"interval_of_followup":{"meta":{"notes":{"left":"The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis.","right":"The associated Primary Diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."}},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"disease_status_at_followup":{"description":{"left":"Indicate the donor's disease status at time of follow-up. (Reference: RECIST)","right":"Indicate the donor's disease status at time of follow-up."},"restrictions":{"codeList":{"left":["Complete remission","Distant progression","Loco-regional progression","No evidence of disease","Partial remission","Progression NOS","Relapse or recurrence","Stable"],"right":["Complete remission","Distant progression","Loco-regional progression","No evidence of disease","Partial remission","Relapse","Stable"],"data":{"added":["Relapse"],"deleted":["Progression NOS","Relapse or recurrence"]}}}},"submitter_primary_diagnosis_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,64}","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"weight_at_followup":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"exclusiveMin":0},"right":null}}},"relapse_type":{"meta":{"notes":{"left":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","right":"This field is required to be submitted if disease_status_at_followup indicates progression or relapse."}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"right":null}}},"relapse_interval":{"description":{"left":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","right":"If the donor was clinically disease free following primary treatment and then relapse or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days."},"meta":{"notes":{"left":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","right":"This field is required to be submitted if disease_status_at_followup indicates a progression or relapse value."}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* required field, cannot be null */\n      if ($row.disease_status_at_followup != null) {\n         const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n         const intervalOfFollowup = parseInt($row.interval_of_followup);\n         const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n         const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n  \n         /* checks for a string just consisting of whitespace */\n         const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n         if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n         }\n         else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `The '${$name}' field cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n         }\n         else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            relapseInterval = parseInt($field);\n            if (relapseInterval > intervalOfFollowup) {\n               result = {valid: false, message: `The '${$name}' field cannot be greater than the 'interval_of_followup'.` }\n            }\n         }\n      }\n      return  result;\n  })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus === \"relapse\";\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' set to 'relapse'.` }\n        }\n\n        return result;\n    })()"]},"range":{"left":{"exclusiveMin":0},"right":null}}},"method_of_progression_status":{"description":{"left":"Indicate the method(s) used to confirm the donor's progression or relapse or recurrence disease status. (Reference: caDSR CDE ID 6161031)","right":"Indicate the method(s) used to confirm the donor's progression disease status. (Codelist reference: NCI CDE ID: 6161031)"},"meta":{"notes":{"left":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file.","right":"This field is required to be submitted if disease_status_at_followup indicates progression or relapse"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus.match(/(progression)$/);\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is of type 'progression'.` }\n        }\n\n        return result;\n    })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus === \"relapse\";\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' set to 'relapse'.` }\n        }\n\n        return result;\n    })()"]}}},"recurrence_tumour_staging_system":{"meta":{"notes":{"left":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","right":"This field is required to be submitted if disease_status_at_followup indicates progression or relapse."}},"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"data":{"added":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"deleted":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })","(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus.match(/(progression)$/);\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is of type 'progression'.` }\n        }\n\n        return result;\n    })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus === \"relapse\";\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' set to 'relapse'.` }\n        }\n\n        return result;\n    })()"]}}},"recurrence_t_category":{"description":{"left":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":null,"data":{"added":[],"deleted":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}},"recurrence_n_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the stage of cancer defined by which is the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"restrictions":{"codeList":{"left":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"],"right":null,"data":{"added":[],"deleted":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}},"recurrence_m_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the stage of cancer defined bythe extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"],"right":null},"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"right":null,"data":{"added":[],"deleted":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"]}}}},"recurrence_stage_group":{"description":{"left":"The code to represent the stage group of the tumour, as assigned by the reporting recurrence_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) at the time of retreatment for a recurrence or disease progression.","right":"The code to represent the stage group of the tumour, as assigned by the reporting recurrence_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery."},"meta":{"notes":{"left":"This field is dependent on the selected recurrence_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","right":null}},"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"right":null,"data":{"added":[],"deleted":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"],"right":null}}},"posttherapy_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"data":{"added":["Binet","Rai","FIGO","Ann Arbor","Murphy","Lugano","AJCC 8th Edition","AJCC 7th Edition","AJCC 6th Edition","AJCC 5th Edition","AJCC 4th Edition","AJCC 3rd Edition","AJCC 2nd Edition","AJCC 1st Edition"],"deleted":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]}}}},"posttherapy_t_category":{"meta":{"dependsOn":{"left":"follow_up.posttherapy_tumour_staging_system","right":"follow_up.post_therapy_tumour_staging_system"}},"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":null,"data":{"added":[],"deleted":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}},"posttherapy_n_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the stage of cancer defined by which is the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"meta":{"dependsOn":{"left":"follow_up.posttherapy_tumour_staging_system","right":"follow_up.post_therapy_tumour_staging_system"}},"restrictions":{"codeList":{"left":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"],"right":null,"data":{"added":[],"deleted":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}},"posttherapy_m_category":{"description":{"left":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","right":"The code to represent the stage of cancer defined bythe extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual."},"meta":{"dependsOn":{"left":"follow_up.posttherapy_tumour_staging_system","right":"follow_up.post_therapy_tumour_staging_system"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"],"right":null},"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"right":null,"data":{"added":[],"deleted":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"]}}}},"posttherapy_stage_group":{"meta":{"dependsOn":{"left":"follow_up.posttherapy_tumour_staging_system","right":"follow_up.post_therapy_tumour_staging_system"},"notes":{"left":"This field is dependent on the selected posttherapy_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","right":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"right":null,"data":{"added":[],"deleted":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"],"right":null}}}},"created":{"anatomic_site_progression_or_recurrences":{"changeType":"created","description":"Indicate the anatomic site where disease progression or recurrence occurred. (Codelist reference: NCI CDE ID: 4742851)","name":"anatomic_site_progression_or_recurrences","valueType":"string","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus.match(/(progression)$/);\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is of type 'progression'.` }\n        }\n\n        return result;\n    })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n\n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n\n        const isRequired = diseaseStatus === \"relapse\";\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n        if (isRequired && (!$field || checkforEmpty($field))){\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' set to 'relapse'.` }\n        }\n\n        return result;\n    })()"],"codeList":["Abdomen","Abdominal wall","Acetabulum","Adenoid","Adipose","Adrenal","Adrenal gland","Alveolar ridge","Amniotic fluid","Ampulla of Vater","Anal sphincter","Ankle","Anorectum","Antecubital fossa","Antrum","Anus","Aorta","Aortic body","Appendix","Aqueous fluid","Arm","Artery","Ascending colon","Ascending colon hepatic flexure","Ascites","Auditory canal","Autonomic nervous system","Axilla","Back","Bile duct","Bladder","Blood","Blood vessel","Bone","Bone marrow","Bowel","Brain","Brain stem","Breast","Broad ligament","Bronchiole","Bronchus","Brow","Buccal cavity","Buccal mucosa","Buttock","Calf","Capillary","Cardia","Carina","Carotid artery","Carotid body","Cartilage","Cecum","Cell-line","Central nervous system","Cerebellum","Cerebral cortex","Cerebrospinal fluid","Cerebrum","Cervical spine","Cervix","Chest","Chest wall","Chin","Clavicle","Clitoris","CNS/spinal","Colon","Colon - mucosa only","Colorectal","Common duct","Conjunctiva","Connective tissue","Dermal","Descending colon","Diaphragm","Duodenum","Ear","Ear canal","Ear - pinna (external)","Effusion","Elbow","Endocrine gland","Epididymis","Epidural space","Esophageal - distal","Esophageal - mid","Esophageal - proximal","Esophagogastric junction","Esophagus","Esophagus - mucosa only","Eye","Fallopian tube","Femoral artery","Femoral vein","Femur","Fibroblasts","Fibula","Finger","Floor of mouth","Fluid","Foot","Forearm","Forehead","Foreskin","Frontal cortex","Frontal lobe","Fundus of stomach","Gallbladder","Ganglia","Gastroesophageal junction","Gastrointestinal tract","Groin","Gum","Hand","Hard palate","Head - face or neck NOS","Head and neck","Heart","Hepatic","Hepatic duct","Hepatic flexure","Hepatic vein","Hip","Hippocampus","Humerus","Hypopharynx","Ileum","Ilium","Index finger","Ischium","Islet cells","Jaw","Jejunum","Joint","Kidney","Knee","Lacrimal gland","Large bowel","Laryngopharynx","Larynx","Leg","Leptomeninges","Ligament","Lip","Liver","Lumbar spine","Lung","Lymph node","Lymph node(s) axilla","Lymph node(s) cervical","Lymph node(s) distant","Lymph node(s) epitrochlear","Lymph node(s) femoral","Lymph node(s) hilar","Lymph node(s) iliac-common","Lymph node(s) iliac-external","Lymph node(s) inguinal","Lymph node(s) internal mammary","Lymph node(s) mammary","Lymph node(s) mesenteric","Lymph node(s) occipital","Lymph node(s) paraaortic","Lymph node(s) parotid","Lymph node(s) pelvic","Lymph node(s) popliteal","Lymph node(s) regional","Lymph node(s) retroperitoneal","Lymph node(s) scalene","Lymph node(s) splenic","Lymph node(s) subclavicular","Lymph node(s) submandibular","Lymph node(s) supraclavicular","Lymph nodes(s) mediastinal","Mandible","Maxilla","Mediastinal soft tissue","Mediastinum","Mesentery","Mesothelium","Middle finger","Mitochondria","Muscle","Nails","Nasal cavity","Nasal soft tissue","Nasopharynx","Neck","Nerve","Nerve(s) cranial","Occipital cortex","Ocular orbits","Omentum","Oral cavity","Oral cavity - mucosa only","Oropharynx","Other","Ovary","Palate","Pancreas","Paraspinal ganglion","Parathyroid","Parotid gland","Patella","Pelvis","Penis","Pericardium","Periorbital soft tissue","Peritoneal cavity","Peritoneum","Pharynx","Pineal","Pineal gland","Pituitary gland","Placenta","Pleura","Pleural effusion","Popliteal fossa","Prostate","Pylorus","Rectosigmoid junction","Rectum","Retina","Retro-orbital region","Retroperitoneum","Rib","Ring finger","Round ligament","Sacrum","Salivary gland","Scalp","Scapula","Sciatic nerve","Scrotum","Seminal vesicle","Shoulder","Sigmoid colon","Sinus","Sinus(es) - maxillary","Skeletal muscle","Skin","Skull","Small bowel","Small bowel - mucosa only","Small finger","Soft tissue","Spinal column","Spinal cord","Spleen","Splenic flexure","Sternum","Stomach","Stomach - mucosa only","Subcutaneous tissue","Synovium","Temporal cortex","Tendon","Testis","Thigh","Thoracic spine","Thorax","Throat","Thumb","Thymus","Thyroid","Tibia","Tongue","Tonsil","Tonsil (pharyngeal)","Trachea / major bronchi","Transverse colon","Trunk","Umbilical cord","Ureter","Urethra","Urinary tract","Uterus","Uvula","Vagina","Vas deferens","Vein","Venous","Vertebra","Vulva","White blood cells","Wrist"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates progression or relapse.","displayName":"Anatomic Site Progression or Recurrences"}}},"deleted":{"anatomic_site_progression_or_recurrence":{"changeType":"deleted","description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrence","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}}},"exposure":{"updated":{},"created":{},"deleted":{"program_id":{"changeType":"deleted","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"deleted","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"tobacco_smoking_status":{"changeType":"deleted","description":"Indicate donor's self-reported smoking status and history. (Reference: caDSR CDE ID 2181650)","name":"tobacco_smoking_status","valueType":"string","meta":{"displayName":"Tobacco Smoking Status","notes":"Current smoker: Has smoked 100 cigarettes in their lifetime and who currently smokes. Includes daily smokers and non-daily smokers (also known as occassional smokers). Current reformed smoker for >15 years: A person who currently does not smoke and has been a non-smoker for more than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker for <= 15 years: A person who currently does not smoke and has been a non-smoker for less than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker, duration not specified: A person who currently does not smoke and has been a non-smoker for unspecified time, but has smoked at least 100 cigarettes in their lifetime. Smoking history not documented: Smoking history has not be recorded or is unknown."},"restrictions":{"codeList":["Current reformed smoker for <= 15 years","Current reformed smoker for > 15 years","Current reformed smoker, duration not specified","Current smoker","Lifelong non-smoker (<100 cigarettes smoked in lifetime)","Smoking history not documented"]}},"tobacco_type":{"changeType":"deleted","description":"Indicate the type(s) of tobacco used by donor. (Reference: NCIt CDE C177629)","name":"tobacco_type","valueType":"string","meta":{"displayName":"Tobacco Type","dependsOn":"exposure.tobacco_smoking_status","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Chewing Tobacco","Cigar","Cigarettes","Electronic cigarettes","Pipe","Roll-ups","Snuff","Unknown","Waterpipe"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}},"pack_years_smoked":{"changeType":"deleted","description":"This field applies to cigarettes. Indicate the smoking intensity in Pack Years, where the number of pack years is defined as the number of cigarettes smoked per day times (x) the number of years smoked divided (/) by 20. (Reference: caDSR CDE ID 2955385)","name":"pack_years_smoked","valueType":"number","meta":{"displayName":"Pack Years Smoked","dependsOn":"exposure.tobacco_smoking_status"},"restrictions":{"range":{"min":0},"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}},"alcohol_history":{"changeType":"deleted","description":"Indicate if the donor has consumed at least 12 drinks of any alcoholic beverage in their lifetime. (Reference: caDSR CDE ID 2201918)","name":"alcohol_history","valueType":"string","meta":{"displayName":"Alcohol History"},"restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\n       \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\n         }\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\n         }\n      }\n      return result;\n  })"]}},"alcohol_consumption_category":{"changeType":"deleted","description":"Describe the donor's current level of alcohol use as self-reported by the donor. (Reference: caDSR CDE ID 3457767)","name":"alcohol_consumption_category","valueType":"string","meta":{"displayName":"Alcohol Consumption Category","notes":""},"restrictions":{"codeList":["Daily Drinker","None","Occasional Drinker (< once a month)","Social Drinker (> once a month, < once a week)","Unknown","Weekly Drinker (>=1x a week)"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if (!$field || $field === null || checkforEmpty($field)) {\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\n         }\n      }\n      else {\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\n         }\n      }\n      return result;\n  })"]}},"alcohol_type":{"changeType":"deleted","description":"Indicate the type(s) of alcohol the donor consumes. (Reference: NCIt CDE C173647)","name":"alcohol_type","valueType":"string","meta":{"displayName":"Alcohol Type","dependsOn":"exposure.alcohol_consumption_category","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Beer","Liquor","Other","Unknown","Wine"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ($field && $field != null && !(checkforEmpty($field))) {\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\n            }\n         }\n         else {\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\n            }\n         }\n      }\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\n      }\n      return result;\n  })"]}},"opiate_use":{"changeType":"deleted","description":"Indicate if the donor has ever used opium or other opiates like opium juice, heroin, or Sukhteh regularly (at least weekly over a 6-month period).","name":"opiate_use","valueType":"string","meta":{"displayName":"Opiate Use"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"hot_drinks_consumption":{"changeType":"deleted","description":"Indicate if the donor regularly drinks tea, coffee, or other hot drinks.","name":"hot_drinks_consumption","valueType":"string","meta":{"displayName":"Hot Drink Consumption"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"red_meat_frequency":{"changeType":"deleted","description":"Indicate how frequently the donor eats red meat. Examples of red meat include beef, veal, pork, lamb, mutton, horse, or goat meat.","name":"red_meat_frequency","valueType":"string","meta":{"displayName":"Red Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"processed_meat_frequency":{"changeType":"deleted","description":"Indicate how frequently the patient eats processed meat. Examples of processed meat include hams, salamis, or sausages.","name":"processed_meat_frequency","valueType":"string","meta":{"displayName":"Processed Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"soft_drinks_frequency":{"changeType":"deleted","description":"Indicate the frequency of soft drink consumption by the donor.","name":"soft_drinks_frequency","valueType":"string","meta":{"displayName":"Soft Drink Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_frequency":{"changeType":"deleted","description":"Indicate how many times per week the donor exercises for at least 30 minutes. (Reference: NCIt CDE C25367)","name":"exercise_frequency","valueType":"string","meta":{"displayName":"Exercise Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_intensity":{"changeType":"deleted","description":"Indicate the intensity of exercise. (Reference: NCIt CDE C25539)","name":"exercise_intensity","valueType":"string","meta":{"displayName":"Exercise Intensity","dependsOn":"exposure.exercise_frequency"},"restrictions":{"codeList":["Low: No increase in the heart beat, and no perspiration","Moderate: Increase in the heart beat slightly with some light perspiration","Vigorous: Increase in the heart beat substantially with heavy perspiration"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if ($field != null || !(checkforEmpty($field))) {\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\n         }\n      } \n      return result;\n  })"]}}}},"family_history":{"updated":{},"created":{},"deleted":{"program_id":{"changeType":"deleted","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"deleted","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"family_relative_id":{"changeType":"deleted","description":"Unique identifier of the relative, assigned by the data provider.","name":"family_relative_id","valueType":"string","meta":{"displayName":"Family Relative ID","notes":"This field is required to ensure that family members are identified in unique records.  Ids can be as simple as an incremented numeral to ensure uniqueness."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"relative_with_cancer_history":{"changeType":"deleted","description":"Indicate if donor has any genetic relatives with a history of cancer. (Reference: NCIt C159104, caDSR CDE ID 6161023)","name":"relative_with_cancer_history","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Relative with Cancer History"}},"relationship_type":{"changeType":"deleted","description":"Indicate genetic relationship of the relative to the donor. (Reference: caDSR CDE ID 2179937)","name":"relationship_type","restrictions":{"codeList":["Aunt","Brother","Cousin","Daughter","Father","Grandchild","Grandfather","Grandmother","Maternal Aunt","Maternal Cousin","Maternal Grandfather","Maternal Grandmother","Maternal Half-brother","Maternal Half-sister","Maternal Uncle","Mother","Nephew","Niece","Other","Paternal Aunt","Paternal Cousin","Paternal Grandfather","Paternal Grandmother","Paternal Half-brother","Paternal Half-sister","Paternal Uncle","Sister","Son","Uncle","Unknown"]},"valueType":"string","meta":{"displayName":"Relationship Type"}},"gender_of_relative":{"changeType":"deleted","description":"The self-reported gender of related individual.","name":"gender_of_relative","restrictions":{"codeList":["Female","Male","Other","Unknown"]},"valueType":"string","meta":{"displayName":"Gender of Relative"}},"age_of_relative_at_diagnosis":{"changeType":"deleted","description":"The age (in years) when the donor's relative was first diagnosed. (Reference: caDSR CDE ID 5300571)","name":"age_of_relative_at_diagnosis","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"valueType":"integer","meta":{"dependsOn":"family_history.relative_with_cancer_history","displayName":"Age Of Relative At Diagnosis"}},"cancer_type_code_of_relative":{"changeType":"deleted","name":"cancer_type_code_of_relative","valueType":"string","description":"The code to describe the malignant diagnosis of the donor's relative with a history of cancer using the WHO ICD-10 code (https://icd.who.int/browse10/2019/en) classification.","restrictions":{"regex":"^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"examples":"C41.1,C16.9,C00.5,D46.9","dependsOn":"family_history.relative_with_cancer_history","displayName":"Cancer Type Code (ICD-10) of Relative"}},"relative_vital_status":{"changeType":"deleted","description":"Relative's last known state of living or deceased.","name":"relative_vital_status","restrictions":{"codeList":["Alive","Deceased","Unknown"]},"valueType":"string","meta":{"displayName":"Vital Status of Relative"}},"cause_of_death_of_relative":{"changeType":"deleted","description":"Indicate the cause of the death of the relative.","name":"cause_of_death_of_relative","restrictions":{"codeList":["Died of cancer","Died of other reasons","Unknown"],"script":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        if ($row.relative_vital_status && $row.relative_vital_status != null) {\n           const vitalStatus = $row.relative_vital_status.trim().toLowerCase();\n           if (($field || $field != null) && (vitalStatus === \"alive\" || vitalStatus === \"unknown\")) {\n              result = {valid: false, message: `The '${$name}' field cannot be submitted if the relative's vital_status is '${vitalStatus}'.`}\n           }\n        }\n        else {\n           if ($field || $field != null) {\n              result = {valid: false, message: `The 'relative_vital_status' field must be submitted as 'deceased' if the '${$name}' field is submitted.` }\n           }\n        }\n        return result;\n    })"]},"valueType":"string","meta":{"dependsOn":"family_history.relative_vital_status","displayName":"Cause of Death of Relative"}},"relative_survival_time":{"changeType":"deleted","description":"Indicate how long, in days, the relative survived from the time they were diagnosed with cancer.","name":"relative_survival_time","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"valueType":"integer","meta":{"dependsOn":"family_history.relative_with_cancer_history","units":"days","displayName":"Survival Time Of Relative"}}}},"biomarker":{"updated":{},"created":{},"deleted":{"program_id":{"changeType":"deleted","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"deleted","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"submitter_specimen_id":{"changeType":"deleted","name":"submitter_specimen_id","description":"Unique identifier of the specimen, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_specimen_id","displayName":"Submitter Specimen ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_primary_diagnosis_id":{"changeType":"deleted","name":"submitter_primary_diagnosis_id","valueType":"string","description":"If the biomarker test was done at the time of primary diagnosis, then indicate the associated submitter_primary_diagnosis_id here.","meta":{"displayName":"Submitter Primary Diagnosis ID","primaryId":true,"notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_treatment_id":{"changeType":"deleted","name":"submitter_treatment_id","valueType":"string","description":"If the biomarker test was done at the initiation of a specific treatment regimen, indicate the associated submitter_treatment_id here.","meta":{"primaryId":true,"displayName":"Submitter Treatment ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_follow_up_id":{"changeType":"deleted","description":"If the biomarker test was done during a follow-up event, then indicate the associated submitter_follow_up_id here.","name":"submitter_follow_up_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Follow-Up ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"test_interval":{"changeType":"deleted","description":"If the biomarker test was not associated with a specific specimen or follow-up, primary diagnosis or treatment event, then indicate the interval of time since primary diagnosis that the biomarker test was performed at, in days.","name":"test_interval","valueType":"integer","restrictions":{"range":{"exclusiveMin":0},"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]},"meta":{"validationDependency":true,"primaryId":true,"units":"days","displayName":"Interval Of Test","notes":"This field is required if the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow-up event. The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."}},"ca19-9_level":{"changeType":"deleted","description":"Indicate the level of carbohydrate antigen 19-9 (CA19-9). Carbohydrate antigen 19-9 testing is useful to monitor the response to treatment in pancreatic cancer patients. (Reference: LOINC: 24108-3)","name":"ca19-9_level","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"CA19-9 Level"}},"crp_levels":{"changeType":"deleted","description":"Indicate the quantitative measurement of the amount of CRP, an inflammatory marker, in the blood in mg/L. Used for screening and monitoring for inflammatory disease, infections, and for cardiovascular disease risk assessment. (Reference: NCIt C64548, LOINC 30522-7)","name":"crp_levels","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"C-reactive protein (CRP) Level"}},"ldh_level":{"changeType":"deleted","description":"Indicate the level of lactate dehydrogenase (LDH), in IU/L. An increased amount of LDH in the blood may be a sign of tissue damage and some types of cancer. (Reference: NCI)","name":"ldh_level","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Lactate Dehydrogenase (LDH) Level"}},"anc":{"changeType":"deleted","description":"Indicate the value for a hematology laboratory test for the absolute number of neutrophil cells present in a sample of peripheral blood from a donor, in cells/uL. The ANC may be used to check for infection, inflammation, leukemia and other conditions. Cancer treatment such as chemotherapy may reduce the ANC. (Reference: caDSR CDE ID: 2180198)","name":"anc","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Absolute Neutrophil Count (ANC)"}},"alc":{"changeType":"deleted","description":"Indicate the absolute number of lymphocytes (ALC) found in a given volume of blood, as cells/uL. Lymphocytes help fight off infections and an altered cellular immune function has been demonstrated in patients with cancer. (Reference: NCIt: C113237)","name":"alc","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Absolute Lymphocyte Count (ALC)"}},"brca_carrier":{"changeType":"deleted","description":"Indicate whether donor is a carrier of a mutation in a BRCA gene. A mutation in this gene is associated with an increased risk of familial breast and ovarian cancer.","name":"brca_carrier","valueType":"string","restrictions":{"codeList":["BRCA1","BRCA2","Both BRCA1 and BRCA2","No","Not applicable","Unknown"]},"meta":{"displayName":"BRCA Carrier"}},"er_status":{"changeType":"deleted","description":"Indicate the expression of estrogen receptor (ER). (Reference: NAACCR 3827)","name":"er_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Estrogen Receptor Status"}},"er_allred_score":{"changeType":"deleted","description":"Indicate the Allred score for estrogen receptor. The Allred score is based on the percentage of cells that stain positive by immunohistochemistry (IHC) for estrogen receptor (ER) and the intensity of that staining. (Reference: NAACCR: 3828, caDSR CDE ID 2725288)","name":"er_allred_score","valueType":"string","restrictions":{"codeList":["Total ER Allred score of 1","Total ER Allred score of 2","Total ER Allred score of 3","Total ER Allred score of 4","Total ER Allred score of 5","Total ER Allred score of 6","Total ER Allred score of 7","Total ER Allred score of 8","Not applicable","Unknown"]},"meta":{"displayName":"Estrogen Receptor Allred Score"}},"er_percent_positive":{"changeType":"deleted","name":"er_percent_positive","description":"Indicate a value, in decimals, that represents the percent of cells staining estrogen receptor positive by immunohistochemistry (IHC).","valueType":"number","meta":{"displayName":"Estrogen Receptor Percent Positive"},"restrictions":{"range":{"min":0,"max":1}}},"her2_ihc_status":{"changeType":"deleted","description":"Indicate the expression of human epidermal growth factor receptor-2 (HER2) assessed by immunohistochemistry (IHC). (Reference: AJCC 8th Edition, Chapter 48)","name":"her2_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Equivocal","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HER2 IHC Status","notes":"Negative: 0 or 1+ staining, Equivocal: 2+ staining, Positive: 3+ staining"}},"her2_ish_status":{"changeType":"deleted","description":"Indicate the expression of human epidermal growth factor receptor-2 (HER2) assessed by in situ hybridization (ISH). (Reference: NAACCR: 3854)","name":"her2_ish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Equivocal","Positive","Negative","Not applicable","Unknown"]},"meta":{"displayName":"HER2 ISH Status"}},"pr_status":{"changeType":"deleted","description":"Indicate the expression of progesterone receptor (PR). (Reference: NAACCR 3915)","name":"pr_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Progesterone Receptor Status"}},"pr_allred_score":{"changeType":"deleted","description":"Indicate the Allred score for progesterone receptor. The Allred score is based on the percentage of cells that stain positive by IHC for the progesterone receptor (PR) and the intensity of that staining. (Reference: NAACCR 3916)","name":"pr_allred_score","valueType":"string","restrictions":{"codeList":["Total PR Allred score of 1","Total PR Allred score of 2","Total PR Allred score of 3","Total PR Allred score of 4","Total PR Allred score of 5","Total PR Allred score of 6","Total PR Allred score of 7","Total PR Allred score of 8","Not applicable","Unknown"]},"meta":{"displayName":"Progesterone Receptor Allred Score"}},"pr_percent_positive":{"changeType":"deleted","name":"pr_percent_positive","description":"Indicate a value, in decimals, that represents the percent of cells staining progesterone receptor positive by immunohistochemistry (IHC).","valueType":"number","meta":{"displayName":"Progesterone Receptor Percent Positive"},"restrictions":{"range":{"min":0,"max":1}}},"pd-l1_status":{"changeType":"deleted","description":"Indicate the immunohistochemical test result that refers to the over-expression or lack of expression of programmed death ligand 1 (PD-L1) in a tissue sample of a primary or metastatic malignant neoplasm. (Reference NCIt: C122807)","name":"pd-l1_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"PD-L1 Status"}},"alk_ihc_status":{"changeType":"deleted","description":"Indicate the expression of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by immunohistochemistry (IHC). Abnormalities of ALK can be present in lung cancers.","name":"alk_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ALK IHC Status"}},"alk_ihc_intensity":{"changeType":"deleted","description":"Indicate the intensity of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by immunohistochemistry (IHC). Abnormalities of ALK can be present in lung cancers.","name":"alk_ihc_intensity","valueType":"string","restrictions":{"codeList":["0 (No stain)","+1","+2","+3"]},"meta":{"displayName":"ALK IHC Intensity"}},"alk_fish_status":{"changeType":"deleted","description":"Indicate the expression of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by fluorescence in situ hybridization (FISH). Abnormalities of ALK can be present in lung cancers.","name":"alk_fish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ALK FISH Status"}},"ros1_ihc_status":{"changeType":"deleted","description":"Indicate the expression of receptor lymphoma kinase (ROS1) as assessed by immunohistochemistry (IHC). Gene fusions involving ROS1 can be present in lung cancers.","name":"ros1_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ROS1 IHC Status"}},"pan-trk_ihc_status":{"changeType":"deleted","description":"Indicate the expression of Pan-TRK as assessed by immunohistochemistry (IHC). Pan-TRK IHC screens for neurotrophic tyrosine kinase receptor (NTRK) fusions which have been described in many cancers including lung, thyroid and colorectal cancers.","name":"pan-trk_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Pan-TRK IHC Status"}},"ret_fish_status":{"changeType":"deleted","description":"Indicate the expression of gene arrangement involving the RET proto-oncogene (RET1) as assessed by fluorescence in situ hybridization (FISH). RET gene rearrangements are associated with several different neoplastic conditions. (Reference: NCIt C46005)","name":"ret_fish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"RET1 FISH Status"}},"hpv_ihc_status":{"changeType":"deleted","description":"Indicate the expression of Human papillomavirus (HPV) p16 as assessed by immunohistochemistry (IHC).","name":"hpv_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HPV IHC Status"}},"hpv_dna_status":{"changeType":"deleted","description":"Indicate the expression of Human papillomavirus (HPV) as assessed using a laboratory test in which cells are scraped from the cervix to look for DNA of HPV. (Reference: NCIt C93141)","name":"hpv_dna_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HPV DNA Status"}}}},"comorbidity":{"updated":{},"created":{},"deleted":{"program_id":{"changeType":"deleted","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"prior_malignancy":{"changeType":"deleted","name":"prior_malignancy","description":"Prior malignancy affecting donor.","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Prior Malignancy"}},"laterality_of_prior_malignancy":{"changeType":"deleted","name":"laterality_of_prior_malignancy","description":"If donor has history of prior malignancy, indicate laterality of previous diagnosis. (Reference: caDSR CDE ID 4122391)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not applicable","Right","Unilateral, Side not specified","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n   \n      if ($name === \"laterality_of_prior_malignancy\" && $row.laterality_of_prior_malignancy && $row.laterality_of_prior_malignancy != null && !(checkforEmpty($row.laterality_of_prior_malignancy))) {\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n            result = {valid: false, message: `The 'prior_malignancy' field should be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"dependsOn":"comorbidity.prior_malignancy","displayName":"Laterality at Prior Malignancy"}},"age_at_comorbidity_diagnosis":{"changeType":"deleted","name":"age_at_comorbidity_diagnosis","valueType":"integer","description":"Indicate the age of comorbidity diagnosis, in years.","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"units":"years","dependsOn":"comorbidity.comorbidity_type_code","displayName":"Age at Comorbidity Diagnosis"}},"comorbidity_type_code":{"changeType":"deleted","name":"comorbidity_type_code","valueType":"string","description":"Indicate the code for the comorbidity using the WHO ICD-10 code classification (https://icd.who.int/browse10/2019/en).","restrictions":{"required":true,"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      /* check if ICD-10 code is for neoplasms */\n      const neoplasmCode = (entry) => {return /^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$/.test(decodeURI(entry))};\n\n    \n      if (neoplasmCode($row.comorbidity_type_code)) { \n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n           result = {valid: false, message: `If an ICD-10 code for cancer is submitted in the '${$name}' field, then 'prior_malignancy' should be submitted as 'Yes'.`}\n         }\n      }\n      else if ($row.prior_malignancy && $row.prior_malignancy != null && !(checkforEmpty($row.prior_malignancy)) && $row.prior_malignancy.trim().toLowerCase() === \"yes\" && (!(neoplasmCode($row.comorbidity_type_code)))) {\n        result = {valid: false, message: `If the 'prior_malignancy' field is submitted as 'Yes', then an ICD-10 code for cancer is expected in the '${$name}' field.`}\n      }\n      return result;\n  })"],"regex":"^[A-Z][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"meta":{"primaryId":true,"dependsOn":"comorbidity.prior_malignancy","examples":"E10, C50.1, I11, M06","displayName":"Comorbidity Type Code","notes":"This field is required because it should have a cancer or non-cancer ICD-10 code. This field is marked 'Conditional' because it depends on the value of the `prior_malignancy` field. Both these fields will need to be consistent. If `prior_malignancy` is `Yes`, then an ICD-10 code related to cancer is expected in this field. If `prior_malignancy` is `No`, then an ICD-10 code related to a non-cancer condition is expected in this field."}},"comorbidity_treatment_status":{"changeType":"deleted","name":"comorbidity_treatment_status","valueType":"string","description":"Indicate if the patient is being treated for the comorbidity (this includes prior malignancies).","restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_type_code","displayName":"Comorbidity Treatment"}},"comorbidity_treatment":{"changeType":"deleted","name":"comorbidity_treatment","valueType":"string","description":"Indicate treatment details for the comorbidity (this includes prior malignancies).","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_treatment_status","displayName":"Comorbidity Treatment Type"}}}}}}
