{"schemas":{"sample_registration":{"updated":{"specimen_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n     \r\n      if ($row.tumour_normal_designation != null && $row.specimen_type != null) { \r\n         const designation = $row.tumour_normal_designation.trim().toLowerCase();\r\n         const specimen_type = $field.trim().toLowerCase();\r\n      \r\n         if (designation === \"normal\") {\r\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\r\n            if (!validTypes.includes(specimen_type)) {\r\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when the 'tumour_normal_designation' field is set to Normal.\"};\r\n            }\r\n         }\r\n         else if (designation === \"tumour\") {\r\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\r\n            if (invalidTypes.includes(specimen_type)) {\r\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when 'tumour_normal_designation' field is set to Tumour.\"};\r\n            }\r\n         }\r\n      }\r\n      return result;\r\n   })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n     \n      if ($row.tumour_normal_designation != null && $row.specimen_type != null) { \n         const designation = $row.tumour_normal_designation.trim().toLowerCase();\n         const specimen_type = $field.trim().toLowerCase();\n      \n         if (designation === \"normal\") {\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)) {\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when the 'tumour_normal_designation' field is set to Normal.\"};\n            }\n         }\n         else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)) {\n               result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when 'tumour_normal_designation' field is set to Tumour.\"};\n            }\n         }\n      }\n      return result;\n   })"]}}}},"created":{},"deleted":{}},"donor":{"updated":{"vital_status":{"restrictions":{"codeList":{"left":["Alive","Deceased","Unknown"],"right":["Alive","Deceased"],"data":{"added":[],"deleted":["Unknown"]}}}},"cause_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        \r\n        if ($row.vital_status != null) {\r\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n\r\n           if (!currField && vitalStatus === \"deceased\") {\r\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n           }\r\n           else if (currField && vitalStatus != \"deceased\"){\r\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n           }\r\n        }\r\n        else if (($row.vital_status === null) && (currField)) {\r\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\r\n        }\r\n        return result;\r\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        \n        if ($row.vital_status != null) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (!currField && vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n           }\n           else if (currField && vitalStatus != \"deceased\"){\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n           }\n        }\n        else if (($row.vital_status === null) && (currField)) {\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\n        }\n        return result;\n    })"]}}},"survival_time":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n        \r\n        if ($row.vital_status != null) {\r\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\r\n\r\n           if (!currField && vitalStatus === \"deceased\") {\r\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\r\n           }\r\n           else if (currField && vitalStatus != \"deceased\"){\r\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\r\n           }\r\n        }\r\n        else if (($row.vital_status === null) && (currField)) {\r\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\r\n        }\r\n        return result;\r\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        \n        if ($row.vital_status != null) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (!currField && vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n           }\n           else if (currField && vitalStatus != \"deceased\"){\n              result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n           }\n        }\n        else if (($row.vital_status === null) && (currField)) {\n           result = {valid: false, message: `'${$name}' requires the 'vital_status' field.` }\n        }\n        return result;\n    })"]}}},"age_at_menarche":{"description":{"left":"Indicate the donor's age at which the first menstruation event occurred. (Reference: NCIt C19666)","right":"Indicate the donor's age, in years, at which the first menstruation event occurred. (Reference: NCIt C19666)"}},"hrt_duration":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      const type = $name.trim().toLowerCase().split('_duration')[0];\r\n      const hormoneType = type + `_type`;\r\n   \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\r\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\r\n        }\r\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\r\n           const submittedValue = $row[hormoneType].toLowerCase()\r\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\r\n       }\r\n\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"]}}},"contraception_duration":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      const type = $name.trim().toLowerCase().split('_duration')[0];\r\n      const hormoneType = type + `_type`;\r\n   \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\r\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\r\n        }\r\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\r\n           const submittedValue = $row[hormoneType].toLowerCase()\r\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\r\n       }\r\n\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"]}}}},"created":{},"deleted":{}},"specimen":{"updated":{"pathological_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"pathological_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"pathological_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"pathological_stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    const tCategory = `${stagingName}_t_category`;\r\n    const nCategory = `${stagingName}_n_category`;\r\n    const mCategory = `${stagingName}_m_category`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\r\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\r\n           result = {\r\n              valid: false,\r\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\r\n           };\r\n         }\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}},"tumour_grade":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    if ($row.tumour_grading_system && $field) {\r\n      let codeList = [];\r\n      const tieredGradingList = ['gx','g1','g2','g3'];\r\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\r\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\r\n        case 'two-tier grading system':\r\n          codeList = [\r\n            'low grade',\r\n            'high grade',\r\n          ];\r\n          break;\r\n        case 'three-tier grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'four-tier grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'grading system for gists':\r\n          codeList = [\r\n            'low',\r\n            'high',\r\n          ];\r\n          break;\r\n        case 'grading system for gnets':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'isup grading system':\r\n          codeList = [\r\n            'gx',\r\n            'g1',\r\n            'g2',\r\n            'g3',\r\n            'g4',\r\n          ];\r\n          break;\r\n        case 'who grading system for cns tumours':\r\n          codeList = [\r\n            'grade i',\r\n            'grade ii',\r\n            'grade iii',\r\n            'grade iv',\r\n          ];\r\n          break;\r\n        case 'fnclcc grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'gleason grade group system':\r\n          codeList = [\r\n            'grade group 1',\r\n            'grade group 2',\r\n            'grade group 3',\r\n            'grade group 4',\r\n            'grade group 5',\r\n          ];\r\n          break;\r\n        case 'scarff-bloom-richardson grading system':\r\n          codeList = tieredGradingList;\r\n          break;\r\n        case 'nuclear grading system for dcis':\r\n          codeList = tieredGradingList;\r\n          break;\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase())) {\r\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\r\n          $row.tumour_grading_system\r\n        }', 'tumour_grade' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\r\n         result.valid = false;\r\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\r\n         result.message = msg;\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"]}}},"percent_proliferating_cells":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_inflammatory_tissue":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_stromal_cells":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_necrosis":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}}},"created":{"specimen_laterality":{"changeType":"created","name":"specimen_laterality","description":"For cancer in a paired organ, indicate the side on which the specimen was obtained. (Reference caDSR 2007875)","valueType":"string","restrictions":{"codeList":["Left","Right","Unknown"]},"meta":{"displayName":"Specimen Laterality"}}},"deleted":{}},"primary_diagnosis":{"updated":{"number_lymph_nodes_examined":{"meta":{"notes":{"left":null,"right":"This field should only be submitted if 'lymph_nodes_examined_status' is 'Yes'."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      /* checks for a string just consisting of whitespacei */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\r\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\r\n      \r\n      if ($row.lymph_nodes_examined_status != null) {\r\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\r\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\r\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\r\n            if (lymphNodesExaminedStatus === \"yes\") { \r\n               if (parseInt($field) <= 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if (parseInt($field) > 0) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n         }\r\n      \r\n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\r\n         else if ($name === \"number_lymph_nodes_positive\") {\r\n            if (lymphNodesExaminedStatus === \"yes\") {\r\n               if (checkforEmpty($field) || $field == null) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if (parseInt($field) < 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if ($field || $field != null) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n        }\r\n     }\r\n     return result;\r\n})"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespacei */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\n      \n      if ($row.lymph_nodes_examined_status != null) {\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\n            if (lymphNodesExaminedStatus === \"yes\") { \n               if (parseInt($field) <= 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if (parseInt($field) > 0) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n         }\n      \n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\n         else if ($name === \"number_lymph_nodes_positive\") {\n            if (lymphNodesExaminedStatus === \"yes\") {\n               if (checkforEmpty($field) || $field == null) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if (parseInt($field) < 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if ($field || $field != null) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n        }\n     }\n     return result;\n})"]}}},"number_lymph_nodes_positive":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      /* checks for a string just consisting of whitespacei */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\r\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\r\n      \r\n      if ($row.lymph_nodes_examined_status != null) {\r\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\r\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\r\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\r\n            if (lymphNodesExaminedStatus === \"yes\") { \r\n               if (parseInt($field) <= 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if (parseInt($field) > 0) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n         }\r\n      \r\n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\r\n         else if ($name === \"number_lymph_nodes_positive\") {\r\n            if (lymphNodesExaminedStatus === \"yes\") {\r\n               if (checkforEmpty($field) || $field == null) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if (parseInt($field) < 0) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\r\n                  result = {\r\n                    valid: false,\r\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n                  };\r\n               }\r\n            }\r\n            else if ($field || $field != null) {\r\n               result = {\r\n                 valid: false,\r\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\r\n               };\r\n            }\r\n        }\r\n     }\r\n     return result;\r\n})"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespacei */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      const numberLymphNodesExamined = $row.number_lymph_nodes_examined;\n      const numberLymphNodesPositive = $row.number_lymph_nodes_positive;\n      \n      if ($row.lymph_nodes_examined_status != null) {\n         const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n         /* if lymph nodes were examined and number_lymph_nodes_examined is submitted, it must be a value greater than 0. Otherwise, this field should be 0 or left blank. */\n         if (($name === \"number_lymph_nodes_examined\") && (!(checkforEmpty($field)))) {\n            if (lymphNodesExaminedStatus === \"yes\") { \n               if (parseInt($field) <= 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if (parseInt($field) > 0) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field must be submitted as 0 or left blank if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n         }\n      \n         /* If lymph nodes were examined, number_lymph_nodes_positive must be submitted and it must be a value less than or equal to number_lymph_nodes_examined (if it is submitted). Otherwise, this field should not be submitted.*/\n         else if ($name === \"number_lymph_nodes_positive\") {\n            if (lymphNodesExaminedStatus === \"yes\") {\n               if (checkforEmpty($field) || $field == null) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if (parseInt($field) < 0) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value greater than or equal to 0 if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n               else if ((!(checkforEmpty(numberLymphNodesExamined)) && ((parseInt($field) > parseInt(numberLymphNodesExamined))))) {\n                  result = {\n                    valid: false,\n                    message: `The '${$name}' field must be a value less than or equal to 'number_lymph_nodes_examined' if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n                  };\n               }\n            }\n            else if ($field || $field != null) {\n               result = {\n                 valid: false,\n                 message: `The '${$name}' field should not be submitted if 'lymph_nodes_examined_status' is '${lymphNodesExaminedStatus}'`\n               };\n            }\n        }\n     }\n     return result;\n})"]}}},"clinical_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"clinical_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"clinical_n_category":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n   \n    const nCategoriesExclude = ['n0(i-)','n0(i+)','n0(mol-)','n0(mol+)','n4'];\n    \n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n    if ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system != null && !(checkforEmpty($row.clinical_tumour_staging_system))) {\n      if ($row.clinical_tumour_staging_system.trim().toLowerCase() === 'ajcc 6th edition') {\n         if ($field && $field != null && !(checkforEmpty($field)) && nCategoriesExclude.includes($field.trim().toLowerCase())) {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid N category in the clinical_tumour_staging_system '${$row.clinical_tumour_staging_system}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"clinical_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"clinical_stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    const tCategory = `${stagingName}_t_category`;\r\n    const nCategory = `${stagingName}_n_category`;\r\n    const mCategory = `${stagingName}_m_category`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\r\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\r\n           result = {\r\n              valid: false,\r\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\r\n           };\r\n         }\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}}},"created":{"laterality":{"changeType":"created","name":"laterality","description":"For cancer in a paired organ, indicate the side of the body on which the primary tumour or cancer first developed at the time of primary diagnosis. (Reference caDSR 827)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not a paired site","Right","Unilateral, side not specified","Unknown"]},"meta":{"displayName":"Laterality"}}},"deleted":{}},"treatment":{"updated":{"is_primary_treatment":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"line_of_treatment":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\r\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\r\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\r\n         if (isPrimaryTreatment === 'yes') {\r\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\r\n         }\r\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\r\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\r\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\r\n         }\r\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\r\n         else if (isPrimaryTreatment === 'unknown') {\r\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'unknown') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\n         }\n      }\n      return result;\n  })"]}}},"treatment_start_interval":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"treatment_duration":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"days_per_cycle":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"number_of_cycles":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"treatment_intent":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"treatment_setting":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"response_to_treatment":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"outcome_of_treatment":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"toxicity_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \r\n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\r\n     \r\n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\r\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\r\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\n     \n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\n         }\n      }\n      return result;\n  })"]}}},"hematological_toxicity":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \r\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\r\n     \r\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\r\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"non-hematological_toxicity":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      if ($field != null && !(checkforEmpty($field))) {\r\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \r\n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\r\n     \r\n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\r\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\r\n            }\r\n         }\r\n         else {\r\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"adverse_events":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\r\n \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      if ($row.treatment_type != null) {\r\n         const treatmentType = $row.treatment_type;\r\n         if (!(treatmentType.includes(\"No treatment\"))) {\r\n            if (coreFields.includes($name)) {\r\n               if (!$field || checkforEmpty($field)) {\r\n                  result = {\r\n                     valid: false,\r\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\r\n                  };\r\n               }\r\n            }\r\n         }\r\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\r\n            };\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"clinical_trial_number":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      //regex check for clinical trial number\r\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\r\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\r\n\r\n      // list of valid clinical trial databases\r\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\r\n      \r\n      if ($row.clinical_trials_database && $field) {\r\n          const trialNumber = $field.trim();\r\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\r\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\r\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\r\n          }\r\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\r\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\r\n          }\r\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\r\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.`};\r\n          }\r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\r\n          result = {valid: true, message: \"Ok\"};\r\n      }\r\n      else if ($row.clinical_trials_database && !$field) {\r\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\r\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\r\n          } \r\n      }\r\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\r\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\r\n      }\r\n      return result;\r\n    })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      //regex check for clinical trial number\n      const NCTCheck = (entry) => {return /(^([Nn][Cc][Tt])[0-9]{8})/.test(decodeURI(entry))};\n      const EudraCTCheck = (entry) => {return /(^[2][0-9]{3}-[0-9]{6}-[0-9]{2})/.test(decodeURI(entry))};\n\n      // list of valid clinical trial databases\n      const clinical_dbs = [\"nci clinical trials\", \"eu clinical trials register\"];\n      \n      if ($row.clinical_trials_database && $field) {\n          const trialNumber = $field.trim();\n          const clinicalTrialsDB = $row.clinical_trials_database.trim().toLowerCase();\n          if ((clinicalTrialsDB === \"nci clinical trials\") && (!NCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted NCI clinical trial number is in incorrect format.`};\n          }\n          else if ((clinicalTrialsDB === \"eu clinical trials register\") && (!EudraCTCheck(trialNumber))) {\n            result = {valid: false, message: `The submitted EudraCT clinical trial number is in incorrect format.`};\n          }\n          else if (!clinical_dbs.includes(clinicalTrialsDB)) {\n            result = {valid: false, message: `The submitted clinical trials database '${$row.clinical_trials_database}' is not included in the list of clinical trial database.`};\n          }\n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && (!$field || checkforEmpty($field))) {\n          result = {valid: true, message: \"Ok\"};\n      }\n      else if ($row.clinical_trials_database && !$field) {\n          if (clinical_dbs.includes($row.clinical_trials_database.trim().toLowerCase())) {\n            result = {valid: false, message: `'${$name}' must be provided if 'clinical_trial_database' is set to '${$row.clinical_trials_database}'.`};\n          } \n      }\n      else if ((!$row.clinical_trials_database || checkforEmpty($row.clnical_trials_database)) && $field) {\n         result = { valid: false, message: `The 'clinical_trial_database' field must be submitted if '${$name}' is submitted.`};\n      }\n      return result;\n    })"]}}}},"created":{},"deleted":{}},"radiation":{"updated":{"radiation_therapy_dosage":{"valueType":{"left":"integer","right":"number"}},"anatomical_site_irradiated":{"description":{"left":"Indicate localization site where radiation therapy was administered.","right":"Indicate body region where radiation therapy was administered. (Reference: Cancer Care Ontario)"},"restrictions":{"codeList":{"left":["Abdomen","Bone","Brain","Extremities","Head","Head-Neck","Liver","Lung","Pelvis","Peritoneum","Spine","Thorax"],"right":["Abdomen","Body","Brain","Chest","Head","Liver","Lower Limb","Lung","Neck","Pelvis","Skin","Spine","Thorax","Upper Limb"],"data":{"added":["Body","Chest","Lower Limb","Neck","Skin","Upper Limb"],"deleted":["Bone","Extremities","Head-Neck","Peritoneum"]}}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"relapse_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"]}}},"relapse_interval":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* required field, cannot be null */\r\n      if ($row.disease_status_at_followup != null) {\r\n         const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n         const intervalOfFollowup = parseInt($row.interval_of_followup);\r\n         const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n         const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n  \r\n         /* checks for a string just consisting of whitespace */\r\n         const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n         if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n         }\r\n         else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n            result = {valid: false, message: `The '${$name}' field cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n         }\r\n         else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n            relapseInterval = parseInt($field);\r\n            if (relapseInterval > intervalOfFollowup) {\r\n               result = {valid: false, message: `The '${$name}' field cannot be greater than the 'interval_of_followup'.` }\r\n            }\r\n         }\r\n      }\r\n      return  result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* required field, cannot be null */\n      if ($row.disease_status_at_followup != null) {\n         const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n         const intervalOfFollowup = parseInt($row.interval_of_followup);\n         const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n         const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n  \n         /* checks for a string just consisting of whitespace */\n         const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n         if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n         }\n         else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `The '${$name}' field cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n         }\n         else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            relapseInterval = parseInt($field);\n            if (relapseInterval > intervalOfFollowup) {\n               result = {valid: false, message: `The '${$name}' field cannot be greater than the 'interval_of_followup'.` }\n            }\n         }\n      }\n      return  result;\n  })"]}}},"method_of_progression_status":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"]}}},"anatomic_site_progression_or_recurrence":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"]}}},"recurrence_tumour_staging_system":{"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}},"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })","(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        /* required field, cannot be null */\r\n        if ($row.disease_status_at_followup != null) {\r\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\r\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \r\n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\r\n   \r\n           /* checks for a string just consisting of whitespace */\r\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\r\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\r\n           }\r\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\r\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\r\n           }\r\n        }\r\n        return  result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })","(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"]}}},"recurrence_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"recurrence_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"recurrence_stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    const tCategory = `${stagingName}_t_category`;\r\n    const nCategory = `${stagingName}_n_category`;\r\n    const mCategory = `${stagingName}_m_category`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\r\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\r\n           result = {\r\n              valid: false,\r\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\r\n           };\r\n         }\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}},"posttherapy_tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\r\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\r\n\r\n   \r\n   /* Contingent on the naming system for tumour staging systems to remain consistent */\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_tumour_staging_system')[0];\r\n    const requiredFields = [\r\n      `${stagingName}_m_category`,\r\n      `${stagingName}_n_category`,\r\n      `${stagingName}_t_category`,\r\n    ];\r\n    const convertedRow = Object.fromEntries(\r\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\r\n    );\r\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\r\n    const checkforEmpty = entry => {\r\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\r\n    };\r\n\r\n    /* search for fields with falsy values*/\r\n    const emptyFields = requiredFields.filter(\r\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\r\n    );\r\n\r\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\r\n    if (!($field) && emptyFields.length != requiredFields.length) {\r\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n       result = {\r\n         valid: false,\r\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\r\n            errorFields,\r\n          )}`,\r\n       };\r\n    }\r\n    /* This is not a required field, so first ensure that it exists */\r\n    else if ($field) {\r\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\r\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\r\n            emptyFields,\r\n          )}`,\r\n        };\r\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\r\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\r\n        result = {\r\n          valid: false,\r\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\r\n            errorFields,\r\n          )}`,\r\n        };\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })"]},"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"posttherapy_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"posttherapy_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"posttherapy_stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n    const {$row, $name, $field} = inputs;\r\n    let result = { valid: true, message: 'Ok' };\r\n    const stagingName = $name\r\n      .trim()\r\n      .toLowerCase()\r\n      .split('_stage_group')[0];\r\n\r\n    const stagingSystem = stagingName + `_tumour_staging_system`;\r\n    const tCategory = `${stagingName}_t_category`;\r\n    const nCategory = `${stagingName}_n_category`;\r\n    const mCategory = `${stagingName}_m_category`;\r\n    \r\n    /* checks for a string just consisting of whitespace */\r\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n \r\n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\r\n      result.valid = false;\r\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\r\n      result.message = msg;\r\n    }\r\n    else if (!($row[stagingSystem]) && $field) {\r\n       result.valid = false;\r\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\r\n       result.message = msg;\r\n    }\r\n    else if ($row[stagingSystem] && $field) {\r\n      let codeList = [];\r\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\r\n        case 'revised international staging system (riss)':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii'\r\n          ];\r\n          break;\r\n        case 'lugano staging system':\r\n          codeList = [\r\n             'stage i',\r\n             'stage ia',\r\n             'stage ib',\r\n             'stage ie',\r\n             'stage iea',\r\n             'stage ieb',\r\n             'stage ii',\r\n             'stage ii bulky',\r\n             'stage iia',\r\n             'stage iib',\r\n             'stage iie',\r\n             'stage iiea',\r\n             'stage iieb',\r\n             'stage iii',\r\n             'stage iiia',\r\n             'stage iiib',\r\n             'stage iv',\r\n             'stage iva',\r\n             'stage ivb'\r\n          ];\r\n          break;\r\n        case 'st jude staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ii',\r\n            'stage iii',\r\n            'stage iv'\r\n          ];\r\n          break;\r\n        case 'ann arbor staging system':\r\n          codeList = [\r\n            'stage i',\r\n            'stage ia',\r\n            'stage ie',\r\n            'stage is',\r\n            'stage ies',\r\n            'stage iae',\r\n            'stage ias',\r\n            'stage iaes',\r\n            'stage ib',\r\n            'stage ibe',\r\n            'stage ibs',\r\n            'stage ibes',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iie',\r\n            'stage iis',\r\n            'stage iies',\r\n            'stage iiae',\r\n            'stage iias',\r\n            'stage iiaes',\r\n            'stage iib',\r\n            'stage iibe',\r\n            'stage iibs',\r\n            'stage iibes',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiie',\r\n            'stage iiis',\r\n            'stage iiies',\r\n            'stage iiiae',\r\n            'stage iiias',\r\n            'stage iiiaes',\r\n            'stage iiib',\r\n            'stage iiibe',\r\n            'stage iiibs',\r\n            'stage iiibes',\r\n            'stage iv',\r\n            'stage iva',\r\n            'stage ive',\r\n            'stage ivs',\r\n            'stage ives',\r\n            'stage ivae',\r\n            'stage ivas',\r\n            'stage ivaes',\r\n            'stage ivb',\r\n            'stage ivbe',\r\n            'stage ivbs',\r\n            'stage ivbes'\r\n          ];\r\n          break;\r\n        case 'rai staging system':\r\n          codeList = [\r\n             'stage 0',\r\n             'stage i',\r\n             'stage ii',\r\n             'stage iii',\r\n             'stage iv'\r\n          ];\r\n          break;\r\n        case 'durie-salmon staging system':\r\n          codeList = [\r\n            'stage 1',\r\n            'stage 1a',\r\n            'stage 1b',\r\n            'stage ii',\r\n            'stage iia',\r\n            'stage iib',\r\n            'stage iii',\r\n            'stage iiia',\r\n            'stage iiib'\r\n          ];\r\n          break;\r\n        case 'figo staging system':\r\n          codeList = [\r\n            'stage ia',\r\n            'stage ia1',\r\n            'stage ia2',\r\n            'stage ib',\r\n            'stage ib1',\r\n            'stage ib2',\r\n            'stage iia',\r\n            'stage iab',\r\n            'stage iiia',\r\n            'stage iiib',\r\n            'stage iva',\r\n            'stage ivb'\r\n          ];\r\n          break;\r\n        case 'binet staging system':\r\n          codeList = [\r\n             'stage a',\r\n             'stage b',\r\n             'stage c'\r\n         ];\r\n          break;\r\n        case 'ajcc 8th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        case 'ajcc 7th edition':\r\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\r\n          break;\r\n        default:\r\n          codelist = [];\r\n      }\r\n\r\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\r\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\r\n          $row[stagingSystem]\r\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\r\n          .map(code => `- \"${code}\"`)\r\n          .join('\\n')}`;\r\n\r\n        result.valid = false;\r\n        result.message = msg;\r\n      }\r\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\r\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\r\n           result = {\r\n              valid: false,\r\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\r\n           };\r\n         }\r\n      }\r\n    }\r\n    return result;\r\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}}},"created":{},"deleted":{}},"exposure":{"updated":{"tobacco_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      // check tobacco related fields\r\n      if ($name === 'tobacco_type') {\r\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\r\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\r\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\r\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\r\n            }\r\n         }\r\n         else {\r\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\r\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\r\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\r\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\r\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\r\n        }\r\n     }\r\n     return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}}},"pack_years_smoked":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      // check tobacco related fields\r\n      if ($name === 'tobacco_type') {\r\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\r\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\r\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\r\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\r\n            }\r\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\r\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\r\n            }\r\n         }\r\n         else {\r\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\r\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\r\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\r\n               }\r\n            }\r\n         }\r\n      }\r\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\r\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\r\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\r\n        }\r\n     }\r\n     return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}}},"alcohol_history":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\r\n       \r\n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\r\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\r\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\r\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\r\n         }\r\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\r\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\n       \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\n         }\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\n         }\n      }\n      return result;\n  })"]}}},"alcohol_consumption_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      \r\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n    \r\n      if (!$field || $field === null || checkforEmpty($field)) {\r\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\r\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\r\n         }\r\n      }\r\n      else {\r\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\r\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\r\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if (!$field || $field === null || checkforEmpty($field)) {\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\n         }\n      }\n      else {\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\n         }\n      }\n      return result;\n  })"]}}},"alcohol_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \r\n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\r\n    \r\n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\r\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\r\n         if ($field && $field != null && !(checkforEmpty($field))) {\r\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\r\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\r\n            }\r\n         }\r\n         else {\r\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\r\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\r\n            }\r\n         }\r\n      }\r\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\r\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ($field && $field != null && !(checkforEmpty($field))) {\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\n            }\n         }\n         else {\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\n            }\n         }\n      }\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\n      }\n      return result;\n  })"]}}},"exercise_intensity":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n     \r\n      if ($field != null || !(checkforEmpty($field))) {\r\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\r\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\r\n         }\r\n      } \r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if ($field != null || !(checkforEmpty($field))) {\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\n         }\n      } \n      return result;\n  })"]}}}},"created":{},"deleted":{}},"family_history":{"updated":{"age_of_relative_at_diagnosis":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"cancer_type_code_of_relative":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"cause_of_death_of_relative":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n        const {$row, $name, $field} = inputs;\r\n        let result = {valid: true, message: \"Ok\"};\r\n        \r\n        if ($row.relative_vital_status && $row.relative_vital_status != null) {\r\n           const vitalStatus = $row.relative_vital_status.trim().toLowerCase();\r\n           if (($field || $field != null) && (vitalStatus === \"alive\" || vitalStatus === \"unknown\")) {\r\n              result = {valid: false, message: `The '${$name}' field cannot be submitted if the relative's vital_status is '${vitalStatus}'.`}\r\n           }\r\n        }\r\n        else {\r\n           if ($field || $field != null) {\r\n              result = {valid: false, message: `The 'relative_vital_status' field must be submitted as 'deceased' if the '${$name}' field is submitted.` }\r\n           }\r\n        }\r\n        return result;\r\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        if ($row.relative_vital_status && $row.relative_vital_status != null) {\n           const vitalStatus = $row.relative_vital_status.trim().toLowerCase();\n           if (($field || $field != null) && (vitalStatus === \"alive\" || vitalStatus === \"unknown\")) {\n              result = {valid: false, message: `The '${$name}' field cannot be submitted if the relative's vital_status is '${vitalStatus}'.`}\n           }\n        }\n        else {\n           if ($field || $field != null) {\n              result = {valid: false, message: `The 'relative_vital_status' field must be submitted as 'deceased' if the '${$name}' field is submitted.` }\n           }\n        }\n        return result;\n    })"]}}},"relative_survival_time":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\r\n      if ($row.relative_with_cancer_history != null) {\r\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\r\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\r\n            result = {\r\n               valid: false,\r\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\r\n            };\r\n         }\r\n      }\r\n      else {\r\n         if (currField || currField != null) {\r\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}}},"created":{},"deleted":{}},"biomarker":{"updated":{"submitter_specimen_id":{"meta":{"notes":{"left":null,"right":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      let missing = true;\r\n\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\r\n     \r\n      if (!$field || checkforEmpty($field) || $field === null) { \r\n        for (let idField of identifierFields) {\r\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\r\n            continue;\r\n          }\r\n          else {\r\n            missing = false;\r\n          }\r\n        }\r\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\r\n          result = {\r\n            valid: false,\r\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\r\n        }\r\n      }\r\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\r\n        for (let idField of identifierFields) {\r\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\r\n            result = {\r\n              valid: false,\r\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}}},"submitter_primary_diagnosis_id":{"meta":{"notes":{"left":null,"right":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      let missing = true;\r\n\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\r\n     \r\n      if (!$field || checkforEmpty($field) || $field === null) { \r\n        for (let idField of identifierFields) {\r\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\r\n            continue;\r\n          }\r\n          else {\r\n            missing = false;\r\n          }\r\n        }\r\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\r\n          result = {\r\n            valid: false,\r\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\r\n        }\r\n      }\r\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\r\n        for (let idField of identifierFields) {\r\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\r\n            result = {\r\n              valid: false,\r\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}}},"submitter_treatment_id":{"meta":{"notes":{"left":null,"right":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      let missing = true;\r\n\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\r\n     \r\n      if (!$field || checkforEmpty($field) || $field === null) { \r\n        for (let idField of identifierFields) {\r\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\r\n            continue;\r\n          }\r\n          else {\r\n            missing = false;\r\n          }\r\n        }\r\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\r\n          result = {\r\n            valid: false,\r\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\r\n        }\r\n      }\r\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\r\n        for (let idField of identifierFields) {\r\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\r\n            result = {\r\n              valid: false,\r\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}}},"submitter_follow_up_id":{"meta":{"notes":{"left":null,"right":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      let missing = true;\r\n\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\r\n     \r\n      if (!$field || checkforEmpty($field) || $field === null) { \r\n        for (let idField of identifierFields) {\r\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\r\n            continue;\r\n          }\r\n          else {\r\n            missing = false;\r\n          }\r\n        }\r\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\r\n          result = {\r\n            valid: false,\r\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\r\n        }\r\n      }\r\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\r\n        for (let idField of identifierFields) {\r\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\r\n            result = {\r\n              valid: false,\r\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}}},"test_interval":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      let missing = true;\r\n\r\n      // checks for a string just consisting of whitespace\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n\r\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\r\n     \r\n      if (!$field || checkforEmpty($field) || $field === null) { \r\n        for (let idField of identifierFields) {\r\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\r\n            continue;\r\n          }\r\n          else {\r\n            missing = false;\r\n          }\r\n        }\r\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\r\n          result = {\r\n            valid: false,\r\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\r\n        }\r\n      }\r\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\r\n        for (let idField of identifierFields) {\r\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\r\n            result = {\r\n              valid: false,\r\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}}}},"created":{},"deleted":{}},"comorbidity":{"updated":{"laterality_of_prior_malignancy":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n   \r\n      if ($name === \"laterality_of_prior_malignancy\" && $row.laterality_of_prior_malignancy && $row.laterality_of_prior_malignancy != null && !(checkforEmpty($row.laterality_of_prior_malignancy))) {\r\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\r\n            result = {valid: false, message: `The 'prior_malignancy' field should be submitted as 'Yes' if the '${$name}' field is submitted.`};\r\n         }\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n   \n      if ($name === \"laterality_of_prior_malignancy\" && $row.laterality_of_prior_malignancy && $row.laterality_of_prior_malignancy != null && !(checkforEmpty($row.laterality_of_prior_malignancy))) {\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n            result = {valid: false, message: `The 'prior_malignancy' field should be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"age_at_comorbidity_diagnosis":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]}}},"comorbidity_type_code":{"meta":{"notes":{"left":null,"right":"This field is required because it should have a cancer or non-cancer ICD-10 code. This field is marked 'Conditional' because it depends on the value of the `prior_malignancy` field. Both these fields will need to be consistent. If `prior_malignancy` is `Yes`, then an ICD-10 code related to cancer is expected in this field. If `prior_malignancy` is `No`, then an ICD-10 code related to a non-cancer condition is expected in this field."}},"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      /* check if ICD-10 code is for neoplasms */\r\n      const neoplasmCode = (entry) => {return /^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$/.test(decodeURI(entry))};\r\n\r\n    \r\n      if (neoplasmCode($row.comorbidity_type_code)) { \r\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\r\n           result = {valid: false, message: `If an ICD-10 code for cancer is submitted in the '${$name}' field, then 'prior_malignancy' should be submitted as 'Yes'.`}\r\n         }\r\n      }\r\n      else if ($row.prior_malignancy && $row.prior_malignancy != null && !(checkforEmpty($row.prior_malignancy)) && $row.prior_malignancy.trim().toLowerCase() === \"yes\" && (!(neoplasmCode($row.comorbidity_type_code)))) {\r\n        result = {valid: false, message: `If the 'prior_malignancy' field is submitted as 'Yes', then an ICD-10 code for cancer is expected in the '${$name}' field.`}\r\n      }\r\n      return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      /* check if ICD-10 code is for neoplasms */\n      const neoplasmCode = (entry) => {return /^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$/.test(decodeURI(entry))};\n\n    \n      if (neoplasmCode($row.comorbidity_type_code)) { \n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n           result = {valid: false, message: `If an ICD-10 code for cancer is submitted in the '${$name}' field, then 'prior_malignancy' should be submitted as 'Yes'.`}\n         }\n      }\n      else if ($row.prior_malignancy && $row.prior_malignancy != null && !(checkforEmpty($row.prior_malignancy)) && $row.prior_malignancy.trim().toLowerCase() === \"yes\" && (!(neoplasmCode($row.comorbidity_type_code)))) {\n        result = {valid: false, message: `If the 'prior_malignancy' field is submitted as 'Yes', then an ICD-10 code for cancer is expected in the '${$name}' field.`}\n      }\n      return result;\n  })"]}}},"comorbidity_treatment_status":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]}}},"comorbidity_treatment":{"restrictions":{"script":{"left":["(function validate(inputs) {\r\n      const {$row, $name, $field} = inputs;\r\n      let result = {valid: true, message: \"Ok\"};\r\n\r\n      \r\n      /* checks for a string just consisting of whitespace */\r\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\r\n      const invalidTypes = [\"no\", \"unknown\"]\r\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\r\n   \r\n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\r\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\r\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\r\n         }\r\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\r\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\r\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\r\n            }\r\n         }\r\n     }\r\n     return result;\r\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]}}}},"created":{},"deleted":{}},"chemotherapy":{"updated":{},"created":{"dose_intensity_reduction":{"changeType":"created","name":"dose_intensity_reduction","description":"Indicate if there was a significant reduction in dose intensity.","valueType":"string","restrictions":{"codeList":["Yes","No","Unknown"]},"meta":{"displayName":"Dose Intensity Reduction"}},"dose_intensity_reduction_event":{"changeType":"created","name":"dose_intensity_reduction_event","description":"If there was a signficiant reduction in dose intensity, indicate which event caused it.","valueType":"string","restrictions":{"codeList":["Dose reduction","Dose delay or dose omission","Both"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Dose Intensity Reduction Event","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}},"dose_intensity_reduction_amount":{"changeType":"created","name":"dose_intensity_reduction_amount","description":"If there was a significant reduction in dose intensity, indicate the amount.","valueType":"string","restrictions":{"codeList":["<20%","20-49%",">=50%","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Amount of Dose Intensity Reduction","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}}},"deleted":{}}}}
