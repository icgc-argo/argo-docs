{"schemas":{"donor":{"updated":{"survival_time":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}},"primary_site":{"meta":{"notes":{"left":null,"right":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"examples":{"left":null,"right":"Breast|Ovary"}},"restrictions":{"codeList":{"left":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Not Reported","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva","Unknown"],"right":["Accessory sinuses","Adrenal gland","Anus and anal canal","Base of tongue","Bladder","Bones, joints and articular cartilage of limbs","Bones, joints and articular cartilage of other and unspecified sites","Brain","Breast","Bronchus and lung","Cervix uteri","Colon","Connective, subcutaneous and other soft tissues","Corpus uteri","Esophagus","Eye and adnexa","Floor of mouth","Gallbladder","Gum","Heart, mediastinum, and pleura","Hematopoietic and reticuloendothelial systems","Hypopharynx","Kidney","Larynx","Lip","Liver and intrahepatic bile ducts","Lymph nodes","Meninges","Nasal cavity and middle ear","Nasopharynx","Oropharynx","Other and ill-defined digestive organs","Other and ill-defined sites","Other and ill-defined sites in lip, oral cavity and pharynx","Other and ill-defined sites within respiratory system and intrathoracic organs","Other and unspecified female genital organs","Other and unspecified major salivary glands","Other and unspecified male genital organs","Other and unspecified parts of biliary tract","Other and unspecified parts of mouth","Other and unspecified parts of tongue","Other and unspecified urinary organs","Other endocrine glands and related structures","Ovary","Palate","Pancreas","Parotid gland","Penis","Peripheral nerves and autonomic nervous system","Placenta","Prostate gland","Pyriform sinus","Rectosigmoid junction","Rectum","Renal pelvis","Retroperitoneum and peritoneum","Skin","Small intestine","Spinal cord, cranial nerves, and other parts of central nervous system","Stomach","Testis","Thymus","Thyroid gland","Tonsil","Trachea","Ureter","Uterus, NOS","Vagina","Vulva"],"data":{"added":[],"deleted":["Not Reported","Unknown"]}}}},"height":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"weight":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"bmi":{"valueType":{"left":"integer","right":"number"},"restrictions":{}},"age_at_menarche":{"description":{"left":"Indicate the donor's age of menarche, the first occurrence of menstruation.","right":"Indicate the donor's age at which the first menstruation event occurred. (Reference: NCIt C19666)"},"restrictions":{}},"number_of_pregnancies":{"description":{"left":"Indicate the number of pregnancies a donor has had.","right":"Indicate the total number of pregnancy events experienced by the donor. (Reference: NCIt C106551)"},"restrictions":{}},"number_of_children":{"description":{"left":"Indicate the number of children the donor has birthed.","right":"Indicate the number of children the donor has birthed. (Reference: caDSR CDE ID 2486644)"},"restrictions":{}}},"created":{"genetic_disorders":{"changeType":"created","description":"Indicate presence of any hereditary genetic disorders. (Reference: Genetic disorder names were standardized using Orphanet (https://www.orpha.net/) and NCI Thesaurus)","name":"genetic_disorders","valueType":"string","isArray":true,"restrictions":{"codeList":["Alpha-1-antitrypsin Deficiency","Ataxia Telangiectasia Syndrome","BAP1-related Tumor Predisposition Syndrome","Beckwith-Wiedemann Syndrome","Birt-Hogg-Dub Syndrome","Bloom Syndrome","Carney Complex","Cowden Syndrome","Familial Adenomatous Polyposis Syndrome (FAP)","Familial Atypical Multiple Mole Melanoma Syndrome (FAMMM)","Familial Gastrointestinal Stromal Tumor","Fanconi Anemia","Gardner Syndrome","Glycogen Storage Disease","Gorlin Syndrome","Hereditary Breast and Ovarian Cancer Syndrome (HBOC)","Hereditary Diffuse Gastric Cancer","Hereditary Leiomyomatosis and Renal Cell Cancer (HLRCC)","Hereditary Pancreatitis","Hereditary Papillary Renal Cell Carcinoma","Hereditary Retinoblastoma","Juvenile Polyposis Syndrome","Li-Fraumeni Syndrome","Lynch Syndrome","Serrated Polyposis Syndrome","Muir-Torre Syndrome","Multiple Endocrine Neoplasia Type 1 (MEN1)","Multiple Endocrine Neoplasia type 2 (MEN2)","MUTYH Polyposis Syndrome","Neurofibromatosis Type 1","Neurofibromatosis Type 2","Peutz-Jeghers Syndrome","PTEN hamartoma Tumor Syndrome","Rubinstein-Taybi Syndrome","Sjogren Syndrome","Tuberous Sclerosis Complex","Turcot Syndrome","Tyrosinemia Type 1","von Hippel-Lindau Syndrome","Werner Syndrome","Wiskott-Aldrich Syndrome","Xeroderma Pigmentosum"]},"meta":{"displayName":"Genetic Disorders","notes":"If the genetic disorder term you use is not included in the controlled terminology, please contact us at https://platform.icgc-argo.org/contact to request it be added. To include multiple values, separate values with a pipe delimiter '|' within your file.","examples":"Familial Adenomatous Polyposis Syndrome (FAP)|Lynch Syndrome"}},"hrt_type":{"changeType":"created","description":"Indicate the type of hormone replacement therapy (HRT) the patient has taken or is currently taking.","name":"hrt_type","restrictions":{"codeList":["Combination HRT","Estrogen-only HRT","Injectable","Never taken HRT","Other","Patch","Pill","Unknown"]},"valueType":"string","meta":{"displayName":"Hormone Replacement Therapy Type"}},"hrt_duration":{"changeType":"created","description":"If patient has taken hormone replacement therapy (HRT), indicate how long patient has been taking HRT, in months. (Reference: caDSR CDE ID 5365433)","name":"hrt_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormone Replacement Therapy Duration","units":"months","dependsOn":"donor.hrt_type"}},"contraception_type":{"changeType":"created","description":"Indicate the type of hormonal contraception the patient has taken or is currently taking. (Reference: caDSR CDE ID 3264234)","name":"contraception_type","restrictions":{"codeList":["Combination pill","Contraceptive implant","Contraceptive patch","Injectable","Intrauterine device","Never used hormonal contraception","Other","Progestin-only pill","Unknown","Vaginal ring"]},"valueType":"string","meta":{"displayName":"Contraception Type"}},"contraception_duration":{"changeType":"created","description":"If patient has taken hormonal contraception, indicate duration of use, in months. (Reference: caDSR CDE ID 5206887)","name":"contraception_duration","valueType":"integer","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      const type = $name.trim().toLowerCase().split('_duration')[0];\n      const hormoneType = type + `_type`;\n   \n      if ($field != null && !(checkforEmpty($field))) {\n        if (!$row[hormoneType] || $row[hormoneType] === null || checkforEmpty($row[hormoneType])) {\n           result = { valid: false, message: `Indicate type of ${type} taken in the '${hormoneType}' field if '${$name}' field is submitted.`};\n        }\n        else if ($row[hormoneType].toLowerCase() === \"never taken hrt\" || $row[hormoneType].toLowerCase() === \"never used hormonal contraception\") {\n           const submittedValue = $row[hormoneType].toLowerCase()\n           result = {valid: false, message: `If '${$name}' is submitted, then '${hormoneType}' field cannot be '${submittedValue}'.`};\n       }\n\n      }\n      return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"displayName":"Hormonal Contraception Duration","units":"months","dependsOn":"donor.contraception_type"}}},"deleted":{}},"specimen":{"updated":{"specimen_acquisition_interval":{"restrictions":{"range":{"left":null,"right":{"min":0}}}},"specimen_storage":{"description":{"left":"Indicate the method of specimen storage for specimens that were not extracted freshly or immediately cultured.","right":"Indicate the method of specimen storage for specimen that were not extracted freshly or immediately cultured."}},"percent_tumour_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of infiltration by tumour cells in a specimen.","right":"Indicate a value, in decimals, that represents the percent of tumour cells compared to the number of total cells in a specimen. (Reference: NCIt: C159484)"},"restrictions":{}},"percent_proliferating_cells":{"restrictions":{}},"percent_inflammatory_tissue":{"description":{"left":"Indicate a value, in decimals, that represents local response to cellular injury, marked by capillary dilatation, edema and leukocyte infiltration; clinically, inflammation is manifest by redness, heat, pain, swelling and loss of function, with the need to heal damaged tissue.","right":"Indicate a value, in decimals, that represents the percent of a specimen that is positive for inflammatory markers, including the presence of capillary dilatation, edema and increased leukocytes. (Reference NCIt C159479)"},"restrictions":{}},"percent_stromal_cells":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a malignant tumour specimen but are not malignant such as fibroblasts, vascular structures, etc.","right":"Indicate a value, in decimals, that represents the percentage of reactive cells that are present in a tumour specimen but are not malignant such as fibroblasts, vascular structures, etc. (Reference caDSR CDE ID 2841241)"},"restrictions":{}},"percent_necrosis":{"description":{"left":"Indicate a value, in decimals, that represents the percentage of cell death in a malignant tumour specimen.","right":"Indicate a value, in decimals, that represents the percent of cells undergoing necrosis compared to the number of total cells present in a tumour specimen. (Reference NCIt C159481)"},"restrictions":{}}},"created":{},"deleted":{}},"primary_diagnosis":{"updated":{"age_at_diagnosis":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0,"max":90}}}},"number_lymph_nodes_examined":{"restrictions":{"range":{"left":null,"right":{"min":0}}}},"number_lymph_nodes_positive":{"restrictions":{"range":{"left":null,"right":{"min":0}}}},"clinical_stage_group":{"description":{"left":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.).","right":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage."},"meta":{"examples":{"left":null,"right":"Stage I, Stage IIB"}}}},"created":{},"deleted":{}},"treatment":{"updated":{"line_of_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.is_primary_treatment"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'unknown') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\n         }\n      }\n      return result;\n  })"]},"range":{"left":{"exclusiveMin":0},"right":null}}},"days_per_cycle":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}}},"number_of_cycles":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}}},"outcome_of_treatment":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}},"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]}}},"toxicity_type":{"description":{"left":"If the treatment was terminated early due to acute toxicity, indicate whether it was due to hemotological toxicity or non-hemotological toxicity.","right":"If the treatment was terminated early due to acute toxicity, indicate whether it was due to hematological toxicity or non-hematological toxicity."},"meta":{"dependsOn":{"left":null,"right":"treatment.outcome_of_treatment"}},"restrictions":{"codeList":{"left":["Hemotological","Non-hemotological"],"right":["Hematological","Non-hematological"],"data":{"added":["Hematological","Non-hematological"],"deleted":["Hemotological","Non-hemotological"]}},"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.outcome_of_treatment != null && !(checkforEmpty($row.outcome_of_treatment)))) { \n            const outcomeOfTreatment = $row.outcome_of_treatment.trim().toLowerCase();\n     \n            /* toxicityType should only be submitted if treatment was terminated early due to acute toxicity ('outcome_of_treatment' is 'Treatment stopped due to acute toxicity'). */\n            if (outcomeOfTreatment != \"treatment stopped due to acute toxicity\") {\n               result = { valid: false, message: `The 'outcome_of_treatment' field should be 'Treatment stopped due to acute toxicity' if the '${$name}' field is submitted.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `If the 'toxicity_type' field is submitted, then the 'outcome_of_treatment' field must be submitted as well.`}\n         }\n      }\n      return result;\n  })"]}}},"adverse_events":{"meta":{"dependsOn":{"left":null,"right":"treatment.treatment_type"}}}},"created":{"hematological_toxicity":{"changeType":"created","name":"hematological_toxicity","description":"Indicate the hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Anemia - Grade 3","Anemia - Grade 4","Anemia - Grade 5","Neutropenia - Grade 3","Neutropenia - Grade 4","Neutropenia - Grade 5","Thrombocytopenia - Grade 3","Thrombocytopenia - Grade 4","Thrombocytopenia - Grade 5"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Hemotological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}},"non-hematological_toxicity":{"changeType":"created","name":"non-hematological_toxicity","description":"Indicate the non-hematological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Cardiac disorders - Grade 1","Cardiac disorders - Grade 2","Cardiac disorders - Grade 3","Cardiac disorders - Grade 4","Cardiac disorders - Grade 5","Dehydration - Grade 1","Dehydration - Grade 2","Dehydration - Grade 3","Dehydration - Grade 4","Dehydration - Grade 5","Diarrhea - Grade 1","Diarrhea - Grade 2","Diarrhea - Grade 3","Diarrhea - Grade 4","Diarrhea - Grade 5","Fatigue - Grade 1","Fatigue - Grade 2","Fatigue - Grade 3","Nausea - Grade 1","Nausea - Grade 2","Nausea - Grade 3","Vomiting - Grade 1","Vomiting - Grade 2","Vomiting - Grade 3","Vomiting - Grade 4","Vomiting - Grade 5","Weight loss - Grade 1","Weight loss - Grade 2","Weight loss - Grade 3"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ($field != null && !(checkforEmpty($field))) {\n         if (($row.toxicity_type != null && !(checkforEmpty($row.toxicity_type)))) { \n            const toxicityType = $row.toxicity_type.trim().toLowerCase();\n     \n            /* if toxicity_type is non-hematological, then hematological_toxicity should not be submitted. If toxicity_type is hematological, then 'non-hematological_toxicity' should not be submitted */\n            if (toxicityType === 'non-hematological' && $name === 'hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n            else if (toxicityType === 'hematological' && $name === 'non-hematological_toxicity') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if 'toxicity_type' is '${toxicityType}'.`};\n            }\n         }\n         else {\n            result = {valid: false, message: `The 'toxicity_type' field should be submitted if '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Non-hematological Toxicity","dependsOn":"treatment.toxicity_type","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}}},"deleted":{"hemotological_toxicity":{"changeType":"deleted","name":"hemotological_toxicity","description":"Indicate the hemotological toxicities which caused early termination of the treatment. (Codelist reference: NCI-CTCAE (v5.0))","valueType":"string","isArray":true,"restrictions":{"codeList":["Anemia - Grade 3","Anemia - Grade 4","Anemia - Grade 5","Neutropenia - Grade 3","Neutropenia - Grade 4","Neutropenia - Grade 5","Thrombocytopenia - Grade 3","Thrombocytopenia - Grade 4","Thrombocytopenia - Grade 5"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Hemotological Toxicity","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."}}}},"chemotherapy":{"updated":{"drug_name":{"description":{"left":"Name of agent or drug administered to patient as part of the treatment regimen.","right":"Name of agent or drug administered to donor as part of the treatment regimen."}},"cumulative_drug_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"hormone_therapy":{"updated":{"drug_name":{"description":{"left":"Name of agent or drug administered to patient as part of the treatment regimen.","right":"Name of agent or drug administered to donor as part of the treatment regimen."}},"cumulative_drug_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"radiation":{"updated":{"radiation_therapy_fractions":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}},"radiation_therapy_dosage":{"restrictions":{"range":{"left":null,"right":{"exclusiveMin":0}}}}},"created":{},"deleted":{}},"immunotherapy":{"updated":{"immunotherapy_type":{"description":{"left":"Indicate the type of immunotherapy administered to patient.","right":"Indicate the type of immunotherapy administered to donor."}},"drug_name":{"description":{"left":"Name of agent or drug administered to patient as part of the treatment regimen.","right":"Name of agent or drug administered to donor as part of the treatment regimen."}}},"created":{},"deleted":{}},"follow_up":{"updated":{"weight_at_followup":{"valueType":{"left":"integer","right":"number"},"restrictions":{}}},"created":{},"deleted":{}},"family_history":{"updated":{"relative_with_cancer_history":{"description":{"left":"Indicate if patient has any genetic relatives with a history of cancer. (Reference: NCIt C159104, caDSR CDE ID 6161023)","right":"Indicate if donor has any genetic relatives with a history of cancer. (Reference: NCIt C159104, caDSR CDE ID 6161023)"}},"relationship_type":{"description":{"left":"Indicate genetic relationship of the relative to patient. (Reference: caDSR CDE ID 2179937)","right":"Indicate genetic relationship of the relative to the donor. (Reference: caDSR CDE ID 2179937)"}},"age_of_relative_at_diagnosis":{"description":{"left":"The age (in years) when the patient's relative was first diagnosed. (Reference: caDSR CDE ID 5300571)","right":"The age (in years) when the donor's relative was first diagnosed. (Reference: caDSR CDE ID 5300571)"},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"cancer_type_code_of_relative":{"description":{"left":"The code to describe the malignant diagnosis of the patient's relative with a history of cancer using the WHO ICD-10 code (https://icd.who.int/browse10/2019/en) classification.","right":"The code to describe the malignant diagnosis of the donor's relative with a history of cancer using the WHO ICD-10 code (https://icd.who.int/browse10/2019/en) classification."},"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}},"relative_survival_time":{"restrictions":{"script":{"left":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"],"right":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      if ($row.relative_with_cancer_history != null) {\n         const relativeWithCancerHistory = $row.relative_with_cancer_history.trim().toLowerCase();\n         if (((relativeWithCancerHistory === \"no\") || (relativeWithCancerHistory === \"unknown\")) && currField != null) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if the 'relative_with_cancer_history' field is '${relativeWithCancerHistory}'`,\n            };\n         }\n      }\n      else {\n         if (currField || currField != null) {\n            result = { valid: false, message: `The 'relative_with_cancer_history' field must be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]}}}},"created":{},"deleted":{}}}}
