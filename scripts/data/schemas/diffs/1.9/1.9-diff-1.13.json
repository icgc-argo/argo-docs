{"schemas":{"donor":{"updated":{"vital_status":{"restrictions":{"codeList":{"left":["Alive","Deceased","Unknown"],"right":["Alive","Deceased"],"data":{"added":[],"deleted":["Unknown"]}}}},"age_at_menarche":{"description":{"left":"Indicate the donor's age at which the first menstruation event occurred. (Reference: NCIt C19666)","right":"Indicate the donor's age, in years, at which the first menstruation event occurred. (Reference: NCIt C19666)"}},"hrt_type":{"description":{"left":"Indicate the type of hormone replacement therapy (HRT) the patient has taken or is currently taking.","right":"Indicate the type of hormone replacement therapy (HRT) the donor has taken or is currently taking."}},"hrt_duration":{"description":{"left":"If patient has taken hormone replacement therapy (HRT), indicate how long patient has been taking HRT, in months. (Reference: caDSR CDE ID 5365433)","right":"If donor has taken hormone replacement therapy (HRT), indicate how long donor has been taking HRT, in months. (Reference: caDSR CDE ID 5365433)"}},"contraception_type":{"description":{"left":"Indicate the type of hormonal contraception the patient has taken or is currently taking. (Reference: caDSR CDE ID 3264234)","right":"Indicate the type of hormonal contraception the donor has taken or is currently taking. (Reference: caDSR CDE ID 3264234)"}},"contraception_duration":{"description":{"left":"If patient has taken hormonal contraception, indicate duration of use, in months. (Reference: caDSR CDE ID 5206887)","right":"If donor has taken hormonal contraception, indicate duration of use, in months. (Reference: caDSR CDE ID 5206887)"}}},"created":{},"deleted":{}},"specimen":{"updated":{"pathological_tumour_staging_system":{"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"pathological_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"pathological_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"pathological_stage_group":{"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"data":{"added":["Cannot be assessed"],"deleted":[]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    \n    return result;\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}},"percent_proliferating_cells":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_inflammatory_tissue":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_stromal_cells":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}},"percent_necrosis":{"meta":{"notes":{"left":"","right":"This field should only be submitted if the specimen is tumour."}}}},"created":{"specimen_laterality":{"changeType":"created","name":"specimen_laterality","description":"For cancer in a paired organ, indicate the side on which the specimen was obtained. (Reference caDSR 2007875)","valueType":"string","restrictions":{"codeList":["Left","Right","Unknown"]},"meta":{"displayName":"Specimen Laterality"}}},"deleted":{}},"primary_diagnosis":{"updated":{"number_lymph_nodes_examined":{"meta":{"notes":{"left":null,"right":"This field should only be submitted if 'lymph_nodes_examined_status' is 'Yes'."}}},"clinical_tumour_staging_system":{"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"clinical_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"clinical_n_category":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n   \n    const nCategoriesExclude = ['n0(i-)','n0(i+)','n0(mol-)','n0(mol+)','n4'];\n    \n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n    if ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system != null && !(checkforEmpty($row.clinical_tumour_staging_system))) {\n      if ($row.clinical_tumour_staging_system.trim().toLowerCase() === 'ajcc 6th edition') {\n         if ($field && $field != null && !(checkforEmpty($field)) && nCategoriesExclude.includes($field.trim().toLowerCase())) {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid N category in the clinical_tumour_staging_system '${$row.clinical_tumour_staging_system}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"clinical_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"clinical_stage_group":{"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"data":{"added":["Cannot be assessed"],"deleted":[]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    \n    return result;\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}}},"created":{"laterality":{"changeType":"created","name":"laterality","description":"For cancer in a paired organ, indicate the side of the body on which the primary tumour or cancer first developed at the time of primary diagnosis. (Reference caDSR 827)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not a paired site","Right","Unilateral, side not specified","Unknown"]},"meta":{"displayName":"Laterality"}}},"deleted":{}},"radiation":{"updated":{"radiation_therapy_dosage":{"valueType":{"left":"integer","right":"number"}},"anatomical_site_irradiated":{"description":{"left":"Indicate localization site where radiation therapy was administered.","right":"Indicate body region where radiation therapy was administered. (Reference: Cancer Care Ontario)"},"restrictions":{"codeList":{"left":["Abdomen","Bone","Brain","Extremities","Head","Head-Neck","Liver","Lung","Pelvis","Peritoneum","Spine","Thorax"],"right":["Abdomen","Body","Brain","Chest","Head","Liver","Lower Limb","Lung","Neck","Pelvis","Skin","Spine","Thorax","Upper Limb"],"data":{"added":["Body","Chest","Lower Limb","Neck","Skin","Upper Limb"],"deleted":["Bone","Extremities","Head-Neck","Peritoneum"]}}}}},"created":{},"deleted":{}},"immunotherapy":{"updated":{"immunotherapy_type":{"meta":{"core":{"left":null,"right":true}},"restrictions":{"required":{"left":null,"right":true}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"recurrence_tumour_staging_system":{"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"recurrence_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"recurrence_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"recurrence_stage_group":{"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"data":{"added":["Cannot be assessed"],"deleted":[]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    \n    return result;\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}},"posttherapy_tumour_staging_system":{"restrictions":{"codeList":{"left":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"right":["AJCC 8th edition","AJCC 7th edition","AJCC 6th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"data":{"added":["AJCC 6th edition"],"deleted":[]}}}},"posttherapy_t_category":{"restrictions":{"codeList":{"left":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"right":["T0","T1","T1a","T1a1","T1a2","T1a(s)","T1a(m)","T1b","T1b1","T1b2","T1b(s)","T1b(m)","T1c","T1d","T1mi","T2","T2(s)","T2(m)","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3(s)","T3(m)","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4a(s)","T4a(m)","T4b","T4b(s)","T4b(m)","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Pagetâ€™s)","Tis pd","Tis pu","TX"],"data":{"added":["T1a(s)","T1a(m)","T1b(s)","T1b(m)","T2(s)","T2(m)","T3(s)","T3(m)","T4a(s)","T4a(m)","T4b(s)","T4b(m)"],"deleted":[]}}}},"posttherapy_m_category":{"restrictions":{"codeList":{"left":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"],"right":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e","MX"],"data":{"added":["MX"],"deleted":[]}},"script":{"left":null,"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"]}}},"posttherapy_stage_group":{"restrictions":{"codeList":{"left":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS"],"right":["Occult Carcinoma","Stage 0","Stage 0a","Stage 0is","Stage 1","Stage 1A","Stage 1B","Stage A","Stage B","Stage C","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IAB","Stage IAE","Stage IAES","Stage IAS","Stage IB","Stage IB1","Stage IB2","Stage IBE","Stage IBES","Stage IBS","Stage IC","Stage IE","Stage IEA","Stage IEB","Stage IES","Stage II","Stage II bulky","Stage IIA","Stage IIA1","Stage IIA2","Stage IIAE","Stage IIAES","Stage IIAS","Stage IIB","Stage IIBE","Stage IIBES","Stage IIBS","Stage IIC","Stage IIE","Stage IIEA","Stage IIEB","Stage IIES","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIAE","Stage IIIAES","Stage IIIAS","Stage IIIB","Stage IIIBE","Stage IIIBES","Stage IIIBS","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IIIE","Stage IIIES","Stage IIIS","Stage IIS","Stage IS","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVAE","Stage IVAES","Stage IVAS","Stage IVB","Stage IVBE","Stage IVBES","Stage IVBS","Stage IVC","Stage IVE","Stage IVES","Stage IVS","Cannot be assessed"],"data":{"added":["Cannot be assessed"],"deleted":[]}},"script":{"left":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    \n    return result;\n  })"],"right":["(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_stage_group')[0];\n\n    const stagingSystem = stagingName + `_tumour_staging_system`;\n    const tCategory = `${stagingName}_t_category`;\n    const nCategory = `${stagingName}_n_category`;\n    const mCategory = `${stagingName}_m_category`;\n    \n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n \n    if ($row[stagingSystem] && (!$field || checkforEmpty($field))) {\n      result.valid = false;\n      const msg = `The ${stagingName}_stage_group must be submitted if the field ${stagingSystem} is submitted.`;\n      result.message = msg;\n    }\n    else if (!($row[stagingSystem]) && $field) {\n       result.valid = false;\n       const msg = `The field ${stagingSystem} must be submitted if ${stagingName}_stage_group is submitted.`;\n       result.message = msg;\n    }\n    else if ($row[stagingSystem] && $field) {\n      let codeList = [];\n      switch ($row[stagingSystem] && $row[stagingSystem].trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage ii bulky',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ie',\n            'stage is',\n            'stage ies',\n            'stage iae',\n            'stage ias',\n            'stage iaes',\n            'stage ib',\n            'stage ibe',\n            'stage ibs',\n            'stage ibes',\n            'stage ii',\n            'stage iia',\n            'stage iie',\n            'stage iis',\n            'stage iies',\n            'stage iiae',\n            'stage iias',\n            'stage iiaes',\n            'stage iib',\n            'stage iibe',\n            'stage iibs',\n            'stage iibes',\n            'stage iii',\n            'stage iiia',\n            'stage iiie',\n            'stage iiis',\n            'stage iiies',\n            'stage iiiae',\n            'stage iiias',\n            'stage iiiaes',\n            'stage iiib',\n            'stage iiibe',\n            'stage iiibs',\n            'stage iiibes',\n            'stage iv',\n            'stage iva',\n            'stage ive',\n            'stage ivs',\n            'stage ives',\n            'stage ivae',\n            'stage ivas',\n            'stage ivaes',\n            'stage ivb',\n            'stage ivbe',\n            'stage ivbs',\n            'stage ivbes'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1', 'cannot be assessed'];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When '${stagingSystem}' is set to '${\n          $row[stagingSystem]\n        }', '${stagingName}_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n      if ($field.trim().toLowerCase() === 'cannot be assessed') {\n         if ($row[tCategory].trim().toLowerCase() != 'tx' && $row[nCategory].trim().toLowerCase() != 'nx') {\n           result = {\n              valid: false,\n              message: `The submitted term '${$field}' is not permissible for '${stagingName}_stage_group' when TNM is '${$row[tCategory]}${$row[nCategory]}${$row[mCategory]}'`\n           };\n         }\n      }\n    }\n    return result;\n  })"]}}}},"created":{"anatomic_site_progression_or_recurrence":{"changeType":"created","description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrence","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}},"deleted":{"anatomic_site_progression_or_recurrences":{"changeType":"deleted","description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrences","valueType":"string","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}}},"family_history":{"updated":{"relationship_type":{"restrictions":{"codeList":{"left":["Aunt","Brother","Cousin","Daughter","Father","Grandchild","Grandfather","Grandmother","Maternal Aunt","Maternal Cousin","Maternal Grandfather","Maternal Grandmother","Maternal Half-brother","Maternal Half-sister","Mother","Nephew","Niece","Other","Paternal Aunt","Paternal Cousin","Paternal Grandfather","Paternal Grandmother","Paternal Half-brother","Paternal Half-sister","Sister","Son","Unknown"],"right":["Aunt","Brother","Cousin","Daughter","Father","Grandchild","Grandfather","Grandmother","Maternal Aunt","Maternal Cousin","Maternal Grandfather","Maternal Grandmother","Maternal Half-brother","Maternal Half-sister","Maternal Uncle","Mother","Nephew","Niece","Other","Paternal Aunt","Paternal Cousin","Paternal Grandfather","Paternal Grandmother","Paternal Half-brother","Paternal Half-sister","Paternal Uncle","Sister","Son","Uncle","Unknown"],"data":{"added":["Maternal Uncle","Paternal Uncle","Uncle"],"deleted":[]}}}}},"created":{},"deleted":{}},"chemotherapy":{"updated":{},"created":{"dose_intensity_reduction":{"changeType":"created","name":"dose_intensity_reduction","description":"Indicate if there was a significant reduction in dose intensity.","valueType":"string","restrictions":{"codeList":["Yes","No","Unknown"]},"meta":{"displayName":"Dose Intensity Reduction"}},"dose_intensity_reduction_event":{"changeType":"created","name":"dose_intensity_reduction_event","description":"If there was a signficiant reduction in dose intensity, indicate which event caused it.","valueType":"string","restrictions":{"codeList":["Dose reduction","Dose delay or dose omission","Both"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Dose Intensity Reduction Event","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}},"dose_intensity_reduction_amount":{"changeType":"created","name":"dose_intensity_reduction_amount","description":"If there was a significant reduction in dose intensity, indicate the amount.","valueType":"string","restrictions":{"codeList":["<20%","20-49%",">=50%","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(entry.replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($field && $field != null && !(checkforEmpty($field))) {\n        if (!$row.dose_intensity_reduction || checkforEmpty($row.dose_intensity_reduction) || $row.dose_intensity_reduction === null) {\n          result = {\n            valid: false,\n            message: `The 'dose_intensity_reduction' field is required if the '${$name}' field is submitted.`,\n          };\n        }\n        else if ($row.dose_intensity_reduction.trim().toLowerCase() === 'no') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted if 'dose_intensity_reduction' field is 'No'.`,\n          };\n        } \n      }\n      else if (!$field || $field === null || checkforEmpty($field)) {\n        if ($row.dose_intensity_reduction && !(checkforEmpty($row.dose_intensity_reduction)) && $row.dose_intensity_reduction.trim().toLowerCase() === 'yes') {\n          result = {\n            valid: false,\n            message: `The '${$name}' field is required if 'dose_intensity_reduction' field is 'Yes'.`\n          };\n        }\n      }\n      return result;\n  })"]},"meta":{"displayName":"Amount of Dose Intensity Reduction","notes":"This field should only be submitted if 'dose_intensity_reduction' is 'Yes'"}}},"deleted":{}},"exposure":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"tobacco_smoking_status":{"changeType":"created","description":"Indicate donor's self-reported smoking status and history. (Reference: caDSR CDE ID 2181650)","name":"tobacco_smoking_status","valueType":"string","meta":{"displayName":"Tobacco Smoking Status","notes":"Current smoker: Has smoked 100 cigarettes in their lifetime and who currently smokes. Includes daily smokers and non-daily smokers (also known as occassional smokers). Current reformed smoker for >15 years: A person who currently does not smoke and has been a non-smoker for more than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker for <= 15 years: A person who currently does not smoke and has been a non-smoker for less than 15 years, but has smoked at least 100 cigarettes in their life. Current reformed smoker, duration not specified: A person who currently does not smoke and has been a non-smoker for unspecified time, but has smoked at least 100 cigarettes in their lifetime. Smoking history not documented: Smoking history has not be recorded or is unknown."},"restrictions":{"codeList":["Current reformed smoker for <= 15 years","Current reformed smoker for > 15 years","Current reformed smoker, duration not specified","Current smoker","Lifelong non-smoker (<100 cigarettes smoked in lifetime)","Smoking history not documented"]}},"tobacco_type":{"changeType":"created","description":"Indicate the type(s) of tobacco used by donor. (Reference: NCIt CDE C177629)","name":"tobacco_type","valueType":"string","meta":{"displayName":"Tobacco Type","dependsOn":"exposure.tobacco_smoking_status","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Chewing Tobacco","Cigar","Cigarettes","Electronic cigarettes","Pipe","Roll-ups","Snuff","Unknown","Waterpipe"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}},"pack_years_smoked":{"changeType":"created","description":"This field applies to cigarettes. Indicate the smoking intensity in Pack Years, where the number of pack years is defined as the number of cigarettes smoked per day times (x) the number of years smoked divided (/) by 20. (Reference: caDSR CDE ID 2955385)","name":"pack_years_smoked","valueType":"number","meta":{"displayName":"Pack Years Smoked","dependsOn":"exposure.tobacco_smoking_status"},"restrictions":{"range":{"min":0},"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const smokerCategories = ['current reformed smoker for <= 15 years', 'current reformed smoker for > 15 years', 'current reformed smoker, duration not specified', 'current smoker'];\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      // check tobacco related fields\n      if ($name === 'tobacco_type') {\n         if ($row.tobacco_type != null && !(checkforEmpty($row.tobacco_type))) {\n            if (!$row.tobacco_smoking_status || checkforEmpty($row.tobacco_smoking_status) || $row.tobacco_smoking_status === null) {\n               result = { valid: false, message: `If '${$name}' is submitted, then the 'tobacco_smoking_status' field is required.`}\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'smoking history not documented') {\n               result = { valid: false, message: `The 'tobacco_smoking_status' field (smoking status not documented) is inconsistent if donor smoked '${$row.tobacco_type}'.`};\n            }\n            else if ($row.tobacco_smoking_status.toLowerCase() === 'lifelong non-smoker (<100 cigarettes smoked in lifetime)') {\n               result = { valid: false, message: `The '${$name}' field should not be submitted if donor is a lifelong non-smoker.`}\n            }\n         }\n         else {\n            if ($row.tobacco_smoking_status != null && !(checkforEmpty($row.tobacco_smoking_status))) {\n               if (smokerCategories.includes($row.tobacco_smoking_status.toLowerCase())) {\n                  result = { valid: false, message: `The '${$name}' field is required if donor is or was a smoker.`}\n               }\n            }\n         }\n      }\n      else if ($name === 'pack_years_smoked' && $row.pack_years_smoked != null && !(checkforEmpty($row.pack_years_smoked))) {\n        if ((!$row.tobacco_smoking_status || $row.tobacco_smoking_status === null || (!smokerCategories.includes($row.tobacco_smoking_status.trim().toLowerCase()))) && ($row.pack_years_smoked != null || !(checkforEmpty($row.pack_years_smoked)))) {\n           result = {valid: false, message: `The '${$name}' field should not be submitted if donor does not have a history of smoking.`}\n        }\n     }\n     return result;\n  })"]}},"alcohol_history":{"changeType":"created","description":"Indicate if the donor has consumed at least 12 drinks of any alcoholic beverage in their lifetime. (Reference: caDSR CDE ID 2201918)","name":"alcohol_history","valueType":"string","meta":{"displayName":"Alcohol History"},"restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n      noOrUnknownAllowedCategories = [\"none\", \"occasional drinker (< once a month)\", \"unknown\"];\n       \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ((!$field || $field == null || checkforEmpty($field)) && alcoholHistoryCategories.includes(alcoholConsumptionCategory)) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as well.`};\n         }\n         if ((!$field || $field === null || checkforEmpty($field) || $field.trim().toLowerCase() === 'no') && (!(noOrUnknownAllowedCategories.includes(alcoholConsumptionCategory)))) {\n            result = {valid:false, message: `If the donor is a '${alcoholConsumptionCategory}', then the 'alcohol_history' field must be submitted as 'Yes'.`};\n         }\n      }\n      return result;\n  })"]}},"alcohol_consumption_category":{"changeType":"created","description":"Describe the donor's current level of alcohol use as self-reported by the donor. (Reference: caDSR CDE ID 3457767)","name":"alcohol_consumption_category","valueType":"string","meta":{"displayName":"Alcohol Consumption Category","notes":""},"restrictions":{"codeList":["Daily Drinker","None","Occasional Drinker (< once a month)","Social Drinker (> once a month, < once a week)","Unknown","Weekly Drinker (>=1x a week)"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      alcoholHistoryCategories = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if (!$field || $field === null || checkforEmpty($field)) {\n         if ($row.alcohol_history && $row.alcohol_history != null && !(checkforEmpty($row.alcohol_history)) && $row.alcohol_history.trim().toLowerCase() === 'yes') {\n            result = {valid:false, message: `The '${$name}' field must be submitted if donor has an alcohol history.`};\n         }\n      }\n      else {\n         alcoholConsumptionCategory = $field.trim().toLowerCase();\n         if (alcoholHistoryCategories.includes(alcoholConsumptionCategory) && (!$row.alcohol_history || $row.alcohol_history === null || checkforEmpty($row.alcohol_history))) {\n            result = {valid:false, message: `The 'alcohol_history' field must be submitted if donor is a '${alcoholConsumptionCategory}'.`};\n         }\n      }\n      return result;\n  })"]}},"alcohol_type":{"changeType":"created","description":"Indicate the type(s) of alcohol the donor consumes. (Reference: NCIt CDE C173647)","name":"alcohol_type","valueType":"string","meta":{"displayName":"Alcohol Type","dependsOn":"exposure.alcohol_consumption_category","notes":"To include multiple values, separate values with a pipe delimiter '|' within your file."},"isArray":true,"restrictions":{"codeList":["Beer","Liquor","Other","Unknown","Wine"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      exclusionTerms = [\"no\", \"none\", \"unknown\"]; \n      requiresAlcoholType = [\"daily drinker\", \"occasional drinker (< once a month)\", \"social drinker (> once a month, < once a week)\", \"weekly drinker (>=1x a week)\"];\n    \n      if ($row.alcohol_consumption_category && $row.alcohol_consumption_category != null && !(checkforEmpty($row.alcohol_consumption_category))) {\n         alcoholConsumptionCategory = $row.alcohol_consumption_category.trim().toLowerCase();\n         if ($field && $field != null && !(checkforEmpty($field))) {\n            if (exclusionTerms.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field should not be submitted.`};\n            }\n         }\n         else {\n            if (requiresAlcoholType.includes(alcoholConsumptionCategory)) {\n               result = {valid: false, message: `If the 'alcohol_consumption_category' field is '${alcoholConsumptionCategory}', then the 'alcohol_type' field must be submitted.`};\n            }\n         }\n      }\n      if ($field && $field != null && !(checkforEmpty($field)) && (!$row.alcohol_consumption_category || $row.alcohol_consumption_category === null || checkforEmpty($row.alcohol_consumption_category))) {\n         result = {valid: false, message: `The 'alcohol_consumption_category' field is required if the '${$name}' field is submitted.`};\n      }\n      return result;\n  })"]}},"opiate_use":{"changeType":"created","description":"Indicate if the donor has ever used opium or other opiates like opium juice, heroin, or Sukhteh regularly (at least weekly over a 6-month period).","name":"opiate_use","valueType":"string","meta":{"displayName":"Opiate Use"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"hot_drinks_consumption":{"changeType":"created","description":"Indicate if the donor regularly drinks tea, coffee, or other hot drinks.","name":"hot_drinks_consumption","valueType":"string","meta":{"displayName":"Hot Drink Consumption"},"restrictions":{"codeList":["Never","Unknown","Yes, currently","Yes, only in the past"]}},"red_meat_frequency":{"changeType":"created","description":"Indicate how frequently the donor eats red meat. Examples of red meat include beef, veal, pork, lamb, mutton, horse, or goat meat.","name":"red_meat_frequency","valueType":"string","meta":{"displayName":"Red Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"processed_meat_frequency":{"changeType":"created","description":"Indicate how frequently the patient eats processed meat. Examples of processed meat include hams, salamis, or sausages.","name":"processed_meat_frequency","valueType":"string","meta":{"displayName":"Processed Meat Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"soft_drinks_frequency":{"changeType":"created","description":"Indicate the frequency of soft drink consumption by the donor.","name":"soft_drinks_frequency","valueType":"string","meta":{"displayName":"Soft Drink Consumption Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_frequency":{"changeType":"created","description":"Indicate how many times per week the donor exercises for at least 30 minutes. (Reference: NCIt CDE C25367)","name":"exercise_frequency","valueType":"string","meta":{"displayName":"Exercise Frequency"},"restrictions":{"codeList":["Never","Less than once a month","1-3 times a month","Once or twice a week","Most days but not every day","Every day","Unknown"]}},"exercise_intensity":{"changeType":"created","description":"Indicate the intensity of exercise. (Reference: NCIt CDE C25539)","name":"exercise_intensity","valueType":"string","meta":{"displayName":"Exercise Intensity","dependsOn":"exposure.exercise_frequency"},"restrictions":{"codeList":["Low: No increase in the heart beat, and no perspiration","Moderate: Increase in the heart beat slightly with some light perspiration","Vigorous: Increase in the heart beat substantially with heavy perspiration"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if ($field != null || !(checkforEmpty($field))) {\n         if ($row.exercise_frequency && $row.exercise_frequency != null && !(checkforEmpty($row.exercise_frequency)) && $row.exercise_frequency.trim().toLowerCase() === \"never\") {\n            result = {valid: false, message: `The 'exercise_frequency' field cannot be 'never' if the '${$name}' field is submitted.`};\n         }\n      } \n      return result;\n  })"]}}},"deleted":{}},"biomarker":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"submitter_specimen_id":{"changeType":"created","name":"submitter_specimen_id","description":"Unique identifier of the specimen, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_specimen_id","displayName":"Submitter Specimen ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_primary_diagnosis_id":{"changeType":"created","name":"submitter_primary_diagnosis_id","valueType":"string","description":"If the biomarker test was done at the time of primary diagnosis, then indicate the associated submitter_primary_diagnosis_id here.","meta":{"displayName":"Submitter Primary Diagnosis ID","primaryId":true,"notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_treatment_id":{"changeType":"created","name":"submitter_treatment_id","valueType":"string","description":"If the biomarker test was done at the initiation of a specific treatment regimen, indicate the associated submitter_treatment_id here.","meta":{"primaryId":true,"displayName":"Submitter Treatment ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"submitter_follow_up_id":{"changeType":"created","description":"If the biomarker test was done during a follow-up event, then indicate the associated submitter_follow_up_id here.","name":"submitter_follow_up_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Follow-Up ID","notes":"Only one of ['submitter_specimen_id', 'submitter_primary_diagnosis_id', 'submitter_treatment_id', 'submitter_follow_up_id'] is required. If the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow up event, then the 'test_interval' field will be required."},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,64}","script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]}},"test_interval":{"changeType":"created","description":"If the biomarker test was not associated with a specific specimen or follow-up, primary diagnosis or treatment event, then indicate the interval of time since primary diagnosis that the biomarker test was performed at, in days.","name":"test_interval","valueType":"integer","restrictions":{"range":{"exclusiveMin":0},"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let missing = true;\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      const identifierFields = ['submitter_specimen_id', 'submitter_treatment_id', 'submitter_primary_diagnosis_id', 'submitter_follow_up_id', 'test_interval'];\n     \n      if (!$field || checkforEmpty($field) || $field === null) { \n        for (let idField of identifierFields) {\n          if (!$row[idField] || checkforEmpty($row[idField]) || $row[idField] === null) {\n            continue;\n          }\n          else {\n            missing = false;\n          }\n        }\n        if (missing === true && (!$row.test_interval || checkforEmpty($row.test_interval) || $row.test_interval === null)) {\n          result = {\n            valid: false,\n            message: `The biomarker test must be associated with one clinical event or time interval. Please submit one of [submitter_specimen_id, submitter_primary_diagnosis_id, submitter_treatment_id, submitter_follow_up_id] OR the 'test_interval' field.`};\n        }\n      }\n      else if ($field && !(checkforEmpty($field)) && $field != null) {\n        for (let idField of identifierFields) {\n          if (($name != idField) && ($row[idField] && $row[idField] != null && !(checkforEmpty($row[idField])))) {\n            result = {\n              valid: false,\n              message: `Cannot submit both '${$name}' and '${idField}'. The biomarker test can only be associated with one event clinical identifier. If it is not associated with a clinical event, then the 'test_interval' field must be submitted. If the biomarker test was done during two clinical events, then submit biomarker test as new row in table.`};\n            break;\n          }\n        }\n      }\n      return result;\n  })"]},"meta":{"validationDependency":true,"primaryId":true,"units":"days","displayName":"Interval Of Test","notes":"This field is required if the biomarker test is not associated with a specimen or primary diagnosis, treatment or follow-up event. The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."}},"ca19-9_level":{"changeType":"created","description":"Indicate the level of carbohydrate antigen 19-9 (CA19-9). Carbohydrate antigen 19-9 testing is useful to monitor the response to treatment in pancreatic cancer patients. (Reference: LOINC: 24108-3)","name":"ca19-9_level","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"CA19-9 Level"}},"crp_levels":{"changeType":"created","description":"Indicate the quantitative measurement of the amount of CRP, an inflammatory marker, in the blood in mg/L. Used for screening and monitoring for inflammatory disease, infections, and for cardiovascular disease risk assessment. (Reference: NCIt C64548, LOINC 30522-7)","name":"crp_levels","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"C-reactive protein (CRP) Level"}},"ldh_level":{"changeType":"created","description":"Indicate the level of lactate dehydrogenase (LDH), in IU/L. An increased amount of LDH in the blood may be a sign of tissue damage and some types of cancer. (Reference: NCI)","name":"ldh_level","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Lactate Dehydrogenase (LDH) Level"}},"anc":{"changeType":"created","description":"Indicate the value for a hematology laboratory test for the absolute number of neutrophil cells present in a sample of peripheral blood from a donor, in cells/uL. The ANC may be used to check for infection, inflammation, leukemia and other conditions. Cancer treatment such as chemotherapy may reduce the ANC. (Reference: caDSR CDE ID: 2180198)","name":"anc","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Absolute Neutrophil Count (ANC)"}},"alc":{"changeType":"created","description":"Indicate the absolute number of lymphocytes (ALC) found in a given volume of blood, as cells/uL. Lymphocytes help fight off infections and an altered cellular immune function has been demonstrated in patients with cancer. (Reference: NCIt: C113237)","name":"alc","valueType":"integer","restrictions":{"range":{"exclusiveMin":0}},"meta":{"displayName":"Absolute Lymphocyte Count (ALC)"}},"brca_carrier":{"changeType":"created","description":"Indicate whether donor is a carrier of a mutation in a BRCA gene. A mutation in this gene is associated with an increased risk of familial breast and ovarian cancer.","name":"brca_carrier","valueType":"string","restrictions":{"codeList":["BRCA1","BRCA2","Both BRCA1 and BRCA2","No","Not applicable","Unknown"]},"meta":{"displayName":"BRCA Carrier"}},"er_status":{"changeType":"created","description":"Indicate the expression of estrogen receptor (ER). (Reference: NAACCR 3827)","name":"er_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Estrogen Receptor Status"}},"er_allred_score":{"changeType":"created","description":"Indicate the Allred score for estrogen receptor. The Allred score is based on the percentage of cells that stain positive by immunohistochemistry (IHC) for estrogen receptor (ER) and the intensity of that staining. (Reference: NAACCR: 3828, caDSR CDE ID 2725288)","name":"er_allred_score","valueType":"string","restrictions":{"codeList":["Total ER Allred score of 1","Total ER Allred score of 2","Total ER Allred score of 3","Total ER Allred score of 4","Total ER Allred score of 5","Total ER Allred score of 6","Total ER Allred score of 7","Total ER Allred score of 8","Not applicable","Unknown"]},"meta":{"displayName":"Estrogen Receptor Allred Score"}},"er_percent_positive":{"changeType":"created","name":"er_percent_positive","description":"Indicate a value, in decimals, that represents the percent of cells staining estrogen receptor positive by immunohistochemistry (IHC).","valueType":"number","meta":{"displayName":"Estrogen Receptor Percent Positive"},"restrictions":{"range":{"min":0,"max":1}}},"her2_ihc_status":{"changeType":"created","description":"Indicate the expression of human epidermal growth factor receptor-2 (HER2) assessed by immunohistochemistry (IHC). (Reference: AJCC 8th Edition, Chapter 48)","name":"her2_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Equivocal","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HER2 IHC Status","notes":"Negative: 0 or 1+ staining, Equivocal: 2+ staining, Positive: 3+ staining"}},"her2_ish_status":{"changeType":"created","description":"Indicate the expression of human epidermal growth factor receptor-2 (HER2) assessed by in situ hybridization (ISH). (Reference: NAACCR: 3854)","name":"her2_ish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Equivocal","Positive","Negative","Not applicable","Unknown"]},"meta":{"displayName":"HER2 ISH Status"}},"pr_status":{"changeType":"created","description":"Indicate the expression of progesterone receptor (PR). (Reference: NAACCR 3915)","name":"pr_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Progesterone Receptor Status"}},"pr_allred_score":{"changeType":"created","description":"Indicate the Allred score for progesterone receptor. The Allred score is based on the percentage of cells that stain positive by IHC for the progesterone receptor (PR) and the intensity of that staining. (Reference: NAACCR 3916)","name":"pr_allred_score","valueType":"string","restrictions":{"codeList":["Total PR Allred score of 1","Total PR Allred score of 2","Total PR Allred score of 3","Total PR Allred score of 4","Total PR Allred score of 5","Total PR Allred score of 6","Total PR Allred score of 7","Total PR Allred score of 8","Not applicable","Unknown"]},"meta":{"displayName":"Progesterone Receptor Allred Score"}},"pr_percent_positive":{"changeType":"created","name":"pr_percent_positive","description":"Indicate a value, in decimals, that represents the percent of cells staining progesterone receptor positive by immunohistochemistry (IHC).","valueType":"number","meta":{"displayName":"Progesterone Receptor Percent Positive"},"restrictions":{"range":{"min":0,"max":1}}},"pd-l1_status":{"changeType":"created","description":"Indicate the immunohistochemical test result that refers to the over-expression or lack of expression of programmed death ligand 1 (PD-L1) in a tissue sample of a primary or metastatic malignant neoplasm. (Reference NCIt: C122807)","name":"pd-l1_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"PD-L1 Status"}},"alk_ihc_status":{"changeType":"created","description":"Indicate the expression of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by immunohistochemistry (IHC). Abnormalities of ALK can be present in lung cancers.","name":"alk_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ALK IHC Status"}},"alk_ihc_intensity":{"changeType":"created","description":"Indicate the intensity of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by immunohistochemistry (IHC). Abnormalities of ALK can be present in lung cancers.","name":"alk_ihc_intensity","valueType":"string","restrictions":{"codeList":["0 (No stain)","+1","+2","+3"]},"meta":{"displayName":"ALK IHC Intensity"}},"alk_fish_status":{"changeType":"created","description":"Indicate the expression of anaplastic lymphoma receptor tyrosine kinase (ALK) as assessed by fluorescence in situ hybridization (FISH). Abnormalities of ALK can be present in lung cancers.","name":"alk_fish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ALK FISH Status"}},"ros1_ihc_status":{"changeType":"created","description":"Indicate the expression of receptor lymphoma kinase (ROS1) as assessed by immunohistochemistry (IHC). Gene fusions involving ROS1 can be present in lung cancers.","name":"ros1_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"ROS1 IHC Status"}},"pan-trk_ihc_status":{"changeType":"created","description":"Indicate the expression of Pan-TRK as assessed by immunohistochemistry (IHC). Pan-TRK IHC screens for neurotrophic tyrosine kinase receptor (NTRK) fusions which have been described in many cancers including lung, thyroid and colorectal cancers.","name":"pan-trk_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"Pan-TRK IHC Status"}},"ret_fish_status":{"changeType":"created","description":"Indicate the expression of gene arrangement involving the RET proto-oncogene (RET1) as assessed by fluorescence in situ hybridization (FISH). RET gene rearrangements are associated with several different neoplastic conditions. (Reference: NCIt C46005)","name":"ret_fish_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"RET1 FISH Status"}},"hpv_ihc_status":{"changeType":"created","description":"Indicate the expression of Human papillomavirus (HPV) p16 as assessed by immunohistochemistry (IHC).","name":"hpv_ihc_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HPV IHC Status"}},"hpv_dna_status":{"changeType":"created","description":"Indicate the expression of Human papillomavirus (HPV) as assessed using a laboratory test in which cells are scraped from the cervix to look for DNA of HPV. (Reference: NCIt C93141)","name":"hpv_dna_status","valueType":"string","restrictions":{"codeList":["Cannot be determined","Negative","Not applicable","Positive","Unknown"]},"meta":{"displayName":"HPV DNA Status"}}},"deleted":{}},"comorbidity":{"updated":{},"created":{"program_id":{"changeType":"created","name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"submitter_donor_id":{"changeType":"created","name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,64}"}},"prior_malignancy":{"changeType":"created","name":"prior_malignancy","description":"Prior malignancy affecting donor.","restrictions":{"codeList":["Yes","No","Unknown"]},"valueType":"string","meta":{"displayName":"Prior Malignancy"}},"laterality_of_prior_malignancy":{"changeType":"created","name":"laterality_of_prior_malignancy","description":"If donor has history of prior malignancy, indicate laterality of previous diagnosis. (Reference: caDSR CDE ID 4122391)","valueType":"string","restrictions":{"codeList":["Bilateral","Left","Midline","Not applicable","Right","Unilateral, Side not specified","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n   \n      if ($name === \"laterality_of_prior_malignancy\" && $row.laterality_of_prior_malignancy && $row.laterality_of_prior_malignancy != null && !(checkforEmpty($row.laterality_of_prior_malignancy))) {\n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n            result = {valid: false, message: `The 'prior_malignancy' field should be submitted as 'Yes' if the '${$name}' field is submitted.`};\n         }\n      }\n      return result;\n  })"]},"meta":{"dependsOn":"comorbidity.prior_malignancy","displayName":"Laterality at Prior Malignancy"}},"age_at_comorbidity_diagnosis":{"changeType":"created","name":"age_at_comorbidity_diagnosis","valueType":"integer","description":"Indicate the age of comorbidity diagnosis, in years.","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"],"range":{"exclusiveMin":0}},"meta":{"units":"years","dependsOn":"comorbidity.comorbidity_type_code","displayName":"Age at Comorbidity Diagnosis"}},"comorbidity_type_code":{"changeType":"created","name":"comorbidity_type_code","valueType":"string","description":"Indicate the code for the comorbidity using the WHO ICD-10 code classification (https://icd.who.int/browse10/2019/en).","restrictions":{"required":true,"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      /* check if ICD-10 code is for neoplasms */\n      const neoplasmCode = (entry) => {return /^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$/.test(decodeURI(entry))};\n\n    \n      if (neoplasmCode($row.comorbidity_type_code)) { \n         if (!$row.prior_malignancy || $row.prior_malignancy === null || checkforEmpty($row.prior_malignancy) || invalidTypes.includes($row.prior_malignancy.trim().toLowerCase())) {\n           result = {valid: false, message: `If an ICD-10 code for cancer is submitted in the '${$name}' field, then 'prior_malignancy' should be submitted as 'Yes'.`}\n         }\n      }\n      else if ($row.prior_malignancy && $row.prior_malignancy != null && !(checkforEmpty($row.prior_malignancy)) && $row.prior_malignancy.trim().toLowerCase() === \"yes\" && (!(neoplasmCode($row.comorbidity_type_code)))) {\n        result = {valid: false, message: `If the 'prior_malignancy' field is submitted as 'Yes', then an ICD-10 code for cancer is expected in the '${$name}' field.`}\n      }\n      return result;\n  })"],"regex":"^[A-Z][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"meta":{"primaryId":true,"dependsOn":"comorbidity.prior_malignancy","examples":"E10, C50.1, I11, M06","displayName":"Comorbidity Type Code","notes":"This field is required because it should have a cancer or non-cancer ICD-10 code. This field is marked 'Conditional' because it depends on the value of the `prior_malignancy` field. Both these fields will need to be consistent. If `prior_malignancy` is `Yes`, then an ICD-10 code related to cancer is expected in this field. If `prior_malignancy` is `No`, then an ICD-10 code related to a non-cancer condition is expected in this field."}},"comorbidity_treatment_status":{"changeType":"created","name":"comorbidity_treatment_status","valueType":"string","description":"Indicate if the patient is being treated for the comorbidity (this includes prior malignancies).","restrictions":{"codeList":["Yes","No","Unknown"],"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_type_code","displayName":"Comorbidity Treatment"}},"comorbidity_treatment":{"changeType":"created","name":"comorbidity_treatment","valueType":"string","description":"Indicate treatment details for the comorbidity (this includes prior malignancies).","restrictions":{"script":["(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      \n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      const invalidTypes = [\"no\", \"unknown\"]\n      optionalFields = [\"age_at_comorbidity_diagnosis\", \"comorbidity_treatment_status\", \"comorbidity_treatment\"];\n   \n      if (optionalFields.includes($name) && ($field || (!(checkforEmpty($field))))) {\n         if (($row.comorbidity_type_code === null || checkforEmpty($row.comorbidity_type_code))) {\n            result = { valid: false, message: `The 'comorbidity_type_code' field is required if '${$name}' is submitted.`};\n         }\n         if ($name === \"comorbidity_treatment\" && $field && !(checkforEmpty($field))) {\n            if (!$row.comorbidity_treatment_status || $row.comorbidity_treatment_status === null || checkforEmpty($row.comorbidity_treatment_status) || invalidTypes.includes($row.comorbidity_treatment_status.trim().toLowerCase())) {\n               result = { valid: false, message: `The 'comorbidity_treatment_status' field should be submitted as 'Yes' if '${$name}' field is submitted.`};\n            }\n         }\n     }\n     return result;\n  })"]},"meta":{"dependsOn":"comorbidity.comorbidity_treatment_status","displayName":"Comorbidity Treatment Type"}}},"deleted":{}}}}
