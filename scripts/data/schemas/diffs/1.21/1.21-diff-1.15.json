{
  "schemas": {
    "sample_registration": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "specimen_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Cell line - derived from metastatic tumour",
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Tumour - unknown if derived from primary or metastatic",
                "Xenograft - derived from metastatic tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "right": [
                "Cell line - derived from normal",
                "Cell line - derived from tumour",
                "Cell line - derived from xenograft tumour",
                "Metastatic tumour - additional metastatic",
                "Metastatic tumour - metastasis local to lymph node",
                "Metastatic tumour - metastasis to distant location",
                "Metastatic tumour",
                "Normal - tissue adjacent to primary tumour",
                "Normal",
                "Primary tumour - additional new primary",
                "Primary tumour - adjacent to normal",
                "Primary tumour",
                "Recurrent tumour",
                "Xenograft - derived from primary tumour",
                "Xenograft - derived from tumour cell line"
              ],
              "data": {
                "added": [],
                "deleted": [
                  "Cell line - derived from metastatic tumour",
                  "Tumour - unknown if derived from primary or metastatic",
                  "Xenograft - derived from metastatic tumour"
                ]
              }
            }
          }
        },
        "submitter_sample_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "donor": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "primary_site": {
          "restrictions": {
            "codeList": {
              "left": [
                "Accessory sinuses",
                "Adrenal gland",
                "Anus and anal canal",
                "Base of tongue",
                "Bladder",
                "Bones, joints and articular cartilage of limbs",
                "Bones, joints and articular cartilage of other and unspecified sites",
                "Brain",
                "Breast",
                "Bronchus and lung",
                "Cervix uteri",
                "Colon",
                "Connective, subcutaneous and other soft tissues",
                "Corpus uteri",
                "Esophagus",
                "Eye and adnexa",
                "Floor of mouth",
                "Gallbladder",
                "Gum",
                "Heart, mediastinum, and pleura",
                "Hematopoietic and reticuloendothelial systems",
                "Hypopharynx",
                "Kidney",
                "Larynx",
                "Lip",
                "Liver and intrahepatic bile ducts",
                "Lymph nodes",
                "Meninges",
                "Nasal cavity and middle ear",
                "Nasopharynx",
                "Oropharynx",
                "Other and ill-defined digestive organs",
                "Other and ill-defined sites",
                "Other and ill-defined sites in lip, oral cavity and pharynx",
                "Other and ill-defined sites within respiratory system and intrathoracic organs",
                "Other and unspecified female genital organs",
                "Other and unspecified major salivary glands",
                "Other and unspecified male genital organs",
                "Other and unspecified parts of biliary tract",
                "Other and unspecified parts of mouth",
                "Other and unspecified parts of tongue",
                "Other and unspecified urinary organs",
                "Other endocrine glands and related structures",
                "Ovary",
                "Palate",
                "Pancreas",
                "Parotid gland",
                "Penis",
                "Peripheral nerves and autonomic nervous system",
                "Placenta",
                "Prostate gland",
                "Pyriform sinus",
                "Rectosigmoid junction",
                "Rectum",
                "Renal pelvis",
                "Retroperitoneum and peritoneum",
                "Skin",
                "Small intestine",
                "Spinal cord, cranial nerves, and other parts of central nervous system",
                "Stomach",
                "Testis",
                "Thymus",
                "Thyroid gland",
                "Tonsil",
                "Trachea",
                "Unknown primary site",
                "Ureter",
                "Uterus, NOS",
                "Vagina",
                "Vulva"
              ],
              "right": [
                "Accessory sinuses",
                "Adrenal gland",
                "Anus and anal canal",
                "Base of tongue",
                "Bladder",
                "Bones, joints and articular cartilage of limbs",
                "Bones, joints and articular cartilage of other and unspecified sites",
                "Brain",
                "Breast",
                "Bronchus and lung",
                "Cervix uteri",
                "Colon",
                "Connective, subcutaneous and other soft tissues",
                "Corpus uteri",
                "Esophagus",
                "Eye and adnexa",
                "Floor of mouth",
                "Gallbladder",
                "Gum",
                "Heart, mediastinum, and pleura",
                "Hematopoietic and reticuloendothelial systems",
                "Hypopharynx",
                "Kidney",
                "Larynx",
                "Lip",
                "Liver and intrahepatic bile ducts",
                "Lymph nodes",
                "Meninges",
                "Nasal cavity and middle ear",
                "Nasopharynx",
                "Oropharynx",
                "Other and ill-defined digestive organs",
                "Other and ill-defined sites",
                "Other and ill-defined sites in lip, oral cavity and pharynx",
                "Other and ill-defined sites within respiratory system and intrathoracic organs",
                "Other and unspecified female genital organs",
                "Other and unspecified major salivary glands",
                "Other and unspecified male genital organs",
                "Other and unspecified parts of biliary tract",
                "Other and unspecified parts of mouth",
                "Other and unspecified parts of tongue",
                "Other and unspecified urinary organs",
                "Other endocrine glands and related structures",
                "Ovary",
                "Palate",
                "Pancreas",
                "Parotid gland",
                "Penis",
                "Peripheral nerves and autonomic nervous system",
                "Placenta",
                "Prostate gland",
                "Pyriform sinus",
                "Rectosigmoid junction",
                "Rectum",
                "Renal pelvis",
                "Retroperitoneum and peritoneum",
                "Skin",
                "Small intestine",
                "Spinal cord, cranial nerves, and other parts of central nervous system",
                "Stomach",
                "Testis",
                "Thymus",
                "Thyroid gland",
                "Tonsil",
                "Trachea",
                "Ureter",
                "Uterus, NOS",
                "Vagina",
                "Vulva"
              ],
              "data": { "added": [], "deleted": ["Unknown primary site"] }
            }
          }
        }
      },
      "created": {},
      "deleted": {
        "lost_to_followup_after_clinical_event_id": {
          "changeType": "deleted",
          "description": "If the donor became lost to follow up, indicate the identifier of the clinical event (eg. submitter_primary_diagnosis_id, submitter_treatment_id or submitter_follow_up_id) after which the donor became lost to follow up.",
          "name": "lost_to_followup_after_clinical_event_id",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n      \n        /* checks for a string just consisting of whitespace */\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n        \n        if (currField != null && !(checkforEmpty(currField))) {\n           const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n           if (vitalStatus === \"deceased\") {\n              result = {valid: false, message: `${$name} cannot be submitted if the donor's vital_status is deceased.`}\n           }\n        }\n        return result;\n    })"
            ]
          },
          "meta": {
            "displayName": "Lost To Follow Up After Clinical Event",
            "foreignKey": "primary_diagnosis.submitter_primary_diagnosis_id",
            "validationDependency": true
          }
        }
      }
    },
    "specimen": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": {
              "left": "primary_diagnosis.submitter_primary_diagnosis_id",
              "right": null
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "pathological_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (RISS)"],
                "deleted": ["Revised International staging system (R-ISS)"]
              }
            }
          }
        },
        "pathological_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "data": { "added": [], "deleted": ["Not applicable"] }
            }
          }
        },
        "tumour_grade": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n        case 'unknown':\n          codeList = ['unknown'];\n          break;\n        case 'not applicable':\n          codeList = ['not applicable'];\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    if ($row.tumour_grading_system && $field) {\n      let codeList = [];\n      const tieredGradingList = ['gx','g1','g2','g3'];\n      const gradingSystems = ['two-tier grading system', 'three-tier grading system', 'four-tier grading system', 'grading system for gists', 'grading system for gnets', 'isup grading system', 'who grading system for cns tumours', 'fnclcc grading system', 'gleason grade group system', 'scarff-bloom-richardson grading system', 'nuclear grading system for dcis'];\n      switch ($row.tumour_grading_system && $row.tumour_grading_system.trim().toLowerCase()) {\n        case 'two-tier grading system':\n          codeList = [\n            'low grade',\n            'high grade',\n          ];\n          break;\n        case 'three-tier grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'four-tier grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'grading system for gists':\n          codeList = [\n            'low',\n            'high',\n          ];\n          break;\n        case 'grading system for gnets':\n          codeList = tieredGradingList;\n          break;\n        case 'isup grading system':\n          codeList = [\n            'gx',\n            'g1',\n            'g2',\n            'g3',\n            'g4',\n          ];\n          break;\n        case 'who grading system for cns tumours':\n          codeList = [\n            'grade i',\n            'grade ii',\n            'grade iii',\n            'grade iv',\n          ];\n          break;\n        case 'fnclcc grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'gleason grade group system':\n          codeList = [\n            'grade group 1',\n            'grade group 2',\n            'grade group 3',\n            'grade group 4',\n            'grade group 5',\n          ];\n          break;\n        case 'scarff-bloom-richardson grading system':\n          codeList = tieredGradingList;\n          break;\n        case 'nuclear grading system for dcis':\n          codeList = tieredGradingList;\n          break;\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase())) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_grading_system' is set to '${\n          $row.tumour_grading_system\n        }', 'tumour_grade' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n        result.valid = false;\n        result.message = msg;\n      }\n      else if (!gradingSystems.includes($row.tumour_grading_system.trim().toLowerCase())) {\n         result.valid = false;\n         const msg = `'${$row.tumour_grading_system}' is not a permissible value for 'tumour_grading_system'. If the tumour grading system you use is missing, please contact the DCC.`;\n         result.message = msg;\n      }\n    }\n    return result;\n  })"
              ]
            }
          }
        },
        "percent_tumour_cells": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    // When $name is percent_tumour_cells, and $field is a number between 0 and 1\n    const {$row, $name, $field} = inputs;\n\n    const result = { valid: true, message: 'Ok' };\n    const measurementMethodExceptionTypes = ['not applicable'];\n\n    // checks for a string just consisting of whitespace\n    const checkforEmpty = (entry) => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    const fieldHasValue = $field && $field != null && !(checkforEmpty($field));\n    const measurementMethod = $row?.percent_tumour_cells_measurement_method?.trim?.().toLowerCase();\n\n    if (fieldHasValue) {\n      if (measurementMethodExceptionTypes.includes(measurementMethod)) {\n        return {\n          valid: false,\n          message: `The '${$name}' field cannot be submitted when 'percent_tumour_cells_measurement_method' = 'Not applicable'`\n        };\n      }\n    }\n\n    return result;\n  })"
              ],
              "right": null
            }
          }
        }
      },
      "created": {},
      "deleted": {
        "percent_tumour_cells_measurement_method": {
          "changeType": "deleted",
          "name": "percent_tumour_cells_measurement_method",
          "description": "Indicate method used to measure percent_tumour_cells.",
          "valueType": "string",
          "meta": {
            "core": true,
            "dependsOn": "sample_registration.tumour_normal_designation",
            "notes": "This field is only required if the specimen is a tumour.",
            "displayName": "Percent Tumour Cells Measurement Method"
          },
          "restrictions": {
            "codeList": ["Genomics", "Image analysis", "Pathology estimate by percent nuclei"]
          }
        }
      }
    },
    "primary_diagnosis": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "clinical_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (RISS)"],
                "deleted": ["Revised International staging system (R-ISS)"]
              }
            }
          }
        },
        "clinical_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "data": { "added": [], "deleted": ["Not applicable"] }
            }
          }
        }
      },
      "created": {},
      "deleted": {
        "lymph_nodes_examined_method": {
          "changeType": "deleted",
          "name": "lymph_nodes_examined_method",
          "description": "Indicate the method used to examine lymph nodes.",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      const notExamined = ['cannot be determined', 'no', 'no lymph nodes found in resected specimen', 'not applicable', 'unknown'];\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if (!$row.lymph_nodes_examined_status || $row.lymph_nodes_examined_status === null || checkforEmpty($row.lymph_nodes_examined_status)) {\n        result = {valid: false, message: `The 'lymph_nodes_examined_status' field must be submitted.`};\n      }\n      else {\n        const lymphNodesExaminedStatus = $row.lymph_nodes_examined_status.trim().toLowerCase();\n      \n        if (!$field || $field === null || checkforEmpty($field)) {\n          if (lymphNodesExaminedStatus === 'yes') {\n            result = { valid: false, message: `The '${$name}' field must be submitted if the 'lymph_nodes_examined_status' field is 'Yes'`};\n          }\n        }\n        else {\n          if (notExamined.includes(lymphNodesExaminedStatus)) {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if the 'lymph_nodes_examined_status' field is '${lymphNodesExaminedStatus}'`};\n          }\n        }\n      }\n    return result;\n})"
            ],
            "codeList": [
              "Imaging",
              "Lymph node dissection/pathological exam",
              "Physical palpation of patient"
            ]
          },
          "meta": {
            "core": true,
            "dependsOn": "primary_diagnosis.lymph_nodes_examined_status",
            "displayName": "Method Used to Examine Lymph Nodes"
          }
        }
      }
    },
    "treatment": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": {
              "left": "primary_diagnosis.submitter_primary_diagnosis_id",
              "right": null
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "treatment_type": {
          "restrictions": {
            "codeList": {
              "left": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "End of life care",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "right": [
                "Ablation",
                "Bone marrow transplant",
                "Chemotherapy",
                "Endoscopic therapy",
                "Hormonal therapy",
                "Immunotherapy",
                "No treatment",
                "Other targeting molecular therapy",
                "Photodynamic therapy",
                "Radiation therapy",
                "Stem cell transplant",
                "Surgery"
              ],
              "data": { "added": [], "deleted": ["End of life care"] }
            }
          }
        },
        "is_primary_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            },
            "codeList": {
              "left": ["Yes", "No"],
              "right": ["Yes", "No", "Unknown"],
              "data": { "added": ["Unknown"], "deleted": [] }
            }
          }
        },
        "line_of_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'not applicable') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'Not applicable'.`};\n         }\n      }\n      return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n\n      /* checks for a string just consisting of whitespace */\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n     \n      if (($field != null && (!(checkforEmpty($field)))) && ($row.is_primary_treatment != null && !(checkforEmpty($row.is_primary_treatment)))) {\n         const isPrimaryTreatment = $row.is_primary_treatment.trim().toLowerCase();\n         /* if treatment is the primary treatment, then line_of_treatment should not be submitted. */\n         if (isPrimaryTreatment === 'yes') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if this treatment is the primary treatment.`};\n         }\n         /* if treatment is not primary treatment, then line_of_treatment must be greater than 1 */\n         else if (isPrimaryTreatment === 'no' && parseInt($field) <= 1) {\n            result = { valid: false, message: `The '${$name}' field must be a value greater than 1`};\n         }\n         /* if it is unknown whether treatment was primary treatment, then line_of_treatment should not be submitted. If it is, then primary_treatment should be 'no' */\n         else if (isPrimaryTreatment === 'unknown') {\n            result = { valid: false, message: `The '${$name}' field should not be submitted if 'is_primary_treatment' is 'unknown'.`};\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "treatment_start_interval": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "treatment_duration": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "days_per_cycle": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "number_of_cycles": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "treatment_intent": {
          "description": {
            "left": "Indicate the purpose of the treatment, or the desired effect or outcome resulting from the treatment. (Reference: mCODE/FHIR)",
            "right": "Indicate the intended disease outcome for which the treatment is given. (Reference: NCIt C124307)"
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            },
            "codeList": {
              "left": [
                "Curative",
                "Diagnostic",
                "Forensic",
                "Guidance",
                "Palliative",
                "Preventative",
                "Screening",
                "Supportive"
              ],
              "right": ["Curative", "Palliative", "Unknown"],
              "data": {
                "added": ["Unknown"],
                "deleted": [
                  "Diagnostic",
                  "Forensic",
                  "Guidance",
                  "Preventative",
                  "Screening",
                  "Supportive"
                ]
              }
            }
          }
        },
        "treatment_setting": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            },
            "codeList": {
              "left": [
                "Adjuvant",
                "Advanced/Metastatic",
                "Conditioning",
                "Induction",
                "Maintenance",
                "Mobilization",
                "Neoadjuvant",
                "Preventative",
                "Radiosensitization",
                "Salvage"
              ],
              "right": ["Adjuvant", "Advanced/Metastatic", "Neoadjuvant", "Not applicable"],
              "data": {
                "added": ["Not applicable"],
                "deleted": [
                  "Conditioning",
                  "Induction",
                  "Maintenance",
                  "Mobilization",
                  "Preventative",
                  "Radiosensitization",
                  "Salvage"
                ]
              }
            }
          }
        },
        "response_to_treatment": {
          "description": {
            "left": "The donor's response to the applied treatment regimen.",
            "right": "The donor's response to the applied treatment regimen. (Source: RECIST)"
          },
          "meta": {
            "dependsOn": {
              "left": "treatment.response_to_treatment_criteria_method",
              "right": "treatment.treatment_type"
            },
            "notes": {
              "left": "This field depends on the selected response_to_treatment_criteria_method. Please refer to the documentation for Response to Treatment Criteria: http://docs.icgc-argo.org/docs/submission/dictionary-overview#response-to-treatment-criteria",
              "right": null
            }
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })",
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n\n    /* checks for a string just consisting of whitespace */\n    const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n    let codeList = [];\n    \n      switch ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method.trim().toLowerCase()) {\n        case 'eln dohner aml 2017 oncology response criteria':\n          codeList = [\n            'complete remission',\n            'complete remission with incomplete hematologic recovery (cri)',\n            'complete remission without minimal residual disease (crmrd-)',\n            'hematologic relapse (after crmrd-, cr, cri)',\n            'molecular relapse (after crmrd-)',\n            'partial remission',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'iwg cheson aml 2003 oncology response criteria':\n          codeList = [\n            'cytogenetic complete remission (crc)',\n            'molecular complete remission (crm)',\n            'morphologic complete remission',\n            'morphologic complete remission with incomplete blood count recovery (cri)',\n            'morphologic leukemia-free state',\n            'partial remission'\n          ];\n          break;\n        case 'irecist':\n          codeList = [\n            'immune complete response (icr)',\n            'immune confirmed progressive disease (icpd)',\n            'immune partial response (ipr)',\n            'immune stable disease (isd)',\n            'immune unconfirmed progressive disease (iupd)'\n          ];\n          break;\n        case 'recist':\n          codeList = [\n            'complete response',\n            'no evidence of disease (ned)',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'response assessment in neuro-oncology (rano)':\n          codeList = [\n            'complete response',\n            'minor response',\n            'partial response',\n            'progressive disease',\n            'stable disease'\n          ];\n          break;\n        case 'physician assessed response criteria':\n          codeList = [\n            'physician assessed complete response',\n            'physician assessed partial response',\n            'physician assessed progressive disease',\n            'physician assessed stable disease'\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n    if ($field && $field != null && !(checkforEmpty($field))) {\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'response_to_treatment_criteria_method' is set to '${\n          $row.response_to_treatment_criteria_method}', the '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    else {\n       if ($row.response_to_treatment_criteria_method && $row.response_to_treatment_criteria_method != null && !(checkforEmpty($row.response_to_treatment_criteria_method))) {\n         result = { valid: false, message: `The '${$name}' field must be submitted when 'response_to_treatment_criteria_method' is set to '${$row.response_to_treatment_criteria_method}'. The '${$name}' field must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`};\n       }\n    }\n    return result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            },
            "codeList": {
              "left": [
                "Complete remission",
                "Complete remission with incomplete hematologic recovery (CRi)",
                "Complete remission without minimal residual disease (CRMRD-)",
                "Complete response",
                "Cytogenetic complete remission (CRc)",
                "Hematologic relapse (after CRMRD-, CR, CRi)",
                "Immune complete response (iCR)",
                "Immune confirmed progressive disease (iCPD)",
                "Immune partial response (iPR)",
                "Immune stable disease (iSD)",
                "Immune unconfirmed progressive disease (iUPD)",
                "Minor response",
                "Molecular complete remission (CRm)",
                "Molecular relapse (after CRMRD-)",
                "Morphologic complete remission",
                "Morphologic complete remission with incomplete blood count recovery (CRi)",
                "Morphologic leukemia-free state",
                "No evidence of disease (NED)",
                "Partial remission",
                "Partial response",
                "Physician assessed complete response",
                "Physician assessed partial response",
                "Physician assessed progressive disease",
                "Physician assessed stable disease",
                "Progressive disease",
                "Stable disease"
              ],
              "right": [
                "Complete response",
                "Disease progression",
                "NED",
                "Partial response",
                "Stable disease"
              ],
              "data": {
                "added": ["Disease progression", "NED"],
                "deleted": [
                  "Complete remission",
                  "Complete remission with incomplete hematologic recovery (CRi)",
                  "Complete remission without minimal residual disease (CRMRD-)",
                  "Cytogenetic complete remission (CRc)",
                  "Hematologic relapse (after CRMRD-, CR, CRi)",
                  "Immune complete response (iCR)",
                  "Immune confirmed progressive disease (iCPD)",
                  "Immune partial response (iPR)",
                  "Immune stable disease (iSD)",
                  "Immune unconfirmed progressive disease (iUPD)",
                  "Minor response",
                  "Molecular complete remission (CRm)",
                  "Molecular relapse (after CRMRD-)",
                  "Morphologic complete remission",
                  "Morphologic complete remission with incomplete blood count recovery (CRi)",
                  "Morphologic leukemia-free state",
                  "No evidence of disease (NED)",
                  "Partial remission",
                  "Physician assessed complete response",
                  "Physician assessed partial response",
                  "Physician assessed progressive disease",
                  "Physician assessed stable disease",
                  "Progressive disease"
                ]
              }
            }
          }
        },
        "outcome_of_treatment": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        },
        "adverse_events": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      const coreFields = ['is_primary_treatment', 'treatment_start_interval', 'treatment_duration', 'treatment_intent', 'treatment_setting', 'response_to_treatment'];\n \n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n      if ($row.treatment_type != null) {\n         const treatmentType = $row.treatment_type;\n         if (!(treatmentType.includes(\"No treatment\"))) {\n            if (coreFields.includes($name)) {\n               if (!$field || checkforEmpty($field)) {\n                  result = {\n                     valid: false,\n                     message: `The '${$name}' field must be submitted when 'treatment_type' is '${treatmentType}'`,\n                  };\n               }\n            }\n         }\n         else if (treatmentType.includes(\"No treatment\") && ($field)) {\n            result = {\n               valid: false,\n               message: `The '${$name}' field should not be submitted if 'treatment_type' is set to '${treatmentType}'`,\n            };\n         }\n      }\n      return result;\n  })"
              ]
            }
          }
        }
      },
      "created": {},
      "deleted": {
        "response_to_treatment_criteria_method": {
          "changeType": "deleted",
          "name": "response_to_treatment_criteria_method",
          "description": "Indicate the criteria used to assess the donor's response to the applied treatment regimen.",
          "valueType": "string",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n        const { $row, $name, $field } = inputs;\n        const result = { valid: true, message: 'Ok' };\n\n        const arrayItemsInSecondArray = (arr1, arr2) => {\n            return arr2.some(arr2Item => {\n                return arr1.includes(arr2Item);\n            });\n        };\n\n        const coreFields = [\n            'treatment_start_interval',\n            'treatment_duration',\n            'is_primary_treatment',\n            'treatment_intent',\n            'treatment_setting',\n            'response_to_treatment_criteria_method',\n            'response_to_treatment',\n        ];\n\n        const treatmentExceptionTypes = ['no treatment', 'unknown'];\n\n        // checks for a string just consisting of whitespace\n        const checkforEmpty = entry => {\n            return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n        };\n        const treatmentTypes = $row.treatment_type.map(value => value.toLowerCase());\n\n        const recordHasTreatments = !arrayItemsInSecondArray(\n            treatmentExceptionTypes,\n            treatmentTypes,\n        );\n\n        if (recordHasTreatments) {\n            if (\n                coreFields.includes($name) &&\n                (!$field || $field === null || checkforEmpty($field))\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field must be submitted when the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n\n        } else if ($field && $field != null && !checkforEmpty($field)) {\n            if (\n                coreFields.includes($name) ||\n                (typeof $field === 'string' && $field.trim().toLowerCase() != 'not applicable') ||\n                typeof $field === 'number'\n            ) {\n                return {\n                    valid: false,\n                    message: `The '${$name}' field cannot be submitted if the 'treatment_type' field is '${treatmentTypes}'`,\n                };\n            }\n        }\n        return result;\n    })"
            ],
            "codeList": [
              "ELN Dohner AML 2017 Oncology Response Criteria",
              "IWG Cheson AML 2003 Oncology Response Criteria",
              "iRECIST",
              "RECIST",
              "Response Assessment in Neuro-Oncology (RANO)",
              "Physician Assessed Response Criteria"
            ]
          },
          "meta": {
            "core": true,
            "displayName": "Response To Treatment Criteria Method",
            "validationDependency": true,
            "dependsOn": "treatment.treatment_type"
          }
        }
      }
    },
    "chemotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {
        "chemotherapy_dosage_units": {
          "changeType": "created",
          "name": "chemotherapy_dosage_units",
          "description": "Indicate units used to record chemotherapy drug dosage.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Chemotherapy Dosage Units" }
        },
        "cumulative_drug_dosage": {
          "changeType": "created",
          "name": "cumulative_drug_dosage",
          "description": "Indicate the total actual drug dose in the same units specified in chemotherapy_dosage_units.",
          "valueType": "number",
          "restrictions": { "required": true, "range": { "exclusiveMin": 0 } },
          "meta": { "core": true, "displayName": "Cumulative Drug Dosage" }
        }
      },
      "deleted": {
        "chemotherapy_drug_dose_units": {
          "changeType": "deleted",
          "name": "chemotherapy_drug_dose_units",
          "description": "Indicate units used to record chemotherapy drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Chemotherapy Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in chemotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "validationDependency": true,
            "dependsOn": "chemotherapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in chemotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n   \n      // Check for when chemotherapy dose has a clinical exception value of 'not applicable'\n      if ($row.chemotherapy_drug_dose_units && $row.chemotherapy_drug_dose_units != null && !(checkforEmpty($row.chemotherapy_drug_dose_units)) && $row.chemotherapy_drug_dose_units.trim().toLowerCase() === 'not applicable') {\n        if ($field && $field != null && !(checkforEmpty($field))) {\n          result = {\n            valid: false,\n            message: `The '${$name}' field cannot be submitted when 'chemotherapy_drug_dose_units' = 'Not applicable'`\n          };\n        }\n      }\n      else {\n        if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n          result = {\n            valid: false,\n            message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n          };\n        }\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "validationDependency": true,
            "dependsOn": "chemotherapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      }
    },
    "hormone_therapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {
        "hormone_drug_dosage_units": {
          "changeType": "created",
          "name": "hormone_drug_dosage_units",
          "description": "Indicate the units used to record hormone drug dosage.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Hormone Therapy Dosage Units" }
        },
        "cumulative_drug_dosage": {
          "changeType": "created",
          "name": "cumulative_drug_dosage",
          "description": "Indicate total drug dose in units specified in hormone_drug_dosage_units.",
          "valueType": "number",
          "restrictions": { "required": true, "range": { "exclusiveMin": 0 } },
          "meta": { "core": true, "displayName": "Cumulative Drug Dosage" }
        }
      },
      "deleted": {
        "hormone_drug_dose_units": {
          "changeType": "deleted",
          "name": "hormone_drug_dose_units",
          "description": "Indicate the units used to record hormone drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Hormone Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in hormone_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "dependsOn": "hormone_therapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in hormone_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "dependsOn": "hormone_therapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      }
    },
    "radiation": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "immunotherapy": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {
        "immunotherapy_drug_dose_units": {
          "changeType": "deleted",
          "name": "immunotherapy_drug_dose_units",
          "description": "Indicate units used to record immunotherapy drug dose.",
          "valueType": "string",
          "restrictions": {
            "required": true,
            "codeList": ["mg/m2", "IU/m2", "ug/m2", "g/m2", "mg/kg"]
          },
          "meta": { "core": true, "displayName": "Immunotherapy Drug Dose Units" }
        },
        "prescribed_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "prescribed_cumulative_drug_dose",
          "description": "Indicate the total prescribed cumulative drug dose in the same units specified in immunotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Prescribed Cumulative Drug Dose",
            "dependsOn": "immunotherapy.actual_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        },
        "actual_cumulative_drug_dose": {
          "changeType": "deleted",
          "name": "actual_cumulative_drug_dose",
          "description": "Indicate the total actual cumulative drug dose in the same units specified in immunotherapy_drug_dose_units.",
          "valueType": "number",
          "restrictions": {
            "script": [
              "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n      let result = {valid: true, message: \"Ok\"};\n      let checkField = \"\";\n\n      if ($name === 'actual_cumulative_drug_dose') { checkField = 'prescribed_cumulative_drug_dose'; }\n      else if ($name === 'prescribed_cumulative_drug_dose') { checkField = 'actual_cumulative_drug_dose'; }\n\n      // checks for a string just consisting of whitespace\n      const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n      \n      if ( (!$field || $field === null || checkforEmpty($field)) && (!($row[checkField]) || $row[checkField] === null || checkforEmpty(!($row[checkField])))) {\n        result = {\n          valid: false,\n          message: `Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' fields must be submitted.`\n        };\n      }\n      return result;\n  })"
            ],
            "range": { "exclusiveMin": 0 }
          },
          "meta": {
            "core": true,
            "displayName": "Actual Cumulative Drug Dose",
            "dependsOn": "immunotherapy.prescribed_cumulative_drug_dose",
            "notes": "Either the 'actual_cumulative_drug_dose' or the 'prescribed_cumulative_drug_dose' field must be submitted."
          }
        }
      }
    },
    "surgery": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "follow_up": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_follow_up_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": {
              "left": "primary_diagnosis.submitter_primary_diagnosis_id",
              "right": null
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": { "left": "treatment.submitter_treatment_id", "right": null }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "relapse_type": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "method_of_progression_status": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "anatomic_site_progression_or_recurrence": {
          "description": {
            "left": "Indicate the ICD-O-3 topography code for the anatomic site(s) where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.",
            "right": "Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344."
          },
          "meta": {
            "examples": { "left": "C50.1|C18", "right": "C50.1,C18" },
            "notes": {
              "left": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file.",
              "right": "This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."
            }
          },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "recurrence_tumour_staging_system": {
          "meta": { "core": { "left": null, "right": true } },
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (RISS)"],
                "deleted": ["Revised International staging system (R-ISS)"]
              }
            },
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })",
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n           \n           if ($name === 'recurrence_tumour_staging_system') {\n             if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n           else {\n             if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n               result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n             }\n             else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n               result = {valid: false, message: `'${$name}' should not be submitted if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n             }\n           }\n        }\n        return  result;\n  })"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    const listFormatter = arr => `${arr.map(entry => `\"${entry}\"`).join(', ')}`;\n\n   \n   /* Contingent on the naming system for tumour staging systems to remain consistent */\n    const stagingName = $name\n      .trim()\n      .toLowerCase()\n      .split('_tumour_staging_system')[0];\n    const requiredFields = [\n      `${stagingName}_m_category`,\n      `${stagingName}_n_category`,\n      `${stagingName}_t_category`,\n    ];\n    const convertedRow = Object.fromEntries(\n      Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n    );\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n\n    /* search for fields with falsy values*/\n    const emptyFields = requiredFields.filter(\n      field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n    );\n\n    /* The staging system should be set to an AJCC option if the TNM fields are submitted */\n    if (!($field) && emptyFields.length != requiredFields.length) {\n       const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n       result = {\n         valid: false,\n         message:`The ${stagingName}_tumour_staging_system field must be set to an AJCC option when the following fields are submitted: ${listFormatter(\n            errorFields,\n          )}`,\n       };\n    }\n    /* This is not a required field, so first ensure that it exists */\n    else if ($field) {\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })",
                "(function validate(inputs) {\n      const {$row, $name, $field} = inputs;\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        if ($row.disease_status_at_followup != null) {\n           const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n           const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n           const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n           /* checks for a string just consisting of whitespace */\n           const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n           if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n              result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n           }\n           else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n              result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n           }\n        }\n        return  result;\n  })"
              ]
            }
          }
        },
        "recurrence_t_category": { "meta": { "core": { "left": null, "right": true } } },
        "recurrence_n_category": { "meta": { "core": { "left": null, "right": true } } },
        "recurrence_m_category": {
          "meta": { "core": { "left": null, "right": true } },
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "data": { "added": [], "deleted": ["Not applicable"] }
            }
          }
        },
        "recurrence_stage_group": { "meta": { "core": { "left": null, "right": true } } },
        "posttherapy_tumour_staging_system": {
          "restrictions": {
            "codeList": {
              "left": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (R-ISS)",
                "St Jude staging system"
              ],
              "right": [
                "AJCC 8th edition",
                "AJCC 7th edition",
                "AJCC 6th edition",
                "Ann Arbor staging system",
                "Binet staging system",
                "Durie-Salmon staging system",
                "FIGO staging system",
                "Lugano staging system",
                "Rai staging system",
                "Revised International staging system (RISS)",
                "St Jude staging system"
              ],
              "data": {
                "added": ["Revised International staging system (RISS)"],
                "deleted": ["Revised International staging system (R-ISS)"]
              }
            }
          }
        },
        "posttherapy_m_category": {
          "restrictions": {
            "script": {
              "left": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if ($row[tumourStagingSystem].trim().toLowerCase() == \"ajcc 6th edition\") {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'not applicable') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ],
              "right": [
                "(function validate(inputs) {\n    const {$row, $name, $field} = inputs;\n    let result = { valid: true, message: 'Ok' };\n    const stagingSystems = ['ajcc 7th edition', 'ajcc 8th edition'];\n    const stagingName = $name.trim().toLowerCase().split('_m_category')[0];\n    const tumourStagingSystem = `${stagingName}_tumour_staging_system`;\n\n    /* Check for contigous spaces wrapped with quotes (empty strings) */\n    const checkforEmpty = entry => {\n      return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n    };\n  \n   \n    if ($row[tumourStagingSystem] && $row[tumourStagingSystem] != null && !(checkforEmpty($row[tumourStagingSystem]))) {\n      if (stagingSystems.includes($row[tumourStagingSystem].trim().toLowerCase())) {\n         if ($field && $field != null && !(checkforEmpty($field)) && $field.trim().toLowerCase() === 'mx') {\n           result = {\n             valid: false,\n             message: `The designation of '${$field}' in the '${$name}' field is not a valid M category in the ${tumourStagingSystem} '${$row[tumourStagingSystem]}'.`\n           };\n         }\n      }\n    }\n    return result;\n})"
              ]
            },
            "codeList": {
              "left": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX",
                "Not applicable"
              ],
              "right": [
                "M0",
                "M0(i+)",
                "M1",
                "M1a",
                "M1a(0)",
                "M1a(1)",
                "M1b",
                "M1b(0)",
                "M1b(1)",
                "M1c",
                "M1c(0)",
                "M1c(1)",
                "M1d",
                "M1d(0)",
                "M1d(1)",
                "M1e",
                "MX"
              ],
              "data": { "added": [], "deleted": ["Not applicable"] }
            }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "exposure": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "family_history": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "family_relative_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "biomarker": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_specimen_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_primary_diagnosis_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": {
              "left": "primary_diagnosis.submitter_primary_diagnosis_id",
              "right": null
            }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_treatment_id": {
          "meta": {
            "validationDependency": { "left": true, "right": null },
            "foreignKey": { "left": "treatment.submitter_treatment_id", "right": null }
          },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        },
        "submitter_follow_up_id": {
          "meta": { "foreignKey": { "left": "follow_up.submitter_follow_up_id", "right": null } },
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    },
    "comorbidity": {
      "updated": {
        "submitter_donor_id": {
          "restrictions": {
            "regex": { "left": "^[A-Za-z0-9\\-\\._]{1,64}$", "right": "^[A-Za-z0-9\\-\\._]{1,64}" }
          }
        }
      },
      "created": {},
      "deleted": {}
    }
  }
}
