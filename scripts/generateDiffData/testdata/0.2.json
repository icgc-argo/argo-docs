{
  "schemas": [
    {
      "name": "sample_registration",
      "description": "new description that is very cool",
      "fields": [
        {
          "name": "updated_submitter_donor_id",
          "valueType": "string",
          "description": "better Unique identifier of the donor, assigned by the data provider.",
          "meta": {
            "validationDependency": false,
            "primaryId": false,
            "examples": "good dexamples 90234,BLD_donor_89,AML-90",
            "displayName": "Submitter Donor ID Display",
            "notes": "Edited this, To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."
          },
          "restrictions": {
            "required": false,
            "regex": "\\b(?!([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"
          }
        },
        {
          "name": "gender",
          "valueType": "string",
          "description": "needs to be here ",
          "meta": {
            "validationDependency": true,
            "primaryId": true,
            "displayName": "Gender"
          },
          "restrictions": {
            "required": false,
            "codeList": ["Female", "Male"]
          }
        },
        {
          "name": "submitter_specimen_id",
          "valueType": "string",
          "description": "Unique identifier of the specimen, assigned by the data provider.",
          "meta": {
            "dependsOn": "sample_registration.gender",
            "validationDependency": true,
            "primaryId": true,
            "examples": "new example LAML_PO,00445,THY_099-tumour",
            "displayName": "Submitter Specimen ID",
            "notes": "To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."
          },
          "restrictions": {
            "required": true,
            "regex": "$(changed)\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"
          }
        },
        {
          "name": "specimen_tissue_source",
          "valueType": "string",
          "description": "Tissue source of the biospecimen.",
          "meta": {
            "validationDependency": false,
            "core": false,
            "displayName": "Specimen Tissue Source dedited"
          },
          "restrictions": {
            "required": true,
            "codeList": ["Blood derived - bone marrow", "Bone marrow", "Spleen", "Urine"]
          }
        },
        {
          "name": "tumour_normal_designation",
          "valueType": "integer",
          "description": "Description of specimens tumour/normal status for data processing.",
          "meta": {
            "validationDependency": true,
            "core": true,
            "displayName": "Tumour Normal Designation"
          }
        },
        {
          "name": "specimen_type",
          "valueType": "string",
          "description": "Description of the kind of specimen that was collected with respect to tumour/normal tissue origin.",
          "restrictions": {
            "required": true,
            "codeList": [
              "Cell line - derived from normal",
              "Metastatic tumour - metastasis to distant location",
              "Metastatic tumour",
              "Primary tumour",
              "Recurrent tumour",
              "Xenograft - derived from tumour cell line"
            ],
            "script": [
              "(function shouldValidate() {\n\n        const row = $row;\n        let result = {valid: true, message: \"Ok\"};\n        \n        const designation = row.tumour_normal_designation.trim().toLowerCase();\n        const specimen_type = $field.trim().toLowerCase();\n        \n        if (designation === \"normal\"){\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\n            }\n        }\n        else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\n            }\n        }\n        return result;\n    })()"
            ]
          },
          "meta": {
            "validationDependency": true,
            "core": true,
            "displayName": "Specimen Type"
          }
        },
        {
          "name": "submitter_sample_id",
          "valueType": "string",
          "description": "Unique identifier of the sample, assigned by the data provider.",
          "meta": {
            "validationDependency": true,
            "primaryId": false,
            "examples": "hnc_12,CCG_34_94583,BRCA47832-3239",
            "displayName": "Submitter Sample ID",
            "notes": "betterTo prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."
          },
          "restrictions": {
            "required": true,
            "regex": "\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"
          }
        },
        {
          "name": "sample_type",
          "valueType": "string",
          "description": "Description of the type of molecular sample used for testing.",
          "restrictions": {
            "required": true,
            "codeList": [
              "Amplified DNA",
              "ctDNA",
              "Other DNA enrichments",
              "ctDNA-0",
              "ctDNA-1",
              "ctDNA-2",
              "ctDNA-3",
              "added_to_list"
            ]
          }
        }
      ]
    },
    {
      "name": "treatment",
      "description": "The collection of data elements related to a donor's treatment at a specific point in the clinical record. To submit multiple treatments for a single donor, please submit treatment rows in the treatment file for this donor      ",
      "fields": [
        {
          "name": "adverse_events",
          "description": "Report any treatment related adverse events. (Codelist reference: NCI-CTCAE (v5.0))",
          "valueType": "string",
          "meta": {
            "notes": "To include multiple values, separate values with a pipe delimiter '|' within your file."
          },
          "restrictions": {
            "codeList": ["Abducens nerve disorder", "item-0"]
          }
        },
        {
          "name": "outcome_of_treatment",
          "description": "Indicate the donor's outcome of the prescribed treatment.",
          "valueType": "string"
        },
        {
          "name": "number_of_cycles",
          "description": "Indicate the number of treatment cycles.",
          "valueType": "integer"
        }
      ]
    }
  ],
  "_id": "5f3c2e646b4024065103a64f",
  "name": "diff-test",
  "version": "0.8",
  "createdAt": "2020-08-18T19:39:16.820Z",
  "updatedAt": "2020-08-18T19:39:16.820Z",
  "__v": 0
}
